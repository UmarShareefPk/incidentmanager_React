[{"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\index.js":"1","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\App.js":"2","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\reportWebVitals.js":"3","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\rootReducer.js":"4","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\NavBar.js":"5","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\UsersList.js":"6","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Login\\Login.js":"7","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\AddUser.js":"8","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\IncidentLisiting.js":"9","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\AddNew.js":"10","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\signalR\\Receiver.js":"11","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDetails.js":"12","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\Dashboard.js":"13","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\userLoginReducer.js":"14","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\usersReducer.js":"15","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\incidentsReducer.js":"16","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\notificationsReducer.js":"17","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\dashboardReducer.js":"18","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\messagesReducer.js":"19","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Messages.js":"20","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\User.js":"21","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Pages.js":"22","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\PageActions.js":"23","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\Incident.js":"24","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Notifications.js":"25","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\AssigneeDropdown.js":"26","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comments.js":"27","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OldestOpen.js":"28","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\DayByDayCount.js":"29","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OverallWidget.js":"30","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\LastFive.js":"31","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\MostAssignedByUser.js":"32","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\KPIBar.js":"33","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDescription.js":"34","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentTitle.js":"35","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\usersActions.js":"36","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\notificationsActions.js":"37","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\incidentsActions.js":"38","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\userLoginActions.js":"39","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\api\\apiURLs.js":"40","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\messagesActions.js":"41","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\SendMessage.js":"42","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\dashboardActions.js":"43","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comment.js":"44","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\signalR\\sender.js":"45","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\ComposeMessage.js":"46","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Reply.js":"47","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Message.js":"48","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Conversation.js":"49"},{"size":1161,"mtime":1636820537134,"results":"50","hashOfConfig":"51"},{"size":1948,"mtime":1639744840501,"results":"52","hashOfConfig":"51"},{"size":375,"mtime":1636820537134,"results":"53","hashOfConfig":"51"},{"size":639,"mtime":1638873118691,"results":"54","hashOfConfig":"51"},{"size":3814,"mtime":1642181217523,"results":"55","hashOfConfig":"51"},{"size":3923,"mtime":1642417475681,"results":"56","hashOfConfig":"51"},{"size":2730,"mtime":1636820537131,"results":"57","hashOfConfig":"51"},{"size":6483,"mtime":1636820537132,"results":"58","hashOfConfig":"51"},{"size":4923,"mtime":1642417449396,"results":"59","hashOfConfig":"51"},{"size":13235,"mtime":1639676203924,"results":"60","hashOfConfig":"51"},{"size":2331,"mtime":1642013797184,"results":"61","hashOfConfig":"51"},{"size":17683,"mtime":1636820537130,"results":"62","hashOfConfig":"51"},{"size":904,"mtime":1636820537127,"results":"63","hashOfConfig":"51"},{"size":1112,"mtime":1636820537138,"results":"64","hashOfConfig":"51"},{"size":839,"mtime":1636820537138,"results":"65","hashOfConfig":"51"},{"size":4705,"mtime":1636820537137,"results":"66","hashOfConfig":"51"},{"size":1171,"mtime":1636820537138,"results":"67","hashOfConfig":"51"},{"size":1213,"mtime":1636820537137,"results":"68","hashOfConfig":"51"},{"size":813,"mtime":1641668207389,"results":"69","hashOfConfig":"51"},{"size":6193,"mtime":1641930592054,"results":"70","hashOfConfig":"51"},{"size":263,"mtime":1636820537132,"results":"71","hashOfConfig":"51"},{"size":3667,"mtime":1642419719043,"results":"72","hashOfConfig":"51"},{"size":1135,"mtime":1642185307645,"results":"73","hashOfConfig":"51"},{"size":2462,"mtime":1642418251441,"results":"74","hashOfConfig":"51"},{"size":5101,"mtime":1642181327183,"results":"75","hashOfConfig":"51"},{"size":5254,"mtime":1641666283237,"results":"76","hashOfConfig":"51"},{"size":3692,"mtime":1636820537129,"results":"77","hashOfConfig":"51"},{"size":2574,"mtime":1642413902181,"results":"78","hashOfConfig":"51"},{"size":2089,"mtime":1636820537127,"results":"79","hashOfConfig":"51"},{"size":4214,"mtime":1642183729288,"results":"80","hashOfConfig":"51"},{"size":2488,"mtime":1642413910181,"results":"81","hashOfConfig":"51"},{"size":4201,"mtime":1642413840919,"results":"82","hashOfConfig":"51"},{"size":1558,"mtime":1642376133930,"results":"83","hashOfConfig":"51"},{"size":4232,"mtime":1636820537129,"results":"84","hashOfConfig":"51"},{"size":3299,"mtime":1636820537130,"results":"85","hashOfConfig":"51"},{"size":1899,"mtime":1636820537137,"results":"86","hashOfConfig":"51"},{"size":1946,"mtime":1636820537136,"results":"87","hashOfConfig":"51"},{"size":7079,"mtime":1636820537136,"results":"88","hashOfConfig":"51"},{"size":3022,"mtime":1636820537137,"results":"89","hashOfConfig":"51"},{"size":2131,"mtime":1641668336982,"results":"90","hashOfConfig":"51"},{"size":3858,"mtime":1641923749388,"results":"91","hashOfConfig":"51"},{"size":3719,"mtime":1639738887015,"results":"92","hashOfConfig":"51"},{"size":3283,"mtime":1636820537136,"results":"93","hashOfConfig":"51"},{"size":5399,"mtime":1636820537128,"results":"94","hashOfConfig":"51"},{"size":2343,"mtime":1642013512561,"results":"95","hashOfConfig":"51"},{"size":2557,"mtime":1641747810115,"results":"96","hashOfConfig":"51"},{"size":2090,"mtime":1641923923365,"results":"97","hashOfConfig":"51"},{"size":611,"mtime":1641921696723,"results":"98","hashOfConfig":"51"},{"size":1796,"mtime":1641926737946,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"18lj646",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"102"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"102"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"102"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"102"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"102"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"102"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"102"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"102"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"102"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"102"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"102"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"102"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"102"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"102"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"102"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"102"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"102"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"102"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"102"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"102"},"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\index.js",[],["221","222"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\App.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\reportWebVitals.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\rootReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\NavBar.js",["223","224","225","226"],"import {React} from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/Navbar.css';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Notifications from './Notifications';\r\nimport { signOut } from \"../store/actions/userLoginActions\";\r\n\r\nfunction NavBar({user_Name, loginError, token, signOut}) {\r\n\r\n  if (!token){\r\n    alert(\"Your session has been expired. Please login again.\")\r\n    return <Redirect to='/' /> \r\n  } \r\n  // if (loginError) return <Redirect to='/' /> \r\n   \r\n    return (\r\n      <nav className=\"nav-wrapper \">\r\n        <div className=\"container\">\r\n          <div className=\"left\">\r\n            <NavLink to=\"/dashboard\" className=\"brand-logo\">             \r\n              Incident Manager\r\n            </NavLink>\r\n          </div>\r\n          <a href=\"#\" className=\"sidenav-trigger\" data-target=\"mobile-menu\">\r\n            <i className=\"material-icons\">menu</i>\r\n          </a>\r\n          <ul className=\"right hide-on-med-and-down\">\r\n            <li>     \r\n              <NavLink to=\"/incidentListing\" >             \r\n                 Incidents\r\n              </NavLink> \r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/UsersList\" >             \r\n                   Users \r\n                </NavLink>              \r\n            </li> \r\n               \r\n            <li>     \r\n              <NavLink to=\"/messages\" className=\"message-nav \" >     \r\n                {/* <i className=\"material-icons  \">message</i> */}\r\n                Messages\r\n              \r\n              </NavLink> \r\n              \r\n            </li>    \r\n            <li>\r\n              <span className=\" badge white-text new green messages-badge\">5</span> \r\n              </li>   \r\n            {/* <li onClick={()=> commentSent(\"Hi please work.\")}>              */}\r\n           \r\n              <Notifications />\r\n            <li>\r\n                <button type=\"button\" title={user_Name} className=\"btn-floating  orange darken-3 userWelcome\" >\r\n                  {user_Name.split(/\\s/).reduce((response,word)=> response+=word.slice(0,1),'')} \r\n                 </button>\r\n            </li>\r\n            <li className=\" singout-btn\">\r\n             <a> <i className=\"material-icons white-text\" onClick={signOut}>settings_power</i> </a>\r\n            </li>\r\n          </ul>\r\n          {/* for mobile */}\r\n          <ul className=\"sidenav grey lighten-2\" id=\"mobile-menu\">\r\n            <li>\r\n              <NavLink to=\"/Messages\" className=\"sidenav-close\">\r\n                Messages\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/incidentListing\" className=\"sidenav-close\">\r\n                Incidents\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/UsersList\" className=\"sidenav-close\">\r\n                Users\r\n              </NavLink>\r\n            </li>\r\n\r\n            <li>\r\n              <a> <i className=\"material-icons\" onClick={signOut}>settings_power</i> </a>\r\n            </li>\r\n\r\n            <li>\r\n              <a href=\"\" className=\" white-text\">\r\n                <i className=\"material-icons\">notifications</i>\r\n                <span className=\"Indigo-text\">5</span>\r\n              </a>\r\n\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{      \r\n      user_Name :state.userLogin.user_Name, // Logged in User's name\r\n      userId :state.userLogin.userId,  // logged in User Id      \r\n      loginError : state.userLogin.loginError,\r\n      token : state.userLogin.token   \r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    signOut: () => dispatch(signOut())\r\n \r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\UsersList.js",["227"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Login\\Login.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\AddUser.js",["228","229"],"import {React , useRef, useEffect, useState} from 'react';\r\nimport PageActions from \"../PageActions\";\r\nimport M from 'materialize-css';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { addNewUser } from '../../store/actions/usersActions';\r\n\r\n\r\n function AddUser({addNewUser}){\r\n\r\n\r\n    const history = useHistory();\r\n\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [lastName, setLastName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");  \r\n    const [phone, setPhone] = useState(\"\");  \r\n    const [profilePic , setProfilePic] = useState(null);\r\n\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    useEffect(() => {     \r\n       \r\n      \r\n    }, []);\r\n\r\n   const onFileChange = (event) => {    \r\n     \r\n    setProfilePic(event.target.files);\r\n   };\r\n\r\n   const cancelClick = (event) => {\r\n     event.preventDefault();\r\n     history.goBack();\r\n     //console.log(history);\r\n   };\r\n\r\n   const validateForm = () => {\r\n\r\n    if(firstName === \"\" || lastName === \"\" || email === \"\"  || phone === \"\" )\r\n        return false;\r\n    return true;\r\n\r\n   }\r\n\r\n   const saveClick = (event) => {\r\n    event.preventDefault();     \r\n    if(!validateForm()){\r\n      setFormError(\"Please complete required fields before saving.\")\r\n      return;\r\n    }\r\n    \r\n    setFormError(\"\");\r\n   \r\n   \r\n    const formData = new FormData(); \r\n\r\n    if(profilePic){\r\n       \r\n          formData.append( \r\n            \"Attachment1\", \r\n            profilePic[0], \r\n            profilePic[0].name \r\n          );\r\n          }\r\n     formData.append(\"FirstName\", firstName); \r\n     formData.append(\"LastName\", lastName);\r\n     formData.append(\"Email\", email); \r\n     formData.append(\"Phone\", email); \r\n     addNewUser(formData);\r\n  }; \r\n\r\n \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Add new User\"} />\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 l10 offset-l1\">\r\n                <form>\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 l6\">\r\n                      <div className=\"input-field \">\r\n                        <input\r\n                         className=\"validate\"\r\n                          required\r\n                          type=\"text\"\r\n                          id=\"firstName\"\r\n                          value={firstName}\r\n                          onChange={(e) => setFirstName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s12 l6\">                    \r\n                        <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"lastName\"\r\n                            value={lastName}\r\n                            onChange={(e) => setLastName(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"lastName\">Last Name</label> \r\n                    </div>\r\n                                      \r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"email\">Email</label> \r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"phone\"\r\n                            value={phone}\r\n                            onChange={(e) => setPhone(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"phone\">Phone</label> \r\n                  </div>\r\n\r\n                  <div className=\"file-field input-field\">\r\n                    <div className=\"btn indigo darken-2\">\r\n                      <i className=\"material-icons \">attachment</i>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"attachment\"                        \r\n                        onChange={onFileChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                      <input\r\n                        className=\"file-path validate\"\r\n                        type=\"text\"\r\n                        placeholder=\"Upload profile picture\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-field\">\r\n                      <p className=\"red-text center\">{formError ? formError : \"\" }</p>\r\n                  </div>\r\n\r\n                  \r\n                  <div className=\"input-field \">\r\n                    <button\r\n                      className=\"btn green darken-2 left\"\r\n                      onClick={saveClick}\r\n                    >\r\n                      <span>Save</span>\r\n                      <i className=\"material-icons right\">save</i>\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn yellow darken-4 left\"\r\n                      onClick={cancelClick}\r\n                    >\r\n                      <span>Cancel</span>\r\n                      <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{\r\n        allAssignees : state.users.users,\r\n        user_Name :state.userLogin.user_Name, // Logged in User's name\r\n        userId :state.userLogin.userId,  // logged in User Id       \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {       \r\n        addNewUser : (formData) => dispatch(addNewUser(formData))\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUser);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\IncidentLisiting.js",["230","231"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\AddNew.js",["232"],"import {React , useRef, useEffect, useState} from 'react';\r\nimport PageActions from \"../PageActions\";\r\nimport M from 'materialize-css';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { allUsers } from '../../store/actions/usersActions';\r\nimport { addNewIncident } from '../../store/actions/incidentsActions';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n function AddNew({getAllAssignees, allAssignees, userId, addNewIncident, addNewError, AddNewIncidentStatus}) {\r\n\r\n    const dueDateTimeRef= useRef();\r\n    const dueDateDateRef= useRef();\r\n    const startTimeTimeRef = useRef();\r\n    const startTimeDateRef = useRef();\r\n    const assigneeRef = useRef();   \r\n   \r\n\r\n    const history = useHistory();\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [additionalDetails, setAdditionalDetails] = useState(\"\");  \r\n    const [files , setFiles] = useState(null);\r\n    const [assignee, setAssignee] = useState(null);  \r\n    const [assigneeName, setAssigneeName] = useState(\"\");  \r\n    const [assigneeList, setAssigneeList] = useState(allAssignees);\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n      console.log(\"Set hook\");\r\n      setAssigneeList(allAssignees);\r\n    }, [allAssignees])\r\n\r\n    useEffect(() => {      \r\n        M.Datepicker.init(startTimeDateRef.current);\r\n        M.Timepicker.init(startTimeTimeRef.current);\r\n        M.Datepicker.init(dueDateDateRef.current);\r\n        M.Timepicker.init(dueDateTimeRef.current);\r\n        var options = {\r\n          closeOnClick : false\r\n        }\r\n        M.Dropdown.init(assigneeRef.current, options);\r\n        getAllAssignees();\r\n    }, []);\r\n\r\n   const onFileChange = (event) => {    \r\n     if (event.target.files.length > 3) {\r\n       //alert(\"You can only attach upto 3 files. All extra files will be ignored.\");\r\n     }     \r\n     setFiles(event.target.files);\r\n   };\r\n\r\n   const cancelClick = (event) => {\r\n     event.preventDefault();\r\n     history.goBack();\r\n     //console.log(history);\r\n   };\r\n\r\n\r\n   const assigneeSelected = (event, userId) => {    \r\n    event.preventDefault();   \r\n    let currentAssignee = allAssignees.find(assignee => {\r\n        return assignee.Id === userId\r\n    })\r\n    console.log(currentAssignee);\r\n    var assigneeDropdown = M.Dropdown.getInstance(assigneeRef.current);\r\n    assigneeDropdown.close();\r\n    setAssignee(userId);\r\n    setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);\r\n   }\r\n\r\n   const searchAssignee = (event) => {    \r\n     let newList = [];\r\n     if(event.target.value !== \"\")\r\n        newList = allAssignees.filter(assignee => {    \r\n        return assignee.FirstName.toUpperCase().startsWith(event.target.value.toUpperCase()) \r\n            || assignee.LastName.toUpperCase().startsWith(event.target.value.toUpperCase());\r\n      });\r\n    \r\n     if(newList !== undefined && newList.length !== 0){ //check if there is atlease one assignee       \r\n      newList = [].concat(newList); \r\n     }\r\n     else{//if search found nothing, show all assignees\r\n        newList = allAssignees.slice(0,allAssignees.length);       \r\n     } \r\n     setAssigneeList(newList);   \r\n   }\r\n\r\n   const validateForm = () => {\r\n\r\n    if(title === \"\" || description ===\"\" || dueDateDateRef.current.value === \"\" || dueDateTimeRef.current.value === \"\"\r\n        || startTimeDateRef.current.value === \"\" || startTimeTimeRef.current.value === \"\"  )\r\n        return false;\r\n    return true;\r\n\r\n   }\r\n\r\n   const saveClick = (event) => {\r\n    event.preventDefault();     \r\n    if(!validateForm()){\r\n      setFormError(\"Please complete required fields before saving.\")\r\n      return;\r\n    }\r\n    \r\n    setFormError(\"\");\r\n\r\n    let startTime  = new Date( startTimeDateRef.current.value + \" \" + startTimeTimeRef.current.value);\r\n    startTime = (startTime.getMonth() + 1) + \"/\" + startTime.getDate() + \"/\" +  startTime.getFullYear() \r\n                + \" \" + startTime.getHours() + \":\" + startTime.getMinutes() + \":\" + startTime.getSeconds(); \r\n\r\n    let dueDate  = new Date( dueDateDateRef.current.value + \" \" + dueDateTimeRef.current.value);\r\n    dueDate = (dueDate.getMonth() + 1) + \"/\" + dueDate.getDate() + \"/\" +  dueDate.getFullYear() \r\n                + \" \" + dueDate.getHours() + \":\" + dueDate.getMinutes() + \":\" + dueDate.getSeconds(); \r\n   \r\n    const formData = new FormData(); \r\n\r\n    if(files){\r\n        for(let i = 0; i < files.length ; i++){\r\n          formData.append( \r\n            \"Attachment\" + i+1, \r\n            files[i], \r\n            files[i].name \r\n          );\r\n        }\r\n    }   \r\n     formData.append(\"CreatedBy\", userId); \r\n     formData.append(\"AssignedTo\", assignee);\r\n     formData.append(\"Title\", title); \r\n     formData.append(\"Description\", description); \r\n     formData.append(\"AdditionalDeta\", additionalDetails); \r\n     formData.append(\"StartTime\", startTime ); \r\n     formData.append(\"DueDate\",  dueDate ); \r\n     formData.append(\"Status\", \"N\"); \r\n\r\n     \r\n     //setTitle(\"\");\r\n\r\n     addNewIncident(formData);\r\n    // setTitle(\"\");\r\n     //setDescription(\"\");     \r\n\r\n  }; \r\n\r\n  if(AddNewIncidentStatus){\r\n    return <Redirect to='/incidentListing' /> \r\n  }\r\n \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Add new Incident\"} />\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 l10 offset-l1\">\r\n                <form>\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 l6\">\r\n                      <div className=\"input-field \">\r\n                        <input\r\n                        className=\"validate\"\r\n                          required\r\n                          type=\"text\"\r\n                          id=\"title\"\r\n                          value={title}\r\n                          onChange={(e) => setTitle(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"title\">Title</label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s12 l6\">                    \r\n                      <input\r\n                        readOnly                    \r\n                        required\r\n                        type=\"text\"\r\n                        className=\"dropdown-trigger validate\"\r\n                        id=\"assignee\"\r\n                        data-target=\"dropdown1\"\r\n                        placeholder=\"\"\r\n                        ref={assigneeRef}\r\n                        value={assigneeName}\r\n                      />                    \r\n                      \r\n                       <label htmlFor=\"assignee\">Assignee </label> \r\n                    </div>\r\n                      <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <li>\r\n                          <input type=\"text\"  placeholder=\"Search Assignee\" onChange={searchAssignee}     />\r\n                        </li>\r\n                        {!assigneeList? null : assigneeList.map((user) => {\r\n                          return (\r\n                            <li  key={user.Id} onClick= {(event)=>assigneeSelected(event,user.Id)}>\r\n                              <a className=\"indigo-text\" href=\"#!\">  {user.FirstName + \" \" + user.LastName}    </a>\r\n                            </li>\r\n                          );\r\n                        })}\r\n                      </ul>                   \r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                    <textarea\r\n                      required\r\n                      value={description}\r\n                      id=\"description\"\r\n                      className=\"materialize-textarea validate\"\r\n                      onChange={(e) => setDescription(e.target.value)}\r\n                    ></textarea>\r\n                    <label htmlFor=\"description\" className=\"\">\r\n                      Description\r\n                    </label>\r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                    <textarea\r\n                      value={additionalDetails}\r\n                      id=\"additionalDetails\"\r\n                      className=\"materialize-textarea\"\r\n                      onChange={(e) => setAdditionalDetails(e.target.value)}\r\n                    ></textarea>\r\n                    <label htmlFor=\"additionalDetails\" className=\"\">\r\n                      Additional Details\r\n                    </label>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"startTimeDate\"\r\n                        className=\"datepicker validate\"\r\n                        ref={startTimeDateRef}\r\n                      />\r\n                      <label htmlFor=\"startTimeDate\" className=\"\">\r\n                      Start Time (Pick Date)\r\n                      </label>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"startTimeTime\"\r\n                        className=\"timepicker validate\"\r\n                        ref={startTimeTimeRef}\r\n                      />\r\n                      <label htmlFor=\"startTimeime\" className=\"\">\r\n                       Start Time (Pick Time)\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"dueDateDate\"\r\n                        className=\"datepicker validate\"\r\n                        ref={dueDateDateRef}\r\n                      />\r\n                      <label htmlFor=\"dueDateDate\" className=\"\">\r\n                        Due Date (Pick Date)\r\n                      </label>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"dueDateTime\"\r\n                        className=\"timepicker validate\" \r\n                        ref={dueDateTimeRef}\r\n                      />\r\n                      <label htmlFor=\"dueDateTime\" className=\"\">\r\n                        Due Date (Pick Time)\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"file-field input-field\">\r\n                    <div className=\"btn indigo darken-2\">\r\n                      <i className=\"material-icons \">attachment</i>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"attachment\"\r\n                        multiple\r\n                        onChange={onFileChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                      <input\r\n                        className=\"file-path validate\"\r\n                        type=\"text\"\r\n                        placeholder=\"Upload upto 3 files\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-field\">\r\n                      <p className=\"red-text center\">{formError ? formError : \"\" }</p>\r\n                      <p className=\"red-text center\">{addNewError}</p>\r\n                      \r\n                  </div>\r\n\r\n                  \r\n                  <div className=\"input-field \">\r\n                    <button\r\n                      className=\"btn green darken-2 left\"\r\n                      onClick={saveClick}\r\n                    >\r\n                      <span>Save</span>\r\n                      <i className=\"material-icons right\">save</i>\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn yellow darken-4 left\"\r\n                      onClick={cancelClick}\r\n                    >\r\n                      <span>Cancel</span>\r\n                      <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{\r\n        allAssignees : state.users.users,\r\n        user_Name :state.userLogin.user_Name, // Logged in User's name\r\n        userId :state.userLogin.userId,  // logged in User Id      \r\n        addNewError :state.incidents.AddNewIncidentError, \r\n        AddNewIncidentStatus :state.incidents.AddNewIncidentStatus \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getAllAssignees: () => dispatch(allUsers()),\r\n        addNewIncident : (formData) => dispatch(addNewIncident(formData))\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNew);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\signalR\\Receiver.js",["233"],"import React, { useEffect} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {  JsonHubProtocol,   \r\n    HubConnectionBuilder,\r\n    LogLevel\r\n} from '@microsoft/signalr';\r\nimport { commentRecieved, getAllNotifications } from \"../store/actions/notificationsActions\";\r\nimport { updateHubId } from '../store/actions/userLoginActions';\r\nimport { baseUrl } from \"../api/apiURLs\";\r\n\r\n  function Receiver({commentRecieved, updateHubId, userId, refreshNotifications}) {\r\n\r\n    useEffect(() => {   \r\n        \r\n        const newConnection = new HubConnectionBuilder()\r\n        .withUrl(baseUrl +'hubs/notifications')\r\n        .withAutomaticReconnect()\r\n        .withHubProtocol(new JsonHubProtocol())\r\n        .configureLogging(LogLevel.Information)\r\n        .build();\r\n        console.log(\"newConnection\",newConnection);\r\n        newConnection.start()\r\n        .then(result => {\r\n            console.log('Connected!');\r\n            let hubId = newConnection.connectionId; \r\n            updateHubId(hubId, userId);\r\n            \r\n            newConnection.on('ReceiveMessage', (message) => {\r\n                console.log(message);\r\n                 commentRecieved(message);\r\n            });\r\n            newConnection.on('UpdateNotifications', (incidentId) => {\r\n              console.log(incidentId);\r\n              refreshNotifications(userId);\r\n          });\r\n\r\n          newConnection.on('UpdateConversation', (coversationId) => {\r\n            console.log(coversationId);\r\n           // refreshNotifications(coversationId);\r\n        });\r\n\r\n        })\r\n        .catch(e => console.log('Connection failed: ', e));\r\n     \r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <>  \r\n      \r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      allAssignees: state.users.users,\r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,  // logged in User Id       \r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        commentRecieved: (comment) => dispatch(commentRecieved(comment)),\r\n        updateHubId: (hubId, userId) => dispatch(updateHubId(hubId, userId)),\r\n        refreshNotifications : (userId) =>  dispatch(getAllNotifications(userId))\r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Receiver);\r\n  \r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDetails.js",["234","235","236","237","238","239"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport PageActions from \"../../PageActions\";\r\nimport M from \"materialize-css\";\r\nimport { connect } from \"react-redux\";\r\nimport { allUsers } from \"../../../store/actions/usersActions\";\r\nimport { getIncidentById, updateIncident, deleteAttachment } from \"../../../store/actions/incidentsActions\";\r\nimport Comments from \"./Comments\";\r\nimport  AssigneeDropdown  from \"../AssigneeDropdown\";\r\nimport \"../../../styles/incidentDetails.css\";\r\nimport moment from \"moment\";\r\nimport { incidentsUrls } from \"../../../api/apiURLs\";\r\nimport IncidentTitle from \"./IncidentTitle\";\r\nimport IncidentDescription from \"./IncidentDescription\";\r\n\r\nfunction IncidentDetails({\r\n  match,\r\n  incidentData,\r\n  getIncidentById,\r\n  allAssignees,\r\n  getAllAssignees,\r\n  userId,\r\n  updateIncident,\r\n  deleteAttachment,\r\n  IncidentDetailError\r\n  \r\n}) { \r\n\r\n  const [assignee, setAssignee] = useState(null);\r\n  const [status, setStatus] = useState('N');\r\n  const [dueDate, setDueDate] = useState('');\r\n  const [startTime, setStartTime] = useState('');\r\n  \r\n  const [assigneeName, setAssigneeName] = useState(\"\");  \r\n\r\n\r\n  const [editAdditionalDetails, setEditAdditionalDetails] = useState(false);\r\n  const [editDueDate, setEditDueDate] = useState(false);\r\n  const [editStartDate, setEditStartDate] = useState(false);\r\n  \r\n  const statusRef = useRef();\r\n  const dueDateTimeRef= useRef();\r\n  const dueDateDateRef= useRef();\r\n  const startTimeTimeRef = useRef();\r\n  const startTimeDateRef = useRef();\r\n\r\n  useEffect(() => {\r\n    setMaterializeCSS();\r\n  }, [incidentData]);\r\n\r\n  useEffect(() => {    \r\n    getIncidentById(match.params.id);   \r\n  }, [match.params.id]); // whenever Id changes get new\r\n\r\n  useEffect(() => {  // To update Fields\r\n    if(incidentData){   \r\n      let currentAssignee =  allAssignees.find((assignee) => {\r\n        return assignee.Id === incidentData.AssignedTo;\r\n      });\r\n      setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);  \r\n      setStatus(incidentData.Status);\r\n      setDueDate(incidentData.DueDate);\r\n      setStartTime(incidentData.StartTime);\r\n    }\r\n  }, [incidentData]);\r\n\r\n  const setMaterializeCSS = () => { \r\n    M.FormSelect.init(statusRef.current);\r\n    M.Datepicker.init(startTimeDateRef.current);\r\n    M.Timepicker.init(startTimeTimeRef.current);\r\n    M.Datepicker.init(dueDateDateRef.current);\r\n    M.Timepicker.init(dueDateTimeRef.current);\r\n  }\r\n\r\n  const getNameById = (id) => {   \r\n    let user = allAssignees.find((assignee) => {\r\n      return assignee.Id === id;\r\n    });   \r\n    if(!user){    \r\n      return id;\r\n    }\r\n    return user.FirstName + \" \" + user.LastName\r\n  }\r\n \r\n  const downloadFile = (file) => {\r\n    console.log(file);\r\n    window.open(\r\n          incidentsUrls.downloadFileUrl\r\n           + \"type=incident\"\r\n           + \"&commentId=\" + \"\" \r\n           + \"&incidentId=\" + incidentData.Id\r\n           + \"&filename=\" + file.FileName\r\n           + \"&contentType=\" + file.ContentType\r\n    ); \r\n  }\r\n  \r\n  const dueDateEditClick = () =>{\r\n    setEditDueDate(!editDueDate);\r\n    setMaterializeCSS();\r\n  }\r\n  const dueDateEditCancel = () =>{\r\n    setEditDueDate(false);\r\n  }\r\n\r\n  const dueDateEditSave = () =>{    \r\n    if ( dueDateDateRef.current.value === \"\" ||  dueDateTimeRef.current.value === \"\" ) {\r\n      alert(\"Please select date and time.\");\r\n      setEditDueDate(false);\r\n      return;\r\n    } \r\n\r\n    let dueDateTemp  = new Date( dueDateDateRef.current.value + \" \" + dueDateTimeRef.current.value);\r\n    dueDateTemp = (dueDateTemp.getMonth() + 1) + \"/\" + dueDateTemp.getDate() + \"/\" +  dueDateTemp.getFullYear() \r\n                + \" \" + dueDateTemp.getHours() + \":\" + dueDateTemp.getMinutes() + \":\" + dueDateTemp.getSeconds(); \r\n      updateIncidentByField(\"DueDate\" , dueDateTemp);     \r\n      setEditDueDate(false);\r\n      setDueDate(dueDateTemp);\r\n   }\r\n\r\n  const startDateEditClick = () =>{\r\n    setEditStartDate(!editStartDate);\r\n    setMaterializeCSS();\r\n  }\r\n  const startDateEditCancel = () =>{\r\n    setEditStartDate(false);\r\n  }\r\n\r\n  const startDateEditSave = () =>{\r\n  \r\n   if ( startTimeDateRef.current.value === \"\" ||  startTimeTimeRef.current.value === \"\" ) {\r\n    alert(\"Please select date and time.\");\r\n    setEditStartDate(false);\r\n    return;\r\n  } \r\n\r\n  let startTimeTemp  = new Date( startTimeDateRef.current.value + \" \" + startTimeTimeRef.current.value);\r\n  startTimeTemp = (startTimeTemp.getMonth() + 1) + \"/\" + startTimeTemp.getDate() + \"/\" +  startTimeTemp.getFullYear() \r\n                + \" \" + startTimeTemp.getHours() + \":\" + startTimeTemp.getMinutes() + \":\" + startTimeTemp.getSeconds();  \r\n    updateIncidentByField(\"StartTime\" , startTimeTemp);   \r\n    setEditStartDate(false); \r\n    setStartTime(startTimeTemp);  \r\n  }\r\n\r\n  const updateIncidentByField = (field , value) => {    \r\n    let parameters = {\r\n      IncidentId : incidentData.Id,\r\n      Parameter : field,\r\n      Value : value,\r\n      UserId : userId\r\n    };\r\n    updateIncident(parameters); // Calling action here\r\n  }\r\n\r\n  const statusChanged = (e) => {\r\n    setStatus(e.target.value);\r\n    updateIncidentByField(\"Status\" , e.target.value);\r\n  }\r\n\r\n  const deleteIncidentAttachment = (file) => {        \r\n    if(window.confirm(\"Are you sure you want to delete this attachment.\" + file.FileName)){\r\n      deleteAttachment(\"incicent\" , userId, incidentData.Id , file);\r\n    }      \r\n   }\r\n\r\n   if(IncidentDetailError !== \"\"){\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"center red-text\">Error</h1>\r\n        <h5 className=\"center\">{IncidentDetailError}</h5>\r\n        <p className=\"center\">Please check your network and try loging back.</p>\r\n      </div>\r\n    )\r\n   }\r\n\r\n  if (!incidentData || !allAssignees) {    \r\n    return  ( \r\n     \r\n              <div class=\"preloader-wrapper container big active page-loader\">\r\n                <div class=\"spinner-layer spinner-blue-only\">\r\n                  <div class=\"circle-clipper left\">\r\n                    <div class=\"circle\"></div>\r\n                  </div><div class=\"gap-patch\">\r\n                    <div class=\"circle\"></div>\r\n                  </div><div class=\"circle-clipper right\">\r\n                    <div class=\"circle\"></div>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n          );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <link rel=\"stylesheet\" href=\"./Styles/incidentDetails.css\"></link>\r\n      <PageActions Title={\"Incident Details\"} />\r\n      <section>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col s12 l12 \">\r\n            <IncidentTitle getNameById={getNameById} />\r\n             <div className=\"row\">\r\n                <div className=\"col s12 l6\">\r\n              <IncidentDescription type=\"description\" />\r\n              <IncidentDescription type=\"additionaldata\" />\r\n                  \r\n                  <p className=\"heading left-align indigo-text darken-4\">\r\n                    {\" \"}\r\n                    {/*  Attachments */}\r\n                    <i className=\"material-icons inline-icon\">attachment</i>\r\n                    Attachments:\r\n                  </p>\r\n\r\n                  <div className=\"input-field\">\r\n                    <ul className=\"input-field incidentFiles\">\r\n                      {!incidentData.Attachments\r\n                        ? null\r\n                        : incidentData.Attachments.map((file) => {\r\n                            return (\r\n                              <li\r\n                                key={file.Id}\r\n                                className=\"center indigo-text darken-4\"\r\n                              >\r\n                                <i\r\n                                  title=\"Remove\"\r\n                                  className=\"actions-icon material-icons red-text inline-icon\"\r\n                                  onClick={() => deleteIncidentAttachment(file)}\r\n                                >\r\n                                  cancel\r\n                                </i>\r\n                                <span\r\n                                  title={file.FileName}\r\n                                  onClick={() => downloadFile(file)}\r\n                                >\r\n                                  {file.FileName.length > 35\r\n                                    ? file.FileName.slice(0, 35) + \"...\"\r\n                                    : file.FileName}\r\n                                </span>\r\n                              </li>\r\n                            );\r\n                          })}\r\n                    </ul>\r\n                  </div>\r\n\r\n                  <Comments\r\n                    userId={userId}\r\n                    incidentId={incidentData.Id}\r\n                    comments={incidentData.Comments}\r\n                    getNameById={getNameById}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col s12 l5 offset-l1  ID-dropdowns\">\r\n                  <table>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Assignee\r\n                          </p>\r\n                        </td>\r\n                        <td>                         \r\n                          <AssigneeDropdown\r\n                            updateIncidentByField={updateIncidentByField}\r\n                            setAssignee={setAssignee}\r\n                            assigneeName = {assigneeName}\r\n                            setAssigneeName = {setAssigneeName}\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Status{\" \"}\r\n                          </p>\r\n                        </td>\r\n                        <td>\r\n                          <select\r\n                            ref={statusRef}\r\n                            value={status}\r\n                            onChange={statusChanged}\r\n                          >\r\n                            <option value=\"N\" disabled selected>\r\n                              New\r\n                            </option>\r\n                            <option value=\"I\">In Progress</option>\r\n                            <option value=\"C\">Closed</option>\r\n                            <option value=\"A\">Approved</option>\r\n                          </select>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Due Date\r\n                            <i\r\n                              className=\"actions-icon inline-icon material-icons\"\r\n                              onClick={dueDateEditClick}\r\n                            >\r\n                              edit\r\n                            </i>\r\n                          </p>\r\n                        </td>\r\n                        <td>\r\n                          {!editDueDate ? (\r\n                            <p\r\n                              title={moment(dueDate).format(\r\n                                \"MMMM DD YYYY, h:mm a\"\r\n                              )}\r\n                            >\r\n                              {moment(dueDate).fromNow()}\r\n                            </p>\r\n                          ) : null}\r\n                          <div className={editDueDate ? \"\" : \"hide\"}>\r\n                            <div className=\"input-field \">\r\n                              <input\r\n                                type=\"text\"\r\n                                id=\"dueDateDate\"\r\n                                className=\"datepicker\"\r\n                                ref={dueDateDateRef}\r\n                              />\r\n                              <label for=\"dueDateDate\" className=\"\">\r\n                                Pick Date\r\n                              </label>\r\n                            </div>\r\n                            <div className=\"input-field \">\r\n                              <input\r\n                                type=\"text\"\r\n                                id=\"dueDateTime\"\r\n                                className=\"timepicker\"\r\n                                ref={dueDateTimeRef}\r\n                              />\r\n                              <label for=\"dueDateTime\" className=\"\">\r\n                                Pick Time\r\n                              </label>\r\n                            </div>\r\n                            <button\r\n                              title=\"Save\"\r\n                              className=\"btn green darken-2 right updateBtn\"\r\n                              onClick={dueDateEditSave}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                check\r\n                              </i>\r\n                            </button>\r\n                            <button\r\n                              title=\"Cancel\"\r\n                              className=\"btn yellow darken-2 right updateBtn\"\r\n                              onClick={dueDateEditCancel}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                cancel\r\n                              </i>\r\n                            </button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Start Time\r\n                            <i\r\n                              className=\"actions-icon inline-icon material-icons\"\r\n                              onClick={startDateEditClick}\r\n                            >\r\n                              edit\r\n                            </i>\r\n                          </p>\r\n                        </td>\r\n                        <td>\r\n                          {!editStartDate ? (\r\n                            <p\r\n                              title={moment(startTime).format(\r\n                                \"MMMM DD YYYY, h:mm a\"\r\n                              )}\r\n                            >\r\n                              {moment(startTime).fromNow()}\r\n                            </p>\r\n                          ) : null}\r\n                          <div className={editStartDate ? \"\" : \"hide\"}>\r\n                            <div className=\"input-field\">\r\n                              <input\r\n                                type=\"text\"\r\n                                id=\"startTimeDate\"\r\n                                className=\"datepicker\"\r\n                                ref={startTimeDateRef}\r\n                              />\r\n                              <label for=\"startTimeDate\" className=\"\">\r\n                                Pick Date\r\n                              </label>\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                              <input\r\n                                readOnly\r\n                                type=\"text\"\r\n                                id=\"startTimeTime\"\r\n                                className=\"timepicker\"\r\n                                ref={startTimeTimeRef}\r\n                              />\r\n                              <label for=\"startTimeime\" className=\"\">\r\n                                Pick Time\r\n                              </label>\r\n                            </div>\r\n                            <button\r\n                              title=\"Save\"\r\n                              className=\"btn green darken-2 right updateBtn\"\r\n                              onClick={startDateEditSave}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                check\r\n                              </i>\r\n                            </button>\r\n                            <button\r\n                              title=\"Cancel\"\r\n                              className=\"btn yellow darken-2 right updateBtn\"\r\n                              onClick={startDateEditCancel}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                cancel\r\n                              </i>\r\n                            </button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id  \r\n    IncidentDetailError : state.incidents.IncidentDetailError     // if api ERROR\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllAssignees: () => dispatch(allUsers()),\r\n    getIncidentById: (incidentId) => dispatch(getIncidentById(incidentId)), \r\n    updateIncident: (parameters) => dispatch(updateIncident(parameters)),   \r\n    deleteAttachment : (type, userid, incidentId , file) => dispatch(deleteAttachment(type, userid, incidentId ,file))    \r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IncidentDetails);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\Dashboard.js",["240"],"import React from 'react'\r\nimport PageActions from '../../PageActions';\r\nimport KPIBar from './KPIBar';\r\nimport OverallWidget from './OverallWidget'\r\nimport LastFive from './LastFive';\r\nimport  '../../../styles/dashboard.css'\r\nimport MostAssignedByUser from './MostAssignedByUser';\r\nimport DayByDayCount from './DayByDayCount';\r\nimport FiveOldestOpenIncidents from './OldestOpen';\r\n\r\n function Dashboard() {\r\n \r\n\r\n    return (\r\n      <div>\r\n        <PageActions Title={\"Dashboard\"} />\r\n        \r\n        <div className=\"container\">     \r\n          <KPIBar />\r\n          <div className=\"row\">\r\n            <OverallWidget />\r\n            <LastFive />\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n           <MostAssignedByUser />\r\n           <FiveOldestOpenIncidents />\r\n           {/* <DayByDayCount /> */}\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\userLoginReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\usersReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\incidentsReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\notificationsReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\dashboardReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\messagesReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Messages.js",["241","242","243","244","245","246","247"],"import { React, useState, useEffect, useRef} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { messagesByUser, conversationsByUser, messagesByConversations } from \"../../store/actions/messagesActions\";\r\nimport '../../styles/messages.css';\r\nimport ComposeMessage from './ComposeMessage';\r\nimport Reply from './Reply';\r\nimport Message from './Message'\r\nimport Conversation from './Conversation'\r\n\r\nfunction Messages({\r\n    userId,\r\n\r\n    allUsers,\r\n    UserMessages,\r\n    getMessagesByUser,\r\n    conversationsByUser,\r\n    messagesByConversations,\r\n    Conversations,\r\n    MessagesByConversations,\r\n}) {\r\n\r\n    const [userToggle, setUserToggle] = useState(false);\r\n    const messagesRef = useRef();   \r\n    const [usersInfo, setUsersInfo] = useState([]);\r\n    const [selectedConversation, setSelectedConversation] = useState('');\r\n    const [conversationTitle, setConversationTitle] = useState('');\r\n\r\n    useEffect(() => {\r\n        conversationsByUser(userId);     \r\n          \r\n    }, []);\r\n\r\n    useEffect(() => {        \r\n        if(selectedConversation == \"\" && Conversations != null && Conversations.length > 0){\r\n            messagesByConversations(Conversations[0].Id);\r\n            setSelectedConversation(Conversations[0].Id);\r\n        }         \r\n\r\n    }, [Conversations])\r\n\r\n    \r\n    useEffect(() => {        \r\n       console.log(\"UserMessages\", UserMessages[0].To);\r\n        if(UserMessages != null && UserMessages.length > 0){\r\n            let user = UserMessages[0].From == userId? getUserNameById(UserMessages[0].To) : getUserNameById(UserMessages[0].From);\r\n           setConversationTitle(user);\r\n        }       \r\n        try{\r\n            messagesRef.current.scrollTop = messagesRef.current.scrollHeight;     \r\n        }  catch(e){}\r\n     \r\n    }, [UserMessages])\r\n\r\n    const getUserNameById = (id) => {   \r\n        let user = allUsers.find((assignee) => {\r\n          return assignee.Id === id;\r\n        });   \r\n        if(!user){    \r\n          return id;\r\n        }\r\n        return user.FirstName + \" \" + user.LastName\r\n      }\r\n      \r\n\r\n      const conversationClicked = (id) => {\r\n        setSelectedConversation(id);\r\n        messagesByConversations(id);\r\n        if(userToggle)\r\n            setUserToggle(false);\r\n      }\r\n\r\n   \r\n    \r\n        \r\n    return (\r\n        <section>\r\n            <div className=\"container messages-window\">     \r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col s2 m3 hide-on-large-only\">\r\n                        <div className=\"user-toogle\" onClick={()=>setUserToggle(!userToggle)}>\r\n                            <span>Users</span>\r\n                            <i className=\"material-icons center\">send</i>\r\n                        </div> \r\n                    </div>\r\n                    {userToggle? (\r\n                         <div className=\"col s10 m9 l3 users hide-on-large-only\">\r\n                              <div className=\"compose-message\">\r\n                                     <i className=\"material-icons indigo-text\">message</i>\r\n                                    <span className='indigo-text'> Compose Message </span>\r\n                                </div>  \r\n                         <ul>                         \r\n                                {Conversations.map(c => <Conversation conversation={c} allUsers={allUsers} userId={userId} getUserNameById={getUserNameById} conversationClicked={conversationClicked} selectedConversation={selectedConversation} />)}\r\n\r\n                         </ul>\r\n                     </div>\r\n                    ) : <></>}\r\n                   \r\n\r\n                    <div className=\"col s10 m9 l3 users hide-on-med-and-down\">                        \r\n                        <div className=\"compose-message\">\r\n                            <i className=\"material-icons indigo-text\">message</i>\r\n                            <span className='indigo-text'> Compose Message </span>\r\n                        </div>   \r\n                        <ul>\r\n                            {(Conversations != null && Conversations.length > 0)? \r\n                                Conversations.map(c => <Conversation conversation={c} allUsers={allUsers} userId={userId} getUserNameById={getUserNameById} conversationClicked={conversationClicked} selectedConversation={selectedConversation} />)\r\n                                :\r\n                                <></>\r\n                            }\r\n\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"col s10 m9 l9 hide \">\r\n                        <ComposeMessage />\r\n                    </div>\r\n                    {!userToggle? (\r\n                    <div className=\"col s10 m9 l9 \">\r\n                        <h5 className=\"left indigo-text darken-4\"> {conversationTitle} </h5>\r\n                        <div className=\"messages\" ref={messagesRef}>\r\n                        <ul className=''>\r\n                            {\r\n                                UserMessages.map(m => (\r\n                                    <Message message={m} userId={userId}/>\r\n                                ))\r\n                            }\r\n                            \r\n                            \r\n                        </ul>\r\n                        </div>\r\n                        <Reply  />\r\n                    </div>\r\n\r\n                    ) : <></> }\r\n\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n        allUsers: state.users.users,\r\n        UserMessages : state.messages.Messages,\r\n        Conversations :  state.messages.Conversations,\r\n        MessagesByConversations: state.messages.MessagesByConversations,\r\n    }\r\n  }\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getMessagesByUser: (userId) => dispatch(messagesByUser(userId)),   \r\n        conversationsByUser: (userId) => dispatch(conversationsByUser(userId)),   \r\n        messagesByConversations: (conversationId) => dispatch(messagesByConversations(conversationId))    \r\n    }\r\n  }\r\n \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Messages);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\User.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Pages.js",["248","249","250","251","252","253"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\PageActions.js",["254","255","256"],"import React from 'react'\r\n\r\nexport default function PageActions(props) {\r\n    return (\r\n      <section className=\"container\">\r\n        <div className=\"row \">\r\n          <div className=\"col s12 l5\">\r\n            <div className=\"left\">\r\n              <h4 className=\"page-title\">{props.Title}</h4>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"col s7 l9 hide\">\r\n            <div className=\"right\">\r\n              <ul className=\"actionsBtns\">\r\n                <li>\r\n                  <a className=\"btn-floating green\">\r\n                    <i className=\"material-icons\">refresh</i>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"btn-floating red\">\r\n                    <i className=\"material-icons\">print</i>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"btn-floating blue\">\r\n                    <i className=\"material-icons\">file_download</i>\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n}\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\Incident.js",["257"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Notifications.js",["258"],"import {React, useRef, useEffect, useState} from 'react'\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport M from 'materialize-css';\r\nimport  '../styles/notifications.css'\r\nimport {getAllNotifications, setNotificationStatus} from '../store/actions/notificationsActions';\r\nimport { removeIncidentData, getIncidentById } from \"../store/actions/incidentsActions\";\r\n\r\n\r\n function Notifications({\r\n   getNotifications,\r\n   userId,\r\n   notifications,\r\n   setNotificationStatus,\r\n   removeIncidentData,\r\n   getIncidentById\r\n }) {\r\n   const ddlNotiRef = useRef();\r\n   const history = useHistory();\r\n\r\n   const [unReadCount, setUnReadCount] = useState(\r\n     notifications.filter((notification) => !notification.IsRead).length\r\n   );\r\n\r\n   useEffect(() => {\r\n     var options = {\r\n       closeOnClick: false,\r\n     };\r\n     M.Dropdown.init(ddlNotiRef.current, options);\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n     getNotifications(userId);\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n     setUnReadCount(\r\n       notifications.filter((notification) => !notification.IsRead).length\r\n     );\r\n   }, [notifications]);\r\n\r\n   const setStatus = (id, status) => {\r\n     setNotificationStatus(id, status);\r\n   };\r\n\r\n   const openIncident = (notification) => {\r\n     setStatus(notification.Id, true);\r\n\r\n     let path = \"/Incident/\" + notification.IncidentId;\r\n     if (history.location.pathname !== path) {\r\n       // only change path if it is different      \r\n       removeIncidentData(); // So that user does not see old data that is stored in redux (and local storage)\r\n     }\r\n     else{\r\n      M.Dropdown.getInstance(ddlNotiRef.current).close();\r\n      getIncidentById(notification.IncidentId); //if already on the same incident, just get new data and update page\r\n     }\r\n     history.push(path);\r\n   };\r\n\r\n   return (\r\n     <>\r\n       <li>\r\n         <a\r\n           ref={ddlNotiRef}\r\n           href=\"#dropdown1\"\r\n           className=\"btn-floating z-depth-0 indigo darken-4 dropdown-trigger badge-a\"\r\n           data-target=\"dropdownNotifications\"\r\n         >\r\n           <i className=\"material-icons\">notifications</i>\r\n         </a>\r\n         <ul\r\n           id=\"dropdownNotifications\"\r\n           className=\"notifications dropdown-content\"\r\n         >\r\n           {notifications == null || notifications.length < 1 ? (\r\n             <li>\r\n               <div className=\"notification-box\">\r\n                 <p className=\"\">No new notificaitons.</p>\r\n               </div>\r\n             </li>\r\n           ) : (\r\n             notifications.map((notification) => {\r\n               let classes = notification.IsRead\r\n                 ? \"notification-box read\"\r\n                 : \"notification-box unread\";\r\n               return (\r\n                 <li key={notification.Id}>\r\n                   <div className={classes}>\r\n                     <div className=\"row\">\r\n                       <div className=\"col s2\">\r\n                         {notification.IsRead ? (\r\n                           <i\r\n                             className=\"material-icons white-text readIcon\"\r\n                             title=\"Mark Unread\"\r\n                             onClick={() => setStatus(notification.Id, false)}\r\n                           >\r\n                             radio_button_unchecked\r\n                           </i>\r\n                         ) : (\r\n                           <i\r\n                             className=\"material-icons white-text readIcon\"\r\n                             title=\"Mark Read\"\r\n                             onClick={() => setStatus(notification.Id, true)}\r\n                           >\r\n                             radio_button_checked\r\n                           </i>\r\n                         )}\r\n                       </div>\r\n                       <div className=\"col s10 right\">\r\n                         <p onClick={() => openIncident(notification)}>\r\n                           {\" \"}\r\n                           {notification.NotifyAbout}\r\n                         </p>\r\n                       </div>\r\n                     </div>\r\n                   </div>\r\n                 </li>\r\n               );\r\n             })\r\n           )}\r\n         </ul>\r\n       </li>\r\n       <li>\r\n         {unReadCount > 0 ? (\r\n           <span className=\"badge notification-badge white-text new pink\">{unReadCount}</span>\r\n         ) : null}\r\n       </li>\r\n     </>\r\n   );\r\n }\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{      \r\n        notifications :state.notifications.notifications,\r\n        userId :state.userLogin.userId  // logged in User Id   \r\n    }\r\n  }  \r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      getNotifications: (userid) => dispatch(getAllNotifications(userid)),\r\n      setNotificationStatus : (id, isRead) => dispatch(setNotificationStatus(id, isRead)),\r\n      removeIncidentData : () => dispatch(removeIncidentData()),\r\n      getIncidentById: (incidentId) => dispatch(getIncidentById(incidentId)), \r\n    };\r\n};\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Notifications);\r\n  ","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\AssigneeDropdown.js",["259","260"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport {  updateIncident, deleteAttachment } from \"../../store/actions/incidentsActions\";\r\nimport M from \"materialize-css\";\r\nimport { connect } from \"react-redux\";\r\nimport { allUsers } from \"../../store/actions/usersActions\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction AssigneeDropdown({getAllAssignees, allAssignees, updateIncidentByField, setAssignee ,assigneeName, setAssigneeName }) {\r\n\r\n    const [assigneeList, setAssigneeList] = useState(allAssignees);\r\n    const [assgineeSearchText, setAssgineeSearchText] = useState(\"\");\r\n    const assigneeRef = useRef();\r\n\r\n    const dropDownId = \"dropdownAssginee\" + uuidv4();\r\n\r\n    useEffect(() => {       \r\n        getAllAssignees();\r\n      }, []); // get assignee on first render only\r\n    \r\n    useEffect(() => {\r\n        setAssigneeList(allAssignees);\r\n      }, [allAssignees]);\r\n\r\n      useEffect(() => {\r\n        setMaterializeCSS();\r\n      }, [allAssignees]);\r\n\r\n      \r\n  const setMaterializeCSS = () => {\r\n    var options = {\r\n      closeOnClick: false,\r\n    };\r\n    M.Dropdown.init(assigneeRef.current, options);   \r\n  }\r\n\r\n  const assigneeSelected = (event, userId) => {\r\n    event.preventDefault();\r\n    let currentAssignee = allAssignees.find((assignee) => {\r\n      return assignee.Id === userId;\r\n    });\r\n\r\n    setAssignee(userId);\r\n    setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);\r\n    if(updateIncidentByField)\r\n         updateIncidentByField(\"AssignedTo\" , userId); \r\n\r\n    var assigneeDropdown = M.Dropdown.getInstance(assigneeRef.current);\r\n    assigneeDropdown.close();\r\n  };\r\n\r\n  const searchAssignee = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"searching....\");\r\n    setAssgineeSearchText(event.target.value);\r\n    console.log(\"assgineeSearchText\", assgineeSearchText);\r\n    let newList = [];\r\n    if (event.target.value !== \"\")\r\n      newList = allAssignees.filter((assignee) => {\r\n        return (\r\n          assignee.FirstName.toUpperCase().startsWith(\r\n            event.target.value.toUpperCase()\r\n          ) ||\r\n          assignee.LastName.toUpperCase().startsWith(\r\n            event.target.value.toUpperCase()\r\n          )\r\n        );\r\n      });\r\n\r\n    if (newList !== undefined && newList.length !== 0) {\r\n      //check if there is atlease one assignee\r\n      newList = [].concat(newList);\r\n    } else {\r\n      //if search found nothing, show all assignees\r\n      newList = allAssignees.slice(0, allAssignees.length);\r\n    }\r\n    setAssigneeList(newList);\r\n  };\r\n\r\n\r\n  if (allAssignees && !assigneeList) {\r\n    setAssigneeList(allAssignees);\r\n  }\r\n\r\n\r\n    return (\r\n        <>\r\n             <input\r\n                            readOnly\r\n                            required\r\n                            type=\"text\"\r\n                            className=\"dropdown-trigger  align-right\"\r\n                            id=\"assignee\"\r\n                            data-target={dropDownId}\r\n                            placeholder=\"Select User\"\r\n                            ref={assigneeRef}\r\n                            value={assigneeName}\r\n                            defaultValue=\"Select User\"\r\n                          />\r\n\r\n                          <ul id={dropDownId} className=\"dropdown-content\">\r\n                            <li className=\"search-assignee-box\">\r\n                              <input\r\n                              // onClick={()=> alert(\"clicker\")}\r\n                            //   onKeyDown={(e)=> console.log(e.target.value)}\r\n                               // value={assgineeSearchText}\r\n                                type=\"text\"\r\n                                placeholder=\"Search Assignee\"\r\n                                onChange={searchAssignee}\r\n                              />\r\n                            </li>\r\n                            {!assigneeList\r\n                              ? null\r\n                              : assigneeList.map((user) => {\r\n                                  return (\r\n                                    <li\r\n                                      key={user.Id}\r\n                                      onClick={(event) => assigneeSelected(event,user.Id)}\r\n                                    >\r\n                                      <a className=\"indigo-text\" href=\"#!\">\r\n                                        {user.FirstName + \" \" + user.LastName}\r\n                                      </a>\r\n                                    </li>\r\n                                  );\r\n                                })}\r\n                          </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      allAssignees: state.users.users,\r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      IncidentDetailError : state.incidents.IncidentDetailError     // if api ERROR\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      getAllAssignees: () => dispatch(allUsers()),    \r\n      updateIncident: (parameters) => dispatch(updateIncident(parameters)),   \r\n        \r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(AssigneeDropdown);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comments.js",["261","262","263"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport moment from \"moment\";\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport Comment from \"./Comment\";\r\nimport { connect } from \"react-redux\";\r\nimport {  addNewComment } from \"../../../store/actions/incidentsActions\";\r\n\r\nfunction Comments({\r\n  incidentId,\r\n  comments,\r\n  userId,\r\n  getNameById,\r\n  addNewComment\r\n}) {\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [newCommentFiles, setNewCommentFiles] = useState(null);\r\n\r\n  const newCommentFilesRef = useRef();\r\n  const history = useHistory();\r\n  //console.log(history);\r\n  const onFileChange = (event) => {\r\n    setNewCommentFiles(event.target.files);\r\n  };\r\n\r\n  const saveComment = () => {\r\n    if (newComment.trim() === \"\") {\r\n      alert(\"Please add comment first.\");\r\n      return;\r\n    }\r\n    const formData = new FormData();\r\n\r\n    if (newCommentFiles) {\r\n      for (let i = 0; i < newCommentFiles.length; i++) {\r\n        formData.append(\r\n          \"Attachment\" + i + 1,\r\n          newCommentFiles[i],\r\n          newCommentFiles[i].name\r\n        );\r\n      }\r\n    }\r\n    formData.append(\"CommentText\", newComment.trim());\r\n    formData.append(\"IncidentId\", incidentId);\r\n    formData.append(\"UserId\", userId);\r\n    addNewComment(formData);\r\n\r\n    setNewComment(\"\");\r\n    setNewCommentFiles(null);\r\n    newCommentFilesRef.current.value = \"\";\r\n    //history.push(history.location.pathname);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5 className=\"heading left-align\">Comments</h5>\r\n      <p className=\"all-comments-box\">\r\n        {!comments ? (\r\n          <h1>No Comments</h1>\r\n        ) : (\r\n          comments.map((comment) => {\r\n            return (\r\n              <Comment\r\n                key={comment.Id}\r\n                comment={comment}\r\n                getNameById={getNameById}\r\n                incidentId={incidentId}\r\n                userId={userId}               \r\n              />\r\n            );\r\n          })\r\n        )}{\" \"}\r\n        {/* end of comments loop */}\r\n      </p>\r\n\r\n      <h6 className=\"heading indigo-text darken-4 left-align\">Add Comment</h6>\r\n      <div className=\"input-field\">\r\n        <textarea\r\n          id=\"comment\"\r\n          className=\"materialize-textarea\"\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n        ></textarea>\r\n        <label for=\"comment\" className=\"\">\r\n          Comment\r\n        </label>\r\n      </div>\r\n      <div className=\"file-field input-field\">\r\n        <div className=\"btn indigo darken-2\">\r\n          <i className=\"material-icons \">attachment</i>\r\n          <input type=\"file\" id=\"attachment\" multiple onChange={onFileChange} />\r\n        </div>\r\n        <div className=\"file-path-wrapper\">\r\n          <input\r\n            className=\"file-path validate\"\r\n            ref={newCommentFilesRef}\r\n            type=\"text\"\r\n            placeholder=\"Upload upto 3 files\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"input-field center \">\r\n        <button\r\n          className=\"left btn green darken-2 updateBtn\"\r\n          onClick={saveComment}\r\n        >\r\n          <span>Add</span>\r\n          <i className=\"material-icons right\">save</i>\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id       \r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {    \r\n    addNewComment: (formData) => dispatch(addNewComment(formData))    \r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comments);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OldestOpen.js",["264","265","266"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\DayByDayCount.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OverallWidget.js",["267"],"import React ,{useEffect, useState} from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport {GetOverallWidget} from '../../../store/actions/dashboardActions';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction OverallWidget({overallWidgetData, getOverallWidgetData}) {\r\n    const [chartOptions, setChartOptions] = useState({});\r\n\r\n    useEffect(() => {\r\n        getOverallWidgetData();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(\"overallWidgetData\", overallWidgetData);\r\n        const options = {\r\n            chart: {\r\n                type: 'pie',\r\n                height: (70) + '%',\r\n            },\r\n            title: {\r\n                text: ''\r\n            },\r\n            credits:\r\n            {\r\n                enabled: false\r\n            },\r\n            tooltip: {\r\n                pointFormat: '{series.name}: <b>{point.y} ({point.percentage:.1f}%)</b>'\r\n            },\r\n            plotOptions: {\r\n                pie: {\r\n                    allowPointSelect: true,\r\n                    cursor: 'pointer',\r\n                    dataLabels: {\r\n                        enabled: false\r\n                    },\r\n                    showInLegend: true\r\n                }\r\n            },\r\n            series: [{\r\n                name: 'Share',\r\n                data: [\r\n                    //{ name: 'New', y: overallWidgetData.New, color: '#F57C00' },\r\n                    { name: 'New', y: overallWidgetData.New,   color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(245,124,0,1)'],\r\n                            [1, 'rgba(255,226,0,1)']\r\n                        ]\r\n                    } },\r\n                    //{ name: 'In Progress', y: overallWidgetData.InProgress, color: '#1976D2' },\r\n                    { name: 'In Progress', y: overallWidgetData.InProgress, color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(25,118,210,1)'],\r\n                            [1, 'rgba(0,237,255,1)']\r\n                        ]\r\n                    } },\r\n                    { name: 'Closed', y: overallWidgetData.Closed,  color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(67,160,71,1)'],\r\n                            [1, 'rgba(0,255,187,1)']\r\n                        ]\r\n                    } },\r\n                   // { name: 'Closed', y: overallWidgetData.Closed, color: '#43A047' },\r\n                    { name: 'Approved', y: overallWidgetData.Approved,  color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(27,94,32,1)'],\r\n                            [1, 'rgba(19,255,0,1)']\r\n                        ]\r\n                    } },\r\n                    { name: 'Late', y: overallWidgetData.Late,  color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(183,28,28,1)'],\r\n                            [1, 'rgba(255,140,0,1)']\r\n                        ]\r\n                    } }\r\n\r\n                    //{ name: 'Approved', y: overallWidgetData.Approved, color: '#1B5E20' },\r\n                    //{ name: 'Late', y: overallWidgetData.Late, color: '#B71C1C' }\r\n                ]\r\n            }]\r\n        }\r\n\r\n        setChartOptions(options);\r\n    }, [overallWidgetData])\r\n\r\n\r\n    return (\r\n        <div className=\"col s12 m12 l6 widget\">\r\n            <h5> Overall</h5>\r\n            <HighchartsReact highcharts={Highcharts} options={chartOptions} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{   \r\n        userId :state.userLogin.userId,  // logged in User Id  \r\n        overallWidgetData: state.dashboard.OverallWidgetData\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getOverallWidgetData: () => dispatch(GetOverallWidget()),     \r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(OverallWidget);\r\n\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\LastFive.js",["268","269","270"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\MostAssignedByUser.js",["271","272"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\KPIBar.js",["273","274"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDescription.js",["275"],"import { React, useEffect, useState, useRef } from \"react\";\r\n\r\nimport { updateIncident } from \"../../../store/actions/incidentsActions\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nfunction IncidentDescription({type, incidentData, updateIncident, userId}) {\r\n\r\n    const [description, setDescription] = useState(\"\");\r\n    const [editDescription, setEditDescription] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setDescription(type === \"description\"? incidentData.Description : incidentData.AdditionalData);       \r\n       }, [incidentData, type])\r\n\r\n    const updateIncidentByField = (field , value) => {    \r\n        let parameters = {\r\n          IncidentId : incidentData.Id,\r\n          Parameter : field,\r\n          Value : value,\r\n          UserId : userId\r\n        };\r\n        updateIncident(parameters); // Calling action here\r\n      }\r\n\r\n    const descriptionEditClick = () =>{\r\n        setEditDescription(!editDescription);\r\n        setDescription(type === \"description\"? incidentData.Description : incidentData.AdditionalData);\r\n       \r\n      }\r\n      const descriptionEditCancel = () =>{\r\n        setDescription(type === \"description\"? incidentData.Description : incidentData.AdditionalData);\r\n        setEditDescription(false);\r\n      }\r\n    \r\n      const descriptionEditSave = () =>{\r\n        if(description.trim() === \"\"){\r\n          alert(\"Description cannot be empty.\");\r\n          setDescription(incidentData.Description);\r\n          return;\r\n        }\r\n        type === \"description\"\r\n        ? updateIncidentByField(\"Description\", description.trim())\r\n        : updateIncidentByField(\"AdditionalData\", description.trim());\r\n       \r\n        setEditDescription(false);\r\n      }\r\n    return (\r\n        <>\r\n                 <p className=\"heading left-align indigo-text darken-4\">\r\n                    {\" \"}\r\n                    {/* Description  */}\r\n                    {type === \"description\" ? \"Description\" : \"Additional Details\"}\r\n                    <i\r\n                      className=\"inline-icon material-icons actions-icon\"\r\n                      onClick={descriptionEditClick}\r\n                    >\r\n                      edit\r\n                    </i>\r\n                  </p>\r\n                  {!editDescription ? (\r\n                    <>\r\n                      <div className=\"input-field\">\r\n                        <p className=\"darkslategrayText bigTextScroll\">\r\n                          {description}\r\n                        </p>\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <div className=\"input-field\">\r\n                        {\" \"}\r\n                        {/* Description Edit */}\r\n                        <textarea\r\n                          id=\"description\"\r\n                          className=\"materialize-textarea\"\r\n                          value={description}\r\n                          onChange={(e) => setDescription(e.target.value)}\r\n                        ></textarea>\r\n                        <button\r\n                          title=\"Save\"\r\n                          className=\"btn green darken-2 right updateBtn\"\r\n                          onClick={descriptionEditSave}\r\n                        >\r\n                          <i className=\"actions-icon material-icons\">check</i>\r\n                        </button>\r\n                        <button\r\n                          title=\"Cancel\"\r\n                          className=\"btn yellow darken-2 right updateBtn\"\r\n                          onClick={descriptionEditCancel}\r\n                        >\r\n                          <i className=\"actions-icon material-icons\">cancel</i>\r\n                        </button>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {     \r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,    \r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {     \r\n      updateIncident: (parameters) => dispatch(updateIncident(parameters)),  \r\n    };\r\n  };\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(IncidentDescription);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentTitle.js",["276","277"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport { updateIncident } from \"../../../store/actions/incidentsActions\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nfunction IncidentTitle({\r\n  incidentData,\r\n  updateIncident,\r\n  userId,\r\n  getNameById,\r\n}) {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [editable, setEditable] = useState(false);\r\n\r\n  useEffect(() => {   \r\n    setTitle(incidentData.Title);  \r\n   }, [incidentData])\r\n   \r\n\r\n  const editClick = () => {\r\n    setEditable(!editable);\r\n    setTitle(incidentData.Title);\r\n  };\r\n  const editCancel = () => {\r\n    setTitle(incidentData.Title);\r\n    setEditable(false);\r\n  };\r\n\r\n  const editSave = () => {\r\n    if (title.trim() === \"\") {\r\n      alert(\"Title cannot be empty.\");\r\n      setTitle(incidentData.Title);\r\n      return;\r\n    }\r\n    updateIncidentByField(\"Title\", title.trim());\r\n    setEditable(false);\r\n  };\r\n\r\n  const updateIncidentByField = (field, value) => {\r\n    let parameters = {\r\n      IncidentId: incidentData.Id,\r\n      Parameter: field,\r\n      Value: value,\r\n      UserId: userId,\r\n    };\r\n    updateIncident(parameters); // Calling action here\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col s9\">\r\n        {!editable ? (\r\n          <h5 className=\"left indigo-text darken-4\">\r\n            {\" \"}\r\n            {/* Title  */}\r\n            {title}\r\n            <i className=\"material-icons actions-icon\" onClick={editClick}>\r\n              edit\r\n            </i>\r\n          </h5>\r\n        ) : (\r\n          <div className=\"input-field\">\r\n            {\" \"}\r\n            {/* Title Edit */}\r\n            <input\r\n              type=\"text\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n            />\r\n            <button\r\n              title=\"Save\"\r\n              className=\"btn green darken-2 right updateBtn\"\r\n              onClick={editSave}\r\n            >\r\n              <i className=\"actions-icon material-icons\">check</i>\r\n            </button>\r\n            <button\r\n              title=\"Cancel\"\r\n              className=\"btn yellow darken-2 right updateBtn\"\r\n              onClick={editCancel}\r\n            >\r\n              <i className=\"actions-icon material-icons\">cancel</i>\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"col s3\">        \r\n        <h5>         \r\n          <span\r\n            className=\"im-createTime black-text \"\r\n            title={moment(incidentData.CreatedAT).format(\r\n              \"MMMM DD YYYY, h:mm:ss a\"\r\n            )}\r\n          >\r\n            Created by{\" \"}\r\n            <a className=\"username\"> {getNameById(incidentData.CreatedBy)} </a>{\" \"}\r\n            - {moment(incidentData.CreatedAT).fromNow()}\r\n          </span>\r\n        </h5>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {     \r\n      allAssignees: state.users.users,\r\n      userId :state.userLogin.userId, \r\n      incidentData: state.incidents.IncidentSelected,   \r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {     \r\n      updateIncident: (parameters) => dispatch(updateIncident(parameters)),  \r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(IncidentTitle);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\usersActions.js",["278"],"import axios from 'axios';\r\nimport { usersUrls } from \"../../api/apiURLs\";\r\n\r\nexport const  allUsers = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.allUsersUrl\r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const users = response.data;\r\n              dispatch({ type: 'ALL_USERS', users });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n  export const userssWithPage = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.userssWithPageUrl +\r\n                    \"PageSize=\" + parameters.PageSize +\"&PageNumber=\" + parameters.PageNumber \r\n                    + \"&SortBy=q&SortDirection=q&Search=\" + parameters.Search;\r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const data = response.data;                   \r\n              dispatch({ type: 'USERS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n\r\n  export const addNewUser = (formData) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.addNewUserUrl \r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = response.data;\r\n            //  dispatch({ type: 'INCIDENTS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\notificationsActions.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\incidentsActions.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\userLoginActions.js",["279"],"import axios from 'axios';\r\nimport qs from 'qs';\r\nimport { usersUrls } from \"../../api/apiURLs\";\r\n\r\n// export const logIn = (credentials) => {\r\n//     return (dispatch, getState) => {     \r\n//         axios({\r\n//             method: 'post',\r\n//             //url: baseUrl + 'applications/' + appName + '/dataexport/plantypes' + plan,\r\n//             url : usersUrls.tokenUrl,\r\n//             headers: {'Content-type': 'application/x-www-form-urlencoded'}, \r\n//             data: qs.stringify({\r\n//                 grant_type: 'password',\r\n//                 username: credentials.username,\r\n//                 password: credentials.password \r\n//             }),\r\n//           })\r\n//           .then((response)=>{              \r\n//               const loginData = {\r\n//                   token : response.data.access_token,\r\n//                   Name :  response.data.Name,\r\n//                   User_Id :  response.data.User_Id\r\n//               }\r\n//               dispatch({ type: 'LOGIN_PASS', loginData });\r\n//           })\r\n//           .catch((err)=>{\r\n//                    dispatch({ type: 'LOGIN_FAIL'});\r\n//                    console.log(err);\r\n//           });    \r\n//     }\r\n//   }\r\n\r\n  export const logIn = (credentials) => {\r\n    return (dispatch, getState) => {   \r\n         axios({\r\n            method: 'post',\r\n            //url: baseUrl + 'applications/' + appName + '/dataexport/plantypes' + plan,\r\n            url : usersUrls.authenticateUrl,\r\n            headers: {'Content-type': 'application/json'}, \r\n            data: {               \r\n                Username: credentials.username,\r\n                Password: credentials.password \r\n            },\r\n          })\r\n          .then((response)=>{              \r\n              const loginData = {\r\n                  token : response.data.Token,\r\n                  Name :  response.data.user.FirstName + \" \" +  response.data.user.LastName,\r\n                  User_Id :  response.data.user.Id\r\n              }\r\n              dispatch({ type: 'LOGIN_PASS', loginData });\r\n          })\r\n          .catch((err)=>{\r\n                   dispatch({ type: 'LOGIN_FAIL'});\r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n  \r\n  \r\n  export const signOut = () => {\r\n    return (dispatch, getState) => {     \r\n      dispatch({ type: 'SIGN_OUT', data:null });\r\n    }\r\n  }\r\n  \r\n  export const signUp = (newUser) => {\r\n    return (dispatch, getState) => {     \r\n    }\r\n  }\r\n\r\n  export const updateHubId = (hubId, userId) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.updateHubIdUrl \r\n        axios.post(url, {\r\n          HubId : hubId,\r\n          UserId : userId\r\n        })\r\n          .then((response)=>{          \r\n          \r\n             dispatch({ type: 'UPDATE_HUB', hubId });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\api\\apiURLs.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\messagesActions.js",["280","281","282"],"import axios from 'axios';\r\nimport { messagesUrls } from \"../../api/apiURLs\";\r\n\r\n\r\nexport var cancel;\r\n\r\nexport const messagesByUser = (userId) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.messagesByUserUrl + userId;                   \r\n        axios({\r\n          method: 'GET',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n              dispatch({ type: 'MESSAGES_BY_USER', data });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err.message);\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n\r\n  export const conversationsByUser = (userId) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.conversationsByUserUrl + userId;                   \r\n        axios({\r\n          method: 'GET',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n              dispatch({ type: 'CONVERSATIONS_BY_USER', data });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err.message);\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n\r\n  export const messagesByConversations = (conversationId) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.messagesByConversationsUrl + conversationId;                   \r\n        axios({\r\n          method: 'GET',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n              dispatch({ type: 'MESSAGES_BY_CONVERSATIONS', data });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err.message);\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n\r\n  export const replyMessage = (formData, conversationId) => {\r\n    return (dispatch, getState) => {      \r\n      //console.log(\"add new incident action\");\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.sendMessageUrl\r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = true;\r\n             dispatch(messagesByConversations(conversationId));\r\n             \r\n              dispatch({ type: 'NEW_MESSAGE', data });\r\n          })\r\n          .catch((err)=>{  \r\n            const data = err.message;\r\n            console.log(data);\r\n           \r\n          });   \r\n    }\r\n  }\r\n \r\n  export const sendNewMessage = (formData) => {\r\n    return (dispatch, getState) => {      \r\n      //console.log(\"add new incident action\");\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.sendMessageUrl\r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = true;\r\n              dispatch({ type: 'NEW_MESSAGE', data });\r\n          })\r\n          .catch((err)=>{  \r\n            const data = err.message;\r\n            console.log(data);\r\n           \r\n          });   \r\n    }\r\n  }\r\n\r\n \r\n\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\SendMessage.js",["283"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\dashboardActions.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comment.js",["284","285","286","287","288","289"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport moment from \"moment\";\r\nimport { deleteAttachment, updateComment , deleteComment } from \"../../../store/actions/incidentsActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { incidentsUrls } from \"../../../api/apiURLs\";\r\n\r\nfunction Comment({\r\n  comment,\r\n  getNameById,\r\n  incidentId,\r\n  userId,\r\n  deleteAttachment,\r\n  updateComment,\r\n  deleteComment\r\n}) {\r\n\r\n  const [editComment, setEditComment] = useState(false);\r\n  const [commentText, setCommentText] = useState(comment.CommentText);\r\n  const [files, setFiles] = useState(null);\r\n\r\n  const commentEditClick = () => {\r\n    setEditComment(!editComment);\r\n    setCommentText(comment.CommentText);\r\n  };\r\n  const commentEditCancel = () => {\r\n    setCommentText(comment.CommentText);\r\n    setEditComment(false);\r\n  };\r\n\r\n  const commentEditSave = () => {\r\n    let changedComment = {\r\n      Id : comment.Id,\r\n      IncidentId : incidentId,\r\n      UserId : userId,\r\n      CreateDate : new Date(),\r\n      CommentText : commentText,\r\n      attachments :[]\r\n    }\r\n    updateComment(changedComment);\r\n    setEditComment(false);\r\n  };\r\n\r\n  const downloadFile = (file) => {\r\n    window.open(\r\n      incidentsUrls.downloadFileUrl + \r\n      \"type=comment\" +\r\n        \"&commentId=\" +\r\n        file.CommentId +\r\n        \"&incidentId=\" +\r\n        incidentId +\r\n        \"&filename=\" +\r\n        file.FileName +\r\n        \"&contentType=\" +\r\n        file.ContentType\r\n    );\r\n  };\r\n\r\n  const deleteFile = (file) => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this attachment.\" + file.FileName\r\n      )\r\n    ) {\r\n      deleteAttachment(\"comment\", userId, incidentId, file);  \r\n    }\r\n  };\r\n\r\n  const deleteThisComment = () => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this comment.\"\r\n      )\r\n    ) {\r\n      deleteComment(comment.Id,incidentId, userId );  \r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <p className=\"commentHeader darkslategrayText\">\r\n        <a className=\"username\">{getNameById(comment.UserId)}</a> added a\r\n        comment. -{\" \"}\r\n        <span\r\n          title={moment(comment.CreateDate).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n        >\r\n          {moment(comment.CreateDate).fromNow()}{\" \"}\r\n        </span>\r\n        <span className=\"right\">\r\n          <i\r\n            title=\"Edit Comment\"\r\n            className=\"actions-icon material-icons indigo-text darken-4 inline-icon\"\r\n            onClick={commentEditClick}\r\n          >\r\n            edit\r\n          </i>\r\n          <i\r\n            title=\"Delete Comment\"\r\n            className=\"actions-icon material-icons red-text inline-icon\"\r\n            onClick = {deleteThisComment}\r\n          >\r\n            cancel\r\n          </i>\r\n        </span>\r\n      </p>\r\n      {!editComment ? (\r\n        <p className=\"darkslategrayText\">{comment.CommentText}</p>\r\n      ) : (\r\n        <p className=\"comment-edit-box\">\r\n          <textarea className=\"materialize-textarea\" onChange={(e) => setCommentText(e.target.value)}></textarea>\r\n\r\n          <i\r\n            className=\"right green-text actions-icon material-icons\"\r\n            title=\"Save\"\r\n            onClick={commentEditSave}\r\n          >\r\n            check\r\n          </i>\r\n          <i\r\n            className=\"right yellow-text text-darken-2 actions-icon material-icons\"\r\n            title=\"Cancel\"\r\n            onClick={commentEditCancel}\r\n          >\r\n            cancel\r\n          </i>\r\n        </p>\r\n      )}{\" \"}\r\n      {/* end of edit comment - if */}\r\n      <p>\r\n        <ul className=\"commentFiles\">\r\n          {!comment.attachments\r\n            ? null\r\n            : comment.attachments.map((file) => {\r\n                return (\r\n                  <li key={file.Id}>\r\n                    <a className=\"center indigo-text darken-4\">\r\n                      {!editComment ? null : (\r\n                        <i\r\n                          title=\"Remove\"\r\n                          className=\"actions-icon material-icons red-text inline-icon\"\r\n                          onClick={() => deleteFile(file)}\r\n                        >\r\n                          cancel\r\n                        </i>\r\n                      )}\r\n                      <span\r\n                        title={file.FileName}\r\n                        onClick={() => downloadFile(file)}\r\n                      >\r\n                        {file.FileName.length > 40\r\n                          ? file.FileName.slice(0, 40) + \"...\"\r\n                          : file.FileName}\r\n                      </span>\r\n                    </a>\r\n                  </li>\r\n                );\r\n              })}\r\n        </ul>\r\n      </p>\r\n      <hr></hr>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id       \r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {   \r\n    deleteAttachment : (type, userid, incidentId , file) => dispatch(deleteAttachment(type, userid, incidentId ,file)),\r\n    updateComment : (comment) => dispatch(updateComment(comment)),\r\n    deleteComment : (commentId, incidentId, userId) => dispatch(deleteComment(commentId, incidentId, userId))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\signalR\\sender.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\ComposeMessage.js",["290"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { sendNewMessage } from \"../../store/actions/messagesActions\";\r\nimport  AssigneeDropdown  from \"../../components/Incidents/AssigneeDropdown\";\r\nimport '../../styles/composemessage.css'\r\n\r\nfunction ComposeMessage({\r\n    userId,\r\n    allUsers,\r\n    UserMessages,\r\n    sendNewMessage\r\n}) {\r\n\r\n\r\n    const [receiver, setReceiver] = useState(null);\r\n    const [receivereName, setReceiverName] = useState(\"\");  \r\n    const [messageText, setMessageText] = useState(\"\");\r\n  \r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n        const formData = new FormData(); \r\n\r\n         formData.append(\"From\", userId); \r\n         formData.append(\"To\", receiver);\r\n         formData.append(\"MessageText\", messageText);     \r\n        console.log(\"formData\", formData);\r\n        sendNewMessage(formData);\r\n    }\r\n\r\n    return (\r\n        <div className=\"compose-message-container\">    \r\n                    <form action=\"#\">\r\n                        <div className=\"field\">\r\n                            <AssigneeDropdown\r\n                                updateIncidentByField={null}\r\n                                setAssignee={setReceiver}\r\n                                assigneeName={receivereName}\r\n                                setAssigneeName={setReceiverName}\r\n                            />\r\n                        </div>\r\n                <div className=\"input-field\">\r\n                    <textarea className=\"materialize-textarea\" cols=\"30\" rows=\"10\" onChange={(e) => setMessageText(e.target.value)} placeholder=\"Write message here\" required></textarea>\r\n                </div>\r\n\r\n                <div>\r\n                    <button\r\n                        className=\" btn green darken-1 updateBtn\"\r\n                        onClick={(event) => sendMessage(event)}\r\n                    >\r\n                        <span>Send</span>\r\n                        <i className=\"material-icons right\">send</i>\r\n                    </button>\r\n                </div>\r\n                    </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n        allUsers: state.users.users,\r\n        UserMessages : state.messages.Messages,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendNewMessage: (formData) => dispatch(sendNewMessage(formData)),    \r\n    }\r\n  }\r\n\r\n  export default connect(mapStateToProps, mapDispatchToProps)(ComposeMessage); \r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Reply.js",["291","292"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { replyMessage } from \"../../store/actions/messagesActions\";\r\n\r\nconst Reply = ({\r\n    userId,      \r\n    replyMessage,\r\n    UserMessages\r\n    \r\n}) => {\r\n\r\n    const [messageText, setMessageText] = useState(\"\");\r\n  \r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n\r\n        let To = UserMessages[0].From == userId? UserMessages[0].To : UserMessages[0].From;\r\n        let conversationId = UserMessages[0].ConversationId;\r\n        const formData = new FormData(); \r\n\r\n         formData.append(\"From\", userId); \r\n         formData.append(\"To\", To);\r\n         formData.append(\"MessageText\", messageText);     \r\n        \r\n         replyMessage(formData, conversationId);\r\n        setMessageText(\"\");\r\n     \r\n    }\r\n\r\n    return (\r\n        <div className=\"new-message-window\">\r\n            <div className=\"input-field\">\r\n                <textarea\r\n                    id=\"comment\"\r\n                    className=\"materialize-textarea\"\r\n                    placeholder='Write new message'\r\n                     value={messageText}\r\n                     onChange={(e) => setMessageText(e.target.value)}\r\n                ></textarea>\r\n            </div>\r\n            <div>\r\n                <button\r\n                    className=\"left btn green darken-2 updateBtn\"\r\n                    onClick={(event) => sendMessage(event)}\r\n                >\r\n                    <span>Send</span>\r\n                    <i className=\"material-icons right\">send</i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n        allUsers: state.users.users,\r\n        UserMessages : state.messages.Messages,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        replyMessage: (formData, conversationId) => dispatch(replyMessage(formData, conversationId)),    \r\n    }\r\n  }\r\n\r\n  export default connect(mapStateToProps, mapDispatchToProps)(Reply); \r\n\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Message.js",["293"],"import moment from \"moment\";\r\n\r\nconst Message = ({ message, userId }) => {\r\n\r\n    const isSender = message.From == userId ? true: false;\r\n\r\n    return (\r\n        <li className='message-li'>\r\n            <div className='message-time'><span title= {moment(message.Date).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(message.Date).fromNow() } </span></div>\r\n            <div className={isSender ? \"message left\" : \"message right\"}>\r\n                <div className='message-text'>\r\n                   {message.MessageText}\r\n                </div>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Message;","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Conversation.js",["294","295","296","297","298"],"import { React, useState, useEffect, useRef} from 'react'\r\nimport moment from \"moment\";\r\n\r\nconst Conversation = ({ conversation, allUsers, userId, getUserNameById, conversationClicked, selectedConversation})=> {\r\n    const user = conversation.User1 == userId? conversation.User2 : conversation.User1;\r\n\r\n    \r\n    const conversationSelected = (id) => {\r\n        conversationClicked(id);\r\n    }\r\n    \r\n    const cssClass = selectedConversation == conversation.Id ? \"user-info selected\" : \"user-info\";\r\n\r\n    return (\r\n        <li >\r\n            <div className={cssClass} onClick={() => conversationSelected(conversation.Id)}>\r\n                <div className='photo'>\r\n                    <button type=\"button\" title={\"Umar Shareef\"} className=\"btn-floating  pink darken-2 userWelcome\" >\r\n                        {getUserNameById(user).toUpperCase().split(/\\s/).reduce((response, word) => response += word.slice(0, 1), '')}\r\n                    </button>\r\n                </div>\r\n                <div className='name-message'>\r\n                    <div className='name-unread' >\r\n                        <span className='name indigo-text darken-4'>{getUserNameById(user)} </span>\r\n                        <span className='unread-count hide'>5 new</span>\r\n                    </div>\r\n                    <div className='last-message'>\r\n                        <span className='last-message-text'>{conversation.LastMessage.slice(0,20)}</span>\r\n                        <span className='date-time'><span title= {moment(conversation.LastMessageTime).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(conversation.LastMessageTime).fromNow() } </span></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <hr></hr>\r\n\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Conversation;",{"ruleId":"299","replacedBy":"300"},{"ruleId":"301","replacedBy":"302"},{"ruleId":"303","severity":1,"message":"304","line":25,"column":11,"nodeType":"305","endLine":25,"endColumn":77},{"ruleId":"303","severity":1,"message":"306","line":60,"column":14,"nodeType":"305","endLine":60,"endColumn":17},{"ruleId":"303","severity":1,"message":"306","line":82,"column":15,"nodeType":"305","endLine":82,"endColumn":18},{"ruleId":"303","severity":1,"message":"304","line":86,"column":15,"nodeType":"305","endLine":86,"endColumn":50},{"ruleId":"307","severity":1,"message":"308","line":27,"column":8,"nodeType":"309","endLine":27,"endColumn":38,"suggestions":"310"},{"ruleId":"311","severity":1,"message":"312","line":1,"column":17,"nodeType":"313","messageId":"314","endLine":1,"endColumn":23},{"ruleId":"311","severity":1,"message":"315","line":3,"column":8,"nodeType":"313","messageId":"314","endLine":3,"endColumn":9},{"ruleId":"307","severity":1,"message":"308","line":21,"column":8,"nodeType":"309","endLine":21,"endColumn":10,"suggestions":"316"},{"ruleId":"307","severity":1,"message":"308","line":37,"column":8,"nodeType":"309","endLine":37,"endColumn":38,"suggestions":"317"},{"ruleId":"307","severity":1,"message":"318","line":45,"column":8,"nodeType":"309","endLine":45,"endColumn":10,"suggestions":"319"},{"ruleId":"307","severity":1,"message":"320","line":45,"column":8,"nodeType":"309","endLine":45,"endColumn":10,"suggestions":"321"},{"ruleId":"311","severity":1,"message":"322","line":28,"column":10,"nodeType":"313","messageId":"314","endLine":28,"endColumn":18},{"ruleId":"311","severity":1,"message":"323","line":36,"column":10,"nodeType":"313","messageId":"314","endLine":36,"endColumn":31},{"ruleId":"311","severity":1,"message":"324","line":36,"column":33,"nodeType":"313","messageId":"314","endLine":36,"endColumn":57},{"ruleId":"307","severity":1,"message":"325","line":52,"column":6,"nodeType":"309","endLine":52,"endColumn":23,"suggestions":"326"},{"ruleId":"307","severity":1,"message":"327","line":64,"column":6,"nodeType":"309","endLine":64,"endColumn":20,"suggestions":"328"},{"ruleId":"329","severity":1,"message":"330","line":89,"column":28,"nodeType":"331","messageId":"332","endLine":89,"endColumn":29},{"ruleId":"311","severity":1,"message":"333","line":8,"column":8,"nodeType":"313","messageId":"314","endLine":8,"endColumn":21},{"ruleId":"311","severity":1,"message":"334","line":24,"column":12,"nodeType":"313","messageId":"314","endLine":24,"endColumn":21},{"ruleId":"311","severity":1,"message":"335","line":24,"column":23,"nodeType":"313","messageId":"314","endLine":24,"endColumn":35},{"ruleId":"307","severity":1,"message":"336","line":31,"column":8,"nodeType":"309","endLine":31,"endColumn":10,"suggestions":"337"},{"ruleId":"338","severity":1,"message":"339","line":34,"column":33,"nodeType":"331","messageId":"340","endLine":34,"endColumn":35},{"ruleId":"307","severity":1,"message":"341","line":39,"column":8,"nodeType":"309","endLine":39,"endColumn":23,"suggestions":"342"},{"ruleId":"338","severity":1,"message":"339","line":45,"column":45,"nodeType":"331","messageId":"340","endLine":45,"endColumn":47},{"ruleId":"307","severity":1,"message":"343","line":52,"column":8,"nodeType":"309","endLine":52,"endColumn":22,"suggestions":"344"},{"ruleId":"338","severity":1,"message":"345","line":24,"column":23,"nodeType":"331","messageId":"340","endLine":24,"endColumn":25},{"ruleId":"338","severity":1,"message":"345","line":28,"column":43,"nodeType":"331","messageId":"340","endLine":28,"endColumn":45},{"ruleId":"307","severity":1,"message":"346","line":52,"column":8,"nodeType":"309","endLine":52,"endColumn":16,"suggestions":"347"},{"ruleId":"303","severity":1,"message":"306","line":58,"column":15,"nodeType":"305","endLine":58,"endColumn":19},{"ruleId":"303","severity":1,"message":"306","line":90,"column":37,"nodeType":"305","endLine":90,"endColumn":40},{"ruleId":"303","severity":1,"message":"306","line":92,"column":33,"nodeType":"305","endLine":92,"endColumn":36},{"ruleId":"303","severity":1,"message":"306","line":17,"column":19,"nodeType":"305","endLine":17,"endColumn":53},{"ruleId":"303","severity":1,"message":"306","line":22,"column":19,"nodeType":"305","endLine":22,"endColumn":51},{"ruleId":"303","severity":1,"message":"306","line":27,"column":19,"nodeType":"305","endLine":27,"endColumn":52},{"ruleId":"311","severity":1,"message":"348","line":33,"column":9,"nodeType":"313","messageId":"314","endLine":33,"endColumn":23},{"ruleId":"307","severity":1,"message":"349","line":34,"column":7,"nodeType":"309","endLine":34,"endColumn":9,"suggestions":"350"},{"ruleId":"311","severity":1,"message":"351","line":2,"column":27,"nodeType":"313","messageId":"314","endLine":2,"endColumn":43},{"ruleId":"307","severity":1,"message":"318","line":18,"column":10,"nodeType":"309","endLine":18,"endColumn":12,"suggestions":"352"},{"ruleId":"311","severity":1,"message":"353","line":1,"column":17,"nodeType":"313","messageId":"314","endLine":1,"endColumn":26},{"ruleId":"311","severity":1,"message":"354","line":2,"column":8,"nodeType":"313","messageId":"314","endLine":2,"endColumn":14},{"ruleId":"311","severity":1,"message":"355","line":19,"column":9,"nodeType":"313","messageId":"314","endLine":19,"endColumn":16},{"ruleId":"311","severity":1,"message":"356","line":1,"column":27,"nodeType":"313","messageId":"314","endLine":1,"endColumn":35},{"ruleId":"307","severity":1,"message":"357","line":11,"column":4,"nodeType":"309","endLine":11,"endColumn":6,"suggestions":"358"},{"ruleId":"303","severity":1,"message":"306","line":72,"column":11,"nodeType":"305","endLine":72,"endColumn":56},{"ruleId":"307","severity":1,"message":"359","line":12,"column":8,"nodeType":"309","endLine":12,"endColumn":10,"suggestions":"360"},{"ruleId":"311","severity":1,"message":"356","line":1,"column":27,"nodeType":"313","messageId":"314","endLine":1,"endColumn":35},{"ruleId":"307","severity":1,"message":"361","line":12,"column":4,"nodeType":"309","endLine":12,"endColumn":6,"suggestions":"362"},{"ruleId":"303","severity":1,"message":"306","line":75,"column":11,"nodeType":"305","endLine":75,"endColumn":56},{"ruleId":"307","severity":1,"message":"363","line":11,"column":6,"nodeType":"309","endLine":11,"endColumn":8,"suggestions":"364"},{"ruleId":"365","severity":1,"message":"366","line":77,"column":10,"nodeType":"367","messageId":"340","endLine":77,"endColumn":15},{"ruleId":"311","severity":1,"message":"356","line":1,"column":26,"nodeType":"313","messageId":"314","endLine":1,"endColumn":34},{"ruleId":"307","severity":1,"message":"368","line":12,"column":6,"nodeType":"309","endLine":12,"endColumn":8,"suggestions":"369"},{"ruleId":"311","severity":1,"message":"312","line":1,"column":38,"nodeType":"313","messageId":"314","endLine":1,"endColumn":44},{"ruleId":"311","severity":1,"message":"312","line":1,"column":38,"nodeType":"313","messageId":"314","endLine":1,"endColumn":44},{"ruleId":"303","severity":1,"message":"306","line":96,"column":13,"nodeType":"305","endLine":96,"endColumn":37},{"ruleId":"311","severity":1,"message":"370","line":46,"column":20,"nodeType":"313","messageId":"314","endLine":46,"endColumn":24},{"ruleId":"311","severity":1,"message":"371","line":2,"column":8,"nodeType":"313","messageId":"314","endLine":2,"endColumn":10},{"ruleId":"311","severity":1,"message":"370","line":23,"column":26,"nodeType":"313","messageId":"314","endLine":23,"endColumn":30},{"ruleId":"311","severity":1,"message":"370","line":45,"column":26,"nodeType":"313","messageId":"314","endLine":45,"endColumn":30},{"ruleId":"311","severity":1,"message":"370","line":67,"column":26,"nodeType":"313","messageId":"314","endLine":67,"endColumn":30},{"ruleId":"311","severity":1,"message":"353","line":1,"column":27,"nodeType":"313","messageId":"314","endLine":1,"endColumn":36},{"ruleId":"311","severity":1,"message":"353","line":1,"column":17,"nodeType":"313","messageId":"314","endLine":1,"endColumn":26},{"ruleId":"311","severity":1,"message":"312","line":1,"column":38,"nodeType":"313","messageId":"314","endLine":1,"endColumn":44},{"ruleId":"311","severity":1,"message":"372","line":19,"column":10,"nodeType":"313","messageId":"314","endLine":19,"endColumn":15},{"ruleId":"311","severity":1,"message":"373","line":19,"column":17,"nodeType":"313","messageId":"314","endLine":19,"endColumn":25},{"ruleId":"303","severity":1,"message":"306","line":81,"column":9,"nodeType":"305","endLine":81,"endColumn":33},{"ruleId":"303","severity":1,"message":"306","line":135,"column":21,"nodeType":"305","endLine":135,"endColumn":64},{"ruleId":"311","severity":1,"message":"353","line":1,"column":27,"nodeType":"313","messageId":"314","endLine":1,"endColumn":36},{"ruleId":"311","severity":1,"message":"353","line":1,"column":27,"nodeType":"313","messageId":"314","endLine":1,"endColumn":36},{"ruleId":"338","severity":1,"message":"339","line":17,"column":39,"nodeType":"331","messageId":"340","endLine":17,"endColumn":41},{"ruleId":"338","severity":1,"message":"339","line":5,"column":35,"nodeType":"331","messageId":"340","endLine":5,"endColumn":37},{"ruleId":"311","severity":1,"message":"356","line":1,"column":17,"nodeType":"313","messageId":"314","endLine":1,"endColumn":25},{"ruleId":"311","severity":1,"message":"353","line":1,"column":27,"nodeType":"313","messageId":"314","endLine":1,"endColumn":36},{"ruleId":"311","severity":1,"message":"312","line":1,"column":38,"nodeType":"313","messageId":"314","endLine":1,"endColumn":44},{"ruleId":"338","severity":1,"message":"339","line":5,"column":37,"nodeType":"331","messageId":"340","endLine":5,"endColumn":39},{"ruleId":"338","severity":1,"message":"339","line":12,"column":43,"nodeType":"331","messageId":"340","endLine":12,"endColumn":45},"no-native-reassign",["374"],"no-negated-in-lhs",["375"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["376"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'M' is defined but never used.",["377"],["378"],"React Hook useEffect has a missing dependency: 'getAllAssignees'. Either include it or remove the dependency array. If 'getAllAssignees' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["379"],"React Hook useEffect has missing dependencies: 'commentRecieved', 'refreshNotifications', 'updateHubId', and 'userId'. Either include them or remove the dependency array. If 'updateHubId' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["380"],"'assignee' is assigned a value but never used.","'editAdditionalDetails' is assigned a value but never used.","'setEditAdditionalDetails' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getIncidentById'. Either include it or remove the dependency array. If 'getIncidentById' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["381"],"React Hook useEffect has a missing dependency: 'allAssignees'. Either include it or remove the dependency array.",["382"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'DayByDayCount' is defined but never used.","'usersInfo' is assigned a value but never used.","'setUsersInfo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'conversationsByUser' and 'userId'. Either include them or remove the dependency array. If 'conversationsByUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["383"],"eqeqeq","Expected '===' and instead saw '=='.","unexpected","React Hook useEffect has missing dependencies: 'messagesByConversations' and 'selectedConversation'. Either include them or remove the dependency array. If 'messagesByConversations' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["384"],"React Hook useEffect has missing dependencies: 'getUserNameById' and 'userId'. Either include them or remove the dependency array.",["385"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'setPageNumber'. Either include it or remove the dependency array. If 'setPageNumber' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["386"],"'dateDifference' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getNotifications' and 'userId'. Either include them or remove the dependency array. If 'getNotifications' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["387"],"'deleteAttachment' is defined but never used.",["388"],"'useEffect' is defined but never used.","'moment' is defined but never used.","'history' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getOldest5UnresolvedIncidents'. Either include it or remove the dependency array. If 'getOldest5UnresolvedIncidents' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["389"],"React Hook useEffect has a missing dependency: 'getOverallWidgetData'. Either include it or remove the dependency array. If 'getOverallWidgetData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["390"],"React Hook useEffect has a missing dependency: 'getLast5IncidentsData'. Either include it or remove the dependency array. If 'getLast5IncidentsData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["391"],"React Hook useEffect has a missing dependency: 'getMostAssignedToUsers'. Either include it or remove the dependency array. If 'getMostAssignedToUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["392"],"no-dupe-keys","Duplicate key 'title'.","ObjectExpression","React Hook useEffect has missing dependencies: 'getKPIData' and 'userId'. Either include them or remove the dependency array. If 'getKPIData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["393"],"'data' is assigned a value but never used.","'qs' is defined but never used.","'files' is assigned a value but never used.","'setFiles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"394","fix":"395"},{"desc":"396","fix":"397"},{"desc":"394","fix":"398"},{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"413","fix":"414"},{"desc":"415","fix":"416"},{"desc":"399","fix":"417"},{"desc":"418","fix":"419"},{"desc":"420","fix":"421"},{"desc":"422","fix":"423"},{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},"Update the dependencies array to be: [PageNumber, PageSize, Search, props]",{"range":"428","text":"429"},"Update the dependencies array to be: [props]",{"range":"430","text":"431"},{"range":"432","text":"429"},"Update the dependencies array to be: [getAllAssignees]",{"range":"433","text":"434"},"Update the dependencies array to be: [commentRecieved, refreshNotifications, updateHubId, userId]",{"range":"435","text":"436"},"Update the dependencies array to be: [getIncidentById, match.params.id]",{"range":"437","text":"438"},"Update the dependencies array to be: [allAssignees, incidentData]",{"range":"439","text":"440"},"Update the dependencies array to be: [conversationsByUser, userId]",{"range":"441","text":"442"},"Update the dependencies array to be: [Conversations, messagesByConversations, selectedConversation]",{"range":"443","text":"444"},"Update the dependencies array to be: [UserMessages, getUserNameById, userId]",{"range":"445","text":"446"},"Update the dependencies array to be: [search, setPageNumber]",{"range":"447","text":"448"},"Update the dependencies array to be: [getNotifications, userId]",{"range":"449","text":"450"},{"range":"451","text":"434"},"Update the dependencies array to be: [getOldest5UnresolvedIncidents]",{"range":"452","text":"453"},"Update the dependencies array to be: [getOverallWidgetData]",{"range":"454","text":"455"},"Update the dependencies array to be: [getLast5IncidentsData]",{"range":"456","text":"457"},"Update the dependencies array to be: [getMostAssignedToUsers]",{"range":"458","text":"459"},"Update the dependencies array to be: [getKPIData, userId]",{"range":"460","text":"461"},[807,837],"[PageNumber, PageSize, Search, props]",[758,760],"[props]",[1147,1177],[1738,1740],"[getAllAssignees]",[1633,1635],"[commentRecieved, refreshNotifications, updateHubId, userId]",[1671,1688],"[getIncidentById, match.params.id]",[2148,2162],"[allAssignees, incidentData]",[996,998],"[conversationsByUser, userId]",[1276,1291],"[Conversations, messagesByConversations, selectedConversation]",[1778,1792],"[UserMessages, getUserNameById, userId]",[1403,1411],"[search, setPageNumber]",[984,986],"[getNotifications, userId]",[761,763],[423,425],"[getOldest5UnresolvedIncidents]",[454,456],"[getOverallWidgetData]",[384,386],"[getLast5IncidentsData]",[400,402],"[getMostAssignedToUsers]",[345,347],"[getKPIData, userId]"]