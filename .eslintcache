[{"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\index.js":"1","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\App.js":"2","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\reportWebVitals.js":"3","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Login\\Login.js":"4","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\rootReducer.js":"5","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\userLoginReducer.js":"6","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\usersReducer.js":"7","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\incidentsReducer.js":"8","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\usersActions.js":"9","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\userLoginActions.js":"10","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\NavBar.js":"11","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\IncidentLisiting.js":"12","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\Incident.js":"13","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Pages.js":"14","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\PageActions.js":"15","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\incidentsActions.js":"16","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\AddNew.js":"17","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\UsersList.js":"18","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\User.js":"19","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\AddUser.js":"20","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\IncidentDetails.js":"21","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\Comments.js":"22","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\Comment.js":"23","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\api\\apiURLs.js":"24","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Notifications.js":"25","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\notificationsReducer.js":"26","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\notificationsActions.js":"27","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\signalR\\Receiver.js":"28","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\signalR\\sender.js":"29"},{"size":1122,"mtime":1608337289896,"results":"30","hashOfConfig":"31"},{"size":1422,"mtime":1610653728856,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":499162500000,"results":"33","hashOfConfig":"31"},{"size":2730,"mtime":1609696317922,"results":"34","hashOfConfig":"31"},{"size":475,"mtime":1610577481815,"results":"35","hashOfConfig":"31"},{"size":877,"mtime":1610653598959,"results":"36","hashOfConfig":"31"},{"size":768,"mtime":1610406538968,"results":"37","hashOfConfig":"31"},{"size":4172,"mtime":1610577111253,"results":"38","hashOfConfig":"31"},{"size":1899,"mtime":1610653460414,"results":"39","hashOfConfig":"31"},{"size":2973,"mtime":1610653614123,"results":"40","hashOfConfig":"31"},{"size":3073,"mtime":1610749863124,"results":"41","hashOfConfig":"31"},{"size":4858,"mtime":1610566861611,"results":"42","hashOfConfig":"31"},{"size":2455,"mtime":1610057403559,"results":"43","hashOfConfig":"31"},{"size":3027,"mtime":1609884362954,"results":"44","hashOfConfig":"31"},{"size":1130,"mtime":1608419315181,"results":"45","hashOfConfig":"31"},{"size":5966,"mtime":1610753749450,"results":"46","hashOfConfig":"31"},{"size":13219,"mtime":1610566671730,"results":"47","hashOfConfig":"31"},{"size":3921,"mtime":1610406658281,"results":"48","hashOfConfig":"31"},{"size":263,"mtime":1608746276170,"results":"49","hashOfConfig":"31"},{"size":6483,"mtime":1608752688290,"results":"50","hashOfConfig":"31"},{"size":27435,"mtime":1610493677374,"results":"51","hashOfConfig":"31"},{"size":3689,"mtime":1610057717663,"results":"52","hashOfConfig":"31"},{"size":5393,"mtime":1610495459434,"results":"53","hashOfConfig":"31"},{"size":1154,"mtime":1610741508657,"results":"54","hashOfConfig":"31"},{"size":2499,"mtime":1610754371553,"results":"55","hashOfConfig":"31"},{"size":669,"mtime":1610741444449,"results":"56","hashOfConfig":"31"},{"size":1266,"mtime":1610742423473,"results":"57","hashOfConfig":"31"},{"size":2127,"mtime":1610753476287,"results":"58","hashOfConfig":"31"},{"size":1577,"mtime":1610752997050,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"wm3clw",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\index.js",[],["129","130"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\App.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\reportWebVitals.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Login\\Login.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\rootReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\userLoginReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\usersReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\incidentsReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\usersActions.js",["131"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\userLoginActions.js",["132"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\NavBar.js",["133","134","135","136","137"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\IncidentLisiting.js",["138","139"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Pages from '../Pages'\r\nimport Incident from './Incident'\r\nimport PageActions from \"../PageActions\";\r\nimport { allUsers } from \"../../store/actions/usersActions\";\r\nimport { incidentsWithPage, cancel } from \"../../store/actions/incidentsActions\";\r\nimport {  useHistory  } from 'react-router-dom';\r\n\r\n\r\n function IncidentLisiting(props) {\r\n   \r\n    const [PageNumber, setPageNumber] = useState(1);\r\n    const [PageSize, setPageSize] = useState(5);\r\n    const [Search, setSearch] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n      props.getAllAssignees();      \r\n    }, []);\r\n\r\n\r\n   \r\n    useEffect(() => {\r\n        const parameters = {\r\n            PageNumber : PageNumber,\r\n            PageSize : PageSize,\r\n            Search : Search            \r\n        }        \r\n        setLoading(true);\r\n        props.incidentsWithPage(parameters);\r\n        setLoading(false);\r\n        return () => {\r\n          cancel();        // cancel axios  \r\n        }\r\n    }, [PageNumber, PageSize, Search])\r\n\r\n    const searchTextChange =   (text) => {      \r\n            setSearch(text);\r\n            setPageNumber(1);\r\n    }\r\n\r\n    const addNewClick = ()=>{\r\n      const data = false;\r\n      props.dispatch({ type: 'NEW_INCIDENT_STATUS', data });\r\n      let path = '/AddNew';      \r\n      history.push(path);\r\n    }\r\n\r\n    const getUserNameById = (id) => {   \r\n      let user = props.allAssignees.find((assignee) => {\r\n        return assignee.Id === id;\r\n      });   \r\n      if(!user){    \r\n        return id;\r\n      }\r\n      return user.FirstName + \" \" + user.LastName\r\n    }\r\n\r\n    if(props.Error!==\"\"){\r\n      return (\r\n        <div className=\"container\">\r\n          <h1 className=\"center red-text\">Error</h1>\r\n          <h5 className=\"center\">{props.Error}</h5>\r\n          <p className=\"center\">Please check your network and try loging back.</p>\r\n        </div>\r\n      )\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Incidents\"} /> \r\n        { loading? <h1>Loading</h1> : null}\r\n        { props.TotalIncidents === 0? <h1>Zero</h1> : null}\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n\r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">                \r\n                  <input type=\"text\" id=\"search\" value={Search}  onChange={(e) => searchTextChange(e.target.value)} />\r\n                  <label htmlFor=\"search\">Search</label>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">              \r\n                  <button className=\"btn green darken-4 right\" onClick={()=>addNewClick()} >\r\n                    <span>Add New</span>\r\n                    <i className=\"material-icons right\">create</i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col s12 l12\">\r\n                <table className=\"responsive-table highlight incidentsTbl\">\r\n                  <thead>\r\n                    <tr className=\"header\" data-target=\"blue\">\r\n                      <th>Title</th>\r\n                      <th>Description</th>\r\n                      <th>Assigned TO</th>\r\n                      <th>Created By</th>\r\n                      <th>Created Date</th>\r\n                      <th>Due Date</th>\r\n                      <th>Status</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  {\r\n                      props.Incidents.map(incident=>{\r\n                          return (\r\n                            <Incident key={incident.Id} incident= {incident} getUserNameById={getUserNameById} />                          )\r\n                      })\r\n                  }           \r\n                  </tbody>\r\n                </table>\r\n                <Pages  TotalPages={props.TotalIncidents} PostsPerPage={PageSize} setPageNumber={setPageNumber} setPageSize={setPageSize} search={Search} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        allAssignees: state.users.users,\r\n        Incidents : state.incidents.Incidents,\r\n        TotalIncidents : state.incidents.TotalIncidents,\r\n        Error : state.incidents.IncidentsError   \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        incidentsWithPage: (parameters) => dispatch(incidentsWithPage(parameters)),\r\n        getAllAssignees: () => dispatch(allUsers()),\r\n        dispatch:dispatch\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(IncidentLisiting);","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\Incident.js",["140"],"import React from 'react';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { removeIncidentData } from \"../../store/actions/incidentsActions\";\r\nimport { connect  } from 'react-redux';\r\nimport '../../styles/IncidentListing.css';\r\nimport moment from \"moment\";;\r\n\r\nfunction Incident({incident, dispatch, getUserNameById}) {\r\n\r\n  const history = useHistory();\r\n\r\n  const openIncident = (id) => {  \r\n    dispatch(removeIncidentData()); // So that user does not see old data that is stored in redux (and local storage)\r\n    let path = '/Incident/' + id;      \r\n      history.push(path);\r\n  }\r\n\r\n  const statusName = (status) => {\r\n    switch(status){\r\n      case \"N\":\r\n        return \"New\";\r\n      case \"C\":\r\n        return \"Close\";\r\n      case \"A\":\r\n        return \"Approved\";\r\n      case \"I\":\r\n        return \"In Progress\";\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  const dateDifference = (date1 , date2) =>{\r\n   \r\n      const diffTime = Math.abs(date2 - date1);\r\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \r\n     // console.log(diffTime + \" milliseconds\");\r\n     // console.log(diffDays + \" days\");\r\n     return diffDays;\r\n  }\r\n\r\n  let currentDate = new Date();\r\n  const dueDateClass = (new Date(incident.DueDate)) < currentDate ? \"red-text text-darken-2\" : \"green-text text-darken-2\";\r\n  \r\n    return (\r\n      <tr >\r\n        \r\n        <td\r\n          className=\"tbl-title\"\r\n          title={incident.Title}\r\n        >\r\n         <span className=\"indigo-text darken-4\" onClick = { () => openIncident(incident.Id) }>\r\n               {incident.Title.length > 50 ? incident.Title.slice(0,50) + \" ...\" : incident.Title }\r\n         </span>\r\n        </td>\r\n        <td\r\n          className=\"tbl-description\"\r\n          title={incident.Description}\r\n        >\r\n          {incident.Description.length > 30 ? incident.Description.slice(0,30) + \" ...\" : incident.Description }\r\n        </td>\r\n        <td>{getUserNameById(incident.AssignedTo)}</td>\r\n        <td>{getUserNameById(incident.CreatedBy)}</td>\r\n        <td><span title= {moment(incident.CreatedAT).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(incident.CreatedAT).fromNow() } </span></td>\r\n        <td><span className={dueDateClass} title= {moment(incident.DueDate).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(incident.DueDate).fromNow() } </span></td>\r\n        <td>{statusName(incident.Status)}</td>\r\n      </tr>\r\n    );\r\n}\r\n\r\nexport default connect()(Incident);","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Pages.js",["141","142"],"import {React, useState, useEffect, useRef} from 'react';\r\nimport M from 'materialize-css';\r\n\r\n\r\n\r\n\r\nexport default function Pages({TotalPages, PostsPerPage, setPageNumber, setPageSize , search }) {\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentSize, setCurrentSize] = useState(5);\r\n\r\n    const ddlRef = useRef();\r\n\r\n    let pages = [];\r\n    for(let i = 1; i <= Math.ceil(TotalPages / PostsPerPage) ; i++ )\r\n    {\r\n        pages.push(i);\r\n    }\r\n\r\n    const pageNumberClick = (p) =>{\r\n        if(p <1 || p > pages.length)\r\n            return;\r\n        setPageNumber(p);\r\n        setCurrentPage(p);\r\n    }\r\n\r\n    const pageSizeChanged = (pSize) => {\r\n        setPageSize(pSize);\r\n        setCurrentSize(pSize);\r\n        setCurrentPage(1);\r\n        setPageNumber(1);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setPageNumber(1);        \r\n        M.FormSelect.init(ddlRef.current); \r\n    }, [search])\r\n\r\n    pages = pages.map((p,index)=>{\r\n        let pclass = currentPage === p ? \"active\" : \"\";        \r\n        return (             \r\n            <li className={pclass} key={p}  onClick={() => pageNumberClick(p)}>              \r\n              <a > {p} </a>\r\n            </li>        \r\n        );\r\n    });\r\n  \r\n    return (\r\n        \r\n      <div className=\"row pagesRow\">\r\n        <div className=\"input-field col s12 m4 l4\">\r\n                            <select value={currentSize} onChange={(e) => pageSizeChanged(e.target.value)}\r\n                             ref={ddlRef}  >\t\t\t\t\t\t\r\n                                <option value=\"5\">5</option>\r\n                                <option value=\"10\">10</option>\r\n                                <option value=\"15\">15</option>\r\n                                <option value=\"20\">20</option>\r\n                                <option value=\"25\">25</option>\r\n                                <option value=\"30\">30</option>\r\n                                <option value=\"35\">35</option>\r\n                                <option value=\"40\">40</option>\r\n                                <option value=\"45\">45</option>\r\n                                <option value=\"50\">50</option>\r\n                            </select>\t\r\n                        <label>Page Size</label>\t\t\t\t\t\t\r\n        </div>\r\n        <div className=\"input-field col s12 m8 l8\">\r\n            <ul className=\"pagination right\">\r\n            <li\r\n                className={  currentPage === 1 ? \" disabled\" : \"\" } >\r\n                <a href=\"#!\" onClick={() => pageNumberClick(currentPage - 1)}>\r\n                <i className=\"material-icons\">chevron_left</i>\r\n                </a>\r\n            </li>\r\n            {pages}\r\n            <li\r\n                className={ currentPage === pages.length ? \" disabled\" : \"\" } >\r\n                <a href=\"#!\" onClick={() => pageNumberClick(currentPage + 1)}>\r\n                <i className=\"material-icons\">chevron_right</i>\r\n                </a>\r\n            </li>\r\n            </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\PageActions.js",["143","144","145"],"import React from 'react'\r\n\r\nexport default function PageActions(props) {\r\n    return (\r\n      <section className=\"container\">\r\n        <div className=\"row \">\r\n          <div className=\"col s12 l5\">\r\n            <div className=\"left\">\r\n              <h4 className=\"title\">{props.Title}</h4>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"col s7 l9 hide\">\r\n            <div className=\"right\">\r\n              <ul className=\"actionsBtns\">\r\n                <li>\r\n                  <a className=\"btn-floating green\">\r\n                    <i className=\"material-icons\">refresh</i>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"btn-floating red\">\r\n                    <i className=\"material-icons\">print</i>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"btn-floating blue\">\r\n                    <i className=\"material-icons\">file_download</i>\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n}\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\incidentsActions.js",["146"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\AddNew.js",["147"],"import {React , useRef, useEffect, useState} from 'react';\r\nimport PageActions from \"../PageActions\";\r\nimport M from 'materialize-css';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { allUsers } from '../../store/actions/usersActions';\r\nimport { addNewIncident } from '../../store/actions/incidentsActions';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n function AddNew({getAllAssignees, allAssignees, userId, addNewIncident, addNewError, AddNewIncidentStatus}) {\r\n\r\n    const dueDateTimeRef= useRef();\r\n    const dueDateDateRef= useRef();\r\n    const startTimeTimeRef = useRef();\r\n    const startTimeDateRef = useRef();\r\n    const assigneeRef = useRef();   \r\n   \r\n\r\n    const history = useHistory();\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [additionalDetails, setAdditionalDetails] = useState(\"\");  \r\n    const [files , setFiles] = useState(null);\r\n    const [assignee, setAssignee] = useState(null);  \r\n    const [assigneeName, setAssigneeName] = useState(\"\");  \r\n    const [assigneeList, setAssigneeList] = useState(allAssignees);\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n      console.log(\"Set hook\");\r\n      setAssigneeList(allAssignees);\r\n    }, [allAssignees])\r\n\r\n    useEffect(() => {      \r\n        M.Datepicker.init(startTimeDateRef.current);\r\n        M.Timepicker.init(startTimeTimeRef.current);\r\n        M.Datepicker.init(dueDateDateRef.current);\r\n        M.Timepicker.init(dueDateTimeRef.current);\r\n        var options = {\r\n          closeOnClick : false\r\n        }\r\n        M.Dropdown.init(assigneeRef.current, options);\r\n        getAllAssignees();\r\n    }, []);\r\n\r\n   const onFileChange = (event) => {    \r\n     if (event.target.files.length > 3) {\r\n       //alert(\"You can only attach upto 3 files. All extra files will be ignored.\");\r\n     }     \r\n     setFiles(event.target.files);\r\n   };\r\n\r\n   const cancelClick = (event) => {\r\n     event.preventDefault();\r\n     history.goBack();\r\n     //console.log(history);\r\n   };\r\n\r\n\r\n   const assigneeSelected = (userId) => {       \r\n    let currentAssignee = allAssignees.find(assignee => {\r\n        return assignee.Id === userId\r\n    })\r\n    console.log(currentAssignee);\r\n    var assigneeDropdown = M.Dropdown.getInstance(assigneeRef.current);\r\n    assigneeDropdown.close();\r\n    setAssignee(userId);\r\n    setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);\r\n   }\r\n\r\n   const searchAssignee = (event) => {    \r\n     let newList = [];\r\n     if(event.target.value !== \"\")\r\n        newList = allAssignees.filter(assignee => {    \r\n        return assignee.FirstName.toUpperCase().startsWith(event.target.value.toUpperCase()) \r\n            || assignee.LastName.toUpperCase().startsWith(event.target.value.toUpperCase());\r\n      });\r\n    \r\n     if(newList !== undefined && newList.length !== 0){ //check if there is atlease one assignee       \r\n      newList = [].concat(newList); \r\n     }\r\n     else{//if search found nothing, show all assignees\r\n        newList = allAssignees.slice(0,allAssignees.length);       \r\n     } \r\n     setAssigneeList(newList);   \r\n   }\r\n\r\n   const validateForm = () => {\r\n\r\n    if(title === \"\" || description ===\"\" || dueDateDateRef.current.value === \"\" || dueDateTimeRef.current.value === \"\"\r\n        || startTimeDateRef.current.value === \"\" || startTimeTimeRef.current.value === \"\"  )\r\n        return false;\r\n    return true;\r\n\r\n   }\r\n\r\n   const saveClick = (event) => {\r\n    event.preventDefault();     \r\n    if(!validateForm()){\r\n      setFormError(\"Please complete required fields before saving.\")\r\n      return;\r\n    }\r\n    \r\n    setFormError(\"\");\r\n\r\n    let startTime  = new Date( startTimeDateRef.current.value + \" \" + startTimeTimeRef.current.value);\r\n    startTime = (startTime.getMonth() + 1) + \"/\" + startTime.getDate() + \"/\" +  startTime.getFullYear() \r\n                + \" \" + startTime.getHours() + \":\" + startTime.getMinutes() + \":\" + startTime.getSeconds(); \r\n\r\n    let dueDate  = new Date( dueDateDateRef.current.value + \" \" + dueDateTimeRef.current.value);\r\n    dueDate = (dueDate.getMonth() + 1) + \"/\" + dueDate.getDate() + \"/\" +  dueDate.getFullYear() \r\n                + \" \" + dueDate.getHours() + \":\" + dueDate.getMinutes() + \":\" + dueDate.getSeconds(); \r\n   \r\n    const formData = new FormData(); \r\n\r\n    if(files){\r\n        for(let i = 0; i < files.length ; i++){\r\n          formData.append( \r\n            \"Attachment\" + i+1, \r\n            files[i], \r\n            files[i].name \r\n          );\r\n        }\r\n    }   \r\n     formData.append(\"CreatedBy\", userId); \r\n     formData.append(\"AssignedTo\", assignee);\r\n     formData.append(\"Title\", title); \r\n     formData.append(\"Description\", description); \r\n     formData.append(\"AdditionalDeta\", additionalDetails); \r\n     formData.append(\"StartTime\", startTime ); \r\n     formData.append(\"DueDate\",  dueDate ); \r\n     formData.append(\"Status\", \"N\"); \r\n\r\n     \r\n     //setTitle(\"\");\r\n\r\n     addNewIncident(formData);\r\n    // setTitle(\"\");\r\n     //setDescription(\"\");     \r\n\r\n  }; \r\n\r\n  if(AddNewIncidentStatus){\r\n    return <Redirect to='/incidentListing' /> \r\n  }\r\n \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Add new Incident\"} />\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 l10 offset-l1\">\r\n                <form>\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 l6\">\r\n                      <div className=\"input-field \">\r\n                        <input\r\n                        className=\"validate\"\r\n                          required\r\n                          type=\"text\"\r\n                          id=\"title\"\r\n                          value={title}\r\n                          onChange={(e) => setTitle(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"title\">Title</label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s12 l6\">                    \r\n                      <input\r\n                        readOnly                    \r\n                        required\r\n                        type=\"text\"\r\n                        className=\"dropdown-trigger validate\"\r\n                        id=\"assignee\"\r\n                        data-target=\"dropdown1\"\r\n                        placeholder=\"\"\r\n                        ref={assigneeRef}\r\n                        value={assigneeName}\r\n                      />                    \r\n                      \r\n                       <label htmlFor=\"assignee\">Assignee </label> \r\n                    </div>\r\n                      <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <li>\r\n                          <input type=\"text\"  placeholder=\"Search Assignee\" onChange={searchAssignee}     />\r\n                        </li>\r\n                        {!assigneeList? null : assigneeList.map((user) => {\r\n                          return (\r\n                            <li  key={user.Id} onClick= {()=>assigneeSelected(user.Id)}>\r\n                              <a className=\"indigo-text\" href=\"#!\">  {user.FirstName + \" \" + user.LastName}    </a>\r\n                            </li>\r\n                          );\r\n                        })}\r\n                      </ul>                   \r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                    <textarea\r\n                      required\r\n                      value={description}\r\n                      id=\"description\"\r\n                      className=\"materialize-textarea validate\"\r\n                      onChange={(e) => setDescription(e.target.value)}\r\n                    ></textarea>\r\n                    <label htmlFor=\"description\" className=\"\">\r\n                      Description\r\n                    </label>\r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                    <textarea\r\n                      value={additionalDetails}\r\n                      id=\"additionalDetails\"\r\n                      className=\"materialize-textarea\"\r\n                      onChange={(e) => setAdditionalDetails(e.target.value)}\r\n                    ></textarea>\r\n                    <label htmlFor=\"additionalDetails\" className=\"\">\r\n                      Additional Details\r\n                    </label>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"startTimeDate\"\r\n                        className=\"datepicker validate\"\r\n                        ref={startTimeDateRef}\r\n                      />\r\n                      <label htmlFor=\"startTimeDate\" className=\"\">\r\n                        When the problem started (Pick Date)\r\n                      </label>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"startTimeTime\"\r\n                        className=\"timepicker validate\"\r\n                        ref={startTimeTimeRef}\r\n                      />\r\n                      <label htmlFor=\"startTimeime\" className=\"\">\r\n                        When the problem started (Pick Time)\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"dueDateDate\"\r\n                        className=\"datepicker validate\"\r\n                        ref={dueDateDateRef}\r\n                      />\r\n                      <label htmlFor=\"dueDateDate\" className=\"\">\r\n                        Due Date (Pick Date)\r\n                      </label>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"dueDateTime\"\r\n                        className=\"timepicker validate\" \r\n                        ref={dueDateTimeRef}\r\n                      />\r\n                      <label htmlFor=\"dueDateTime\" className=\"\">\r\n                        Due Date (Pick Time)\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"file-field input-field\">\r\n                    <div className=\"btn indigo darken-2\">\r\n                      <i className=\"material-icons \">attachment</i>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"attachment\"\r\n                        multiple\r\n                        onChange={onFileChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                      <input\r\n                        className=\"file-path validate\"\r\n                        type=\"text\"\r\n                        placeholder=\"Upload upto 3 files\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-field\">\r\n                      <p className=\"red-text center\">{formError ? formError : \"\" }</p>\r\n                      <p className=\"red-text center\">{addNewError}</p>\r\n                      \r\n                  </div>\r\n\r\n                  \r\n                  <div className=\"input-field \">\r\n                    <button\r\n                      className=\"btn green darken-2 left\"\r\n                      onClick={saveClick}\r\n                    >\r\n                      <span>Save</span>\r\n                      <i className=\"material-icons right\">save</i>\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn yellow darken-4 left\"\r\n                      onClick={cancelClick}\r\n                    >\r\n                      <span>Cancel</span>\r\n                      <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{\r\n        allAssignees : state.users.users,\r\n        user_Name :state.userLogin.user_Name, // Logged in User's name\r\n        userId :state.userLogin.userId,  // logged in User Id      \r\n        addNewError :state.incidents.AddNewIncidentError, \r\n        AddNewIncidentStatus :state.incidents.AddNewIncidentStatus \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getAllAssignees: () => dispatch(allUsers()),\r\n        addNewIncident : (formData) => dispatch(addNewIncident(formData))\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNew);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\UsersList.js",["148"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Pages from '../Pages'\r\nimport User from './User'\r\nimport PageActions from \"../PageActions\";\r\nimport { userssWithPage } from \"../../store/actions/usersActions\";\r\nimport {  useHistory  } from 'react-router-dom'\r\n\r\n function UsersList(props) {\r\n\r\n    const [PageNumber, setPageNumber] = useState(1);\r\n    const [PageSize, setPageSize] = useState(5);\r\n    const [Search, setSearch] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n    \r\n    useEffect(() => {\r\n        const parameters = {\r\n            PageNumber : PageNumber,\r\n            PageSize : PageSize,\r\n            Search : Search\r\n        }        \r\n        props.userssWithPage(parameters);\r\n        return () => {\r\n            \r\n        }\r\n    }, [PageNumber, PageSize, Search])\r\n\r\n    const searchTextChange =   (text) => {      \r\n            setSearch(text);\r\n            setPageNumber(1);\r\n    }\r\n\r\n    const addNewClick = ()=>{\r\n      let path = '/AddUser';      \r\n      history.push(path);\r\n    }\r\n    \r\n    if( !props.Users){\r\n      return (\r\n        <div class=\"preloader-wrapper container big active page-loader\">\r\n        <div class=\"spinner-layer spinner-blue-only\">\r\n          <div class=\"circle-clipper left\">\r\n            <div class=\"circle\"></div>\r\n          </div><div class=\"gap-patch\">\r\n            <div class=\"circle\"></div>\r\n          </div><div class=\"circle-clipper right\">\r\n            <div class=\"circle\"></div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n      )\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Users\"} /> \r\n\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n\r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">                \r\n                  <input type=\"text\"  value={Search}  onChange={(e) => searchTextChange(e.target.value)} />\r\n                  <label htmlFor=\"search\">Search</label>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">              \r\n                  <button className=\"btn green darken-4 right\" onClick={()=>addNewClick()} >\r\n                    <span>Add New</span>\r\n                    <i className=\"material-icons right\">create</i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col s12 l12\">\r\n                <table className=\"responsive-table highlight incidentsTbl\">\r\n                  <thead>\r\n                    <tr className=\"header\" data-target=\"blue\">\r\n                      <th>First Name</th>\r\n                      <th>Last Name</th>\r\n                      <th>Email</th>                      \r\n                      <th>Created Date</th>                     \r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  {\r\n                   !props.Users? null : props.Users.map(user=>{\r\n                          return (\r\n                            <User key={user.Id} user= {user} />                          )\r\n                      })\r\n                  }           \r\n                  </tbody>\r\n                </table>\r\n                <Pages  TotalPages={props.TotalUsers} PostsPerPage={PageSize} setPageNumber={setPageNumber} setPageSize={setPageSize} search={Search} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        Users : state.users.UsersList,\r\n        TotalUsers : state.users.TotalUsers     \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        userssWithPage: (parameters) => dispatch(userssWithPage(parameters))\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(UsersList);","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\User.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\AddUser.js",["149","150"],"import {React , useRef, useEffect, useState} from 'react';\r\nimport PageActions from \"../PageActions\";\r\nimport M from 'materialize-css';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { addNewUser } from '../../store/actions/usersActions';\r\n\r\n\r\n function AddUser({addNewUser}){\r\n\r\n\r\n    const history = useHistory();\r\n\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [lastName, setLastName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");  \r\n    const [phone, setPhone] = useState(\"\");  \r\n    const [profilePic , setProfilePic] = useState(null);\r\n\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    useEffect(() => {     \r\n       \r\n      \r\n    }, []);\r\n\r\n   const onFileChange = (event) => {    \r\n     \r\n    setProfilePic(event.target.files);\r\n   };\r\n\r\n   const cancelClick = (event) => {\r\n     event.preventDefault();\r\n     history.goBack();\r\n     //console.log(history);\r\n   };\r\n\r\n   const validateForm = () => {\r\n\r\n    if(firstName === \"\" || lastName === \"\" || email === \"\"  || phone === \"\" )\r\n        return false;\r\n    return true;\r\n\r\n   }\r\n\r\n   const saveClick = (event) => {\r\n    event.preventDefault();     \r\n    if(!validateForm()){\r\n      setFormError(\"Please complete required fields before saving.\")\r\n      return;\r\n    }\r\n    \r\n    setFormError(\"\");\r\n   \r\n   \r\n    const formData = new FormData(); \r\n\r\n    if(profilePic){\r\n       \r\n          formData.append( \r\n            \"Attachment1\", \r\n            profilePic[0], \r\n            profilePic[0].name \r\n          );\r\n          }\r\n     formData.append(\"FirstName\", firstName); \r\n     formData.append(\"LastName\", lastName);\r\n     formData.append(\"Email\", email); \r\n     formData.append(\"Phone\", email); \r\n     addNewUser(formData);\r\n  }; \r\n\r\n \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Add new User\"} />\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 l10 offset-l1\">\r\n                <form>\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 l6\">\r\n                      <div className=\"input-field \">\r\n                        <input\r\n                         className=\"validate\"\r\n                          required\r\n                          type=\"text\"\r\n                          id=\"firstName\"\r\n                          value={firstName}\r\n                          onChange={(e) => setFirstName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s12 l6\">                    \r\n                        <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"lastName\"\r\n                            value={lastName}\r\n                            onChange={(e) => setLastName(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"lastName\">Last Name</label> \r\n                    </div>\r\n                                      \r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"email\">Email</label> \r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"phone\"\r\n                            value={phone}\r\n                            onChange={(e) => setPhone(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"phone\">Phone</label> \r\n                  </div>\r\n\r\n                  <div className=\"file-field input-field\">\r\n                    <div className=\"btn indigo darken-2\">\r\n                      <i className=\"material-icons \">attachment</i>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"attachment\"                        \r\n                        onChange={onFileChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                      <input\r\n                        className=\"file-path validate\"\r\n                        type=\"text\"\r\n                        placeholder=\"Upload profile picture\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-field\">\r\n                      <p className=\"red-text center\">{formError ? formError : \"\" }</p>\r\n                  </div>\r\n\r\n                  \r\n                  <div className=\"input-field \">\r\n                    <button\r\n                      className=\"btn green darken-2 left\"\r\n                      onClick={saveClick}\r\n                    >\r\n                      <span>Save</span>\r\n                      <i className=\"material-icons right\">save</i>\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn yellow darken-4 left\"\r\n                      onClick={cancelClick}\r\n                    >\r\n                      <span>Cancel</span>\r\n                      <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{\r\n        allAssignees : state.users.users,\r\n        user_Name :state.userLogin.user_Name, // Logged in User's name\r\n        userId :state.userLogin.userId,  // logged in User Id       \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {       \r\n        addNewUser : (formData) => dispatch(addNewUser(formData))\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUser);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\IncidentDetails.js",["151","152","153","154","155"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport PageActions from \"../PageActions\";\r\nimport M from \"materialize-css\";\r\nimport { connect } from \"react-redux\";\r\nimport { allUsers } from \"../../store/actions/usersActions\";\r\nimport { getIncidentById, updateIncident, deleteAttachment } from \"../../store/actions/incidentsActions\";\r\nimport Comments from \"./Comments\";\r\nimport \"../../styles/incidentDetails.css\";\r\nimport moment from \"moment\";\r\nimport { incidentsUrls } from \"../../api/apiURLs\";\r\n\r\nfunction IncidentDetails({\r\n  match,\r\n  incidentData,\r\n  getIncidentById,\r\n  allAssignees,\r\n  getAllAssignees,\r\n  userId,\r\n  updateIncident,\r\n  deleteAttachment\r\n  \r\n}) {\r\n \r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [additionalDetails, setAdditionalDetails] = useState(\"\"); \r\n  const [assignee, setAssignee] = useState(null);\r\n  const [status, setStatus] = useState('N');\r\n  const [dueDate, setDueDate] = useState('');\r\n  const [startTime, setStartTime] = useState('');\r\n  \r\n  const [assigneeName, setAssigneeName] = useState(\"\");\r\n  const [assigneeList, setAssigneeList] = useState(allAssignees);\r\n\r\n  const [editTitle, setEditTitle] = useState(false);\r\n  const [editDescription, setEditDescription] = useState(false);\r\n  const [editAdditionalDetails, setEditAdditionalDetails] = useState(false);\r\n  const [editDueDate, setEditDueDate] = useState(false);\r\n  const [editStartDate, setEditStartDate] = useState(false);\r\n\r\n  const assigneeRef = useRef();\r\n  const statusRef = useRef();\r\n  const dueDateTimeRef= useRef();\r\n  const dueDateDateRef= useRef();\r\n  const startTimeTimeRef = useRef();\r\n  const startTimeDateRef = useRef();\r\n\r\n  useEffect(() => {\r\n    setAssigneeList(allAssignees);\r\n  }, [allAssignees]);\r\n\r\n  useEffect(() => {\r\n    setMaterializeCSS();\r\n  }, [incidentData]);\r\n\r\n  useEffect(() => {    \r\n    getIncidentById(match.params.id);\r\n    getAllAssignees();\r\n  }, []);\r\n\r\n  useEffect(() => {  // To update Fields\r\n    if(incidentData){\r\n      setTitle(incidentData.Title);\r\n      setDescription(incidentData.Description);\r\n      setAdditionalDetails(incidentData.AdditionalData); \r\n      let currentAssignee =  allAssignees.find((assignee) => {\r\n        return assignee.Id === incidentData.AssignedTo;\r\n      });\r\n      setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);  \r\n      setStatus(incidentData.Status);\r\n      setDueDate(incidentData.DueDate);\r\n      setStartTime(incidentData.StartTime);\r\n    }\r\n  }, [incidentData]);\r\n\r\n  const setMaterializeCSS = () => {\r\n    var options = {\r\n      closeOnClick: false,\r\n    };\r\n    M.Dropdown.init(assigneeRef.current, options);\r\n    M.FormSelect.init(statusRef.current);\r\n    M.Datepicker.init(startTimeDateRef.current);\r\n    M.Timepicker.init(startTimeTimeRef.current);\r\n    M.Datepicker.init(dueDateDateRef.current);\r\n    M.Timepicker.init(dueDateTimeRef.current);\r\n  }\r\n\r\n  const getNameById = (id) => {   \r\n    let user = allAssignees.find((assignee) => {\r\n      return assignee.Id === id;\r\n    });   \r\n    if(!user){    \r\n      return id;\r\n    }\r\n    return user.FirstName + \" \" + user.LastName\r\n  }\r\n\r\n  const assigneeSelected = (userId) => {\r\n    let currentAssignee = allAssignees.find((assignee) => {\r\n      return assignee.Id === userId;\r\n    });\r\n\r\n    setAssignee(userId);\r\n    setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);\r\n    updateIncidentByField(\"AssignedTo\" , userId);\r\n    var assigneeDropdown = M.Dropdown.getInstance(assigneeRef.current);\r\n    assigneeDropdown.close();\r\n  };\r\n\r\n  const searchAssignee = (event) => {\r\n    let newList = [];\r\n    if (event.target.value !== \"\")\r\n      newList = allAssignees.filter((assignee) => {\r\n        return (\r\n          assignee.FirstName.toUpperCase().startsWith(\r\n            event.target.value.toUpperCase()\r\n          ) ||\r\n          assignee.LastName.toUpperCase().startsWith(\r\n            event.target.value.toUpperCase()\r\n          )\r\n        );\r\n      });\r\n\r\n    if (newList !== undefined && newList.length !== 0) {\r\n      //check if there is atlease one assignee\r\n      newList = [].concat(newList);\r\n    } else {\r\n      //if search found nothing, show all assignees\r\n      newList = allAssignees.slice(0, allAssignees.length);\r\n    }\r\n    setAssigneeList(newList);\r\n  };\r\n\r\n\r\n  if (allAssignees && !assigneeList) {\r\n    setAssigneeList(allAssignees);\r\n  }\r\n\r\n  const downloadFile = (file) => {\r\n    console.log(file);\r\n    window.open(\r\n          incidentsUrls.downloadFileUrl\r\n           + \"type=incident\"\r\n           + \"&commentId=\" + \"\" \r\n           + \"&incidentId=\" + incidentData.Id\r\n           + \"&filename=\" + file.FileName\r\n           + \"&contentType=\" + file.ContentType\r\n    ); \r\n  }\r\n\r\n  const titleEditClick = () =>{\r\n    setEditTitle(!editTitle);\r\n    setTitle(incidentData.Title);\r\n  }\r\n  const titleEditCancel = () =>{\r\n    setTitle(incidentData.Title);\r\n    setEditTitle(false);\r\n  }\r\n\r\n  const titleEditSave = () =>{\r\n    if(title.trim() === \"\"){\r\n      alert(\"Title cannot be empty.\");\r\n      setTitle(incidentData.Title);\r\n      return;\r\n    }\r\n    updateIncidentByField(\"Title\" , title.trim());\r\n    setEditTitle(false);\r\n  }\r\n\r\n\r\n  const descriptionEditClick = () =>{\r\n    setEditDescription(!editDescription);\r\n    setDescription(incidentData.Description);\r\n   \r\n  }\r\n  const descriptionEditCancel = () =>{\r\n    setDescription(incidentData.Description);\r\n    setEditDescription(false);\r\n  }\r\n\r\n  const descriptionEditSave = () =>{\r\n    if(description.trim() === \"\"){\r\n      alert(\"Description cannot be empty.\");\r\n      setDescription(incidentData.Description);\r\n      return;\r\n    }\r\n    updateIncidentByField(\"Description\" , description.trim());\r\n    setEditDescription(false);\r\n  }\r\n\r\n\r\n  const additionalDetailsEditClick = () =>{\r\n    setEditAdditionalDetails(!editAdditionalDetails);\r\n    setAdditionalDetails(incidentData.AdditionalData);\r\n  }\r\n  const additionalDetailsEditCancel = () =>{\r\n    setAdditionalDetails(incidentData.AdditionalData);\r\n    setEditAdditionalDetails(false);\r\n  }\r\n\r\n  const additionalDetailsEditSave = () =>{\r\n    updateIncidentByField(\"AdditionalData\" , additionalDetails.trim());\r\n    setEditAdditionalDetails(false);    \r\n  }\r\n\r\n\r\n  const dueDateEditClick = () =>{\r\n    setEditDueDate(!editDueDate);\r\n    setMaterializeCSS();\r\n  }\r\n  const dueDateEditCancel = () =>{\r\n    setEditDueDate(false);\r\n  }\r\n\r\n  const dueDateEditSave = () =>{\r\n    \r\n    if ( dueDateDateRef.current.value === \"\" ||  dueDateTimeRef.current.value === \"\" ) {\r\n      alert(\"Please select date and time.\");\r\n      setEditDueDate(false);\r\n      return;\r\n    } \r\n\r\n    let dueDateTemp  = new Date( dueDateDateRef.current.value + \" \" + dueDateTimeRef.current.value);\r\n    dueDateTemp = (dueDateTemp.getMonth() + 1) + \"/\" + dueDateTemp.getDate() + \"/\" +  dueDateTemp.getFullYear() \r\n                + \" \" + dueDateTemp.getHours() + \":\" + dueDateTemp.getMinutes() + \":\" + dueDateTemp.getSeconds(); \r\n      updateIncidentByField(\"DueDate\" , dueDateTemp);     \r\n      setEditDueDate(false);\r\n      setDueDate(dueDateTemp);\r\n   }\r\n\r\n\r\n  const startDateEditClick = () =>{\r\n    setEditStartDate(!editStartDate);\r\n    setMaterializeCSS();\r\n  }\r\n  const startDateEditCancel = () =>{\r\n    setEditStartDate(false);\r\n  }\r\n\r\n  const startDateEditSave = () =>{\r\n  \r\n   if ( startTimeDateRef.current.value === \"\" ||  startTimeTimeRef.current.value === \"\" ) {\r\n    alert(\"Please select date and time.\");\r\n    setEditStartDate(false);\r\n    return;\r\n  } \r\n\r\n  let startTimeTemp  = new Date( startTimeDateRef.current.value + \" \" + startTimeTimeRef.current.value);\r\n  startTimeTemp = (startTimeTemp.getMonth() + 1) + \"/\" + startTimeTemp.getDate() + \"/\" +  startTimeTemp.getFullYear() \r\n                + \" \" + startTimeTemp.getHours() + \":\" + startTimeTemp.getMinutes() + \":\" + startTimeTemp.getSeconds();  \r\n    updateIncidentByField(\"StartTime\" , startTimeTemp);   \r\n    setEditStartDate(false); \r\n    setStartTime(startTimeTemp);  \r\n  }\r\n\r\n  const updateIncidentByField = (field , value) => {    \r\n    let parameters = {\r\n      IncidentId : incidentData.Id,\r\n      Parameter : field,\r\n      Value : value,\r\n      UserId : userId\r\n    };\r\n    updateIncident(parameters); // Calling action here\r\n  }\r\n\r\n\r\n  const statusChanged = (e) => {\r\n    setStatus(e.target.value);\r\n    updateIncidentByField(\"Status\" , e.target.value);\r\n  }\r\n\r\n\r\n  const deleteIncidentAttachment = (file) => {        \r\n    if(window.confirm(\"Are you sure you want to delete this attachment.\" + file.FileName)){\r\n      deleteAttachment(\"incicent\" , userId, incidentData.Id , file);\r\n    }      \r\n   }\r\n\r\n  if (!incidentData || !allAssignees) {    \r\n    return  ( \r\n     \r\n              <div class=\"preloader-wrapper container big active page-loader\">\r\n                <div class=\"spinner-layer spinner-blue-only\">\r\n                  <div class=\"circle-clipper left\">\r\n                    <div class=\"circle\"></div>\r\n                  </div><div class=\"gap-patch\">\r\n                    <div class=\"circle\"></div>\r\n                  </div><div class=\"circle-clipper right\">\r\n                    <div class=\"circle\"></div>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n          );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <link rel=\"stylesheet\" href=\"./Styles/incidentDetails.css\"></link>\r\n      <PageActions Title={\"Incident Details\"} />\r\n      <section>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col s12 l12 \">\r\n              <div className=\"row\">\r\n                <div className=\"col s9\">\r\n                  {!editTitle ? (\r\n                    <h5 className=\"left indigo-text darken-4\">\r\n                      {\" \"}\r\n                      {/* Title  */}\r\n                      {title}\r\n                      <i\r\n                        className=\"material-icons actions-icon\"\r\n                        onClick={titleEditClick}\r\n                      >\r\n                        edit\r\n                      </i>\r\n                    </h5>\r\n                  ) : (\r\n                    <div className=\"input-field\">\r\n                      {\" \"}\r\n                      {/* Title Edit */}\r\n                      <input\r\n                        type=\"text\"\r\n                        value={title}\r\n                        onChange={(e) => setTitle(e.target.value)}\r\n                      />\r\n                      <button\r\n                        title=\"Save\"\r\n                        className=\"btn green darken-2 right updateBtn\"\r\n                        onClick={titleEditSave}\r\n                      >\r\n                        <i className=\"actions-icon material-icons\">check</i>\r\n                      </button>\r\n                      <button\r\n                        title=\"Cancel\"\r\n                        className=\"btn yellow darken-2 right updateBtn\"\r\n                        onClick={titleEditCancel}\r\n                      >\r\n                        <i className=\"actions-icon material-icons\">cancel</i>\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className=\"col s3\">\r\n                  {\" \"}\r\n                  {/* IM Major Action Edit */}\r\n                  <h5>\r\n                    {\" \"}\r\n                    <span\r\n                      className=\"im-createTime black-text \"\r\n                      title={moment(incidentData.CreatedAT).format(\r\n                        \"MMMM DD YYYY, h:mm:ss a\"\r\n                      )}\r\n                    >\r\n                      Created by <a className=\"username\"> {getNameById(incidentData.CreatedBy)} </a>{\" \"}\r\n                      - {moment(incidentData.CreatedAT).fromNow()}\r\n                    </span>\r\n                  </h5>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div className=\"col s12 l6\">\r\n                  <p className=\"heading left-align indigo-text darken-4\">\r\n                    {\" \"}\r\n                    {/* Description  */}\r\n                    Description :\r\n                    <i\r\n                      className=\"inline-icon material-icons actions-icon\"\r\n                      onClick={descriptionEditClick}\r\n                    >\r\n                      edit\r\n                    </i>\r\n                  </p>\r\n                  {!editDescription ? (\r\n                    <>\r\n                      <div className=\"input-field\">\r\n                        <p className=\"darkslategrayText bigTextScroll\">\r\n                          {description}\r\n                        </p>\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <div className=\"input-field\">\r\n                        {\" \"}\r\n                        {/* Description Edit */}\r\n                        <textarea\r\n                          id=\"description\"\r\n                          className=\"materialize-textarea\"\r\n                          value={description}\r\n                          onChange={(e) => setDescription(e.target.value)}\r\n                        ></textarea>\r\n                        <button\r\n                          title=\"Save\"\r\n                          className=\"btn green darken-2 right updateBtn\"\r\n                          onClick={descriptionEditSave}\r\n                        >\r\n                          <i className=\"actions-icon material-icons\">check</i>\r\n                        </button>\r\n                        <button\r\n                          title=\"Cancel\"\r\n                          className=\"btn yellow darken-2 right updateBtn\"\r\n                          onClick={descriptionEditCancel}\r\n                        >\r\n                          <i className=\"actions-icon material-icons\">cancel</i>\r\n                        </button>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                  <p className=\"heading left-align indigo-text darken-4\">\r\n                    {\" \"}\r\n                    {/*   Additional Details */}\r\n                    Additional Details :\r\n                    <i\r\n                      className=\"inline-icon material-icons\"\r\n                      onClick={additionalDetailsEditClick}\r\n                    >\r\n                      edit\r\n                    </i>\r\n                  </p>\r\n                  {!editAdditionalDetails ? (\r\n                    <div className=\"input-field\">\r\n                      <p className=\"darkslategrayText bigTextScroll\">\r\n                        {additionalDetails}\r\n                      </p>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"input-field\">\r\n                      {\" \"}\r\n                      {/*   Additional Details Edit */}\r\n                      <textarea\r\n                        className=\"materialize-textarea\"\r\n                        value={additionalDetails}\r\n                        onChange={(e) => setAdditionalDetails(e.target.value)}\r\n                      ></textarea>\r\n                      <button\r\n                        title=\"Save\"\r\n                        className=\"btn green darken-2 right updateBtn\"\r\n                        onClick={additionalDetailsEditSave}\r\n                      >\r\n                        <i className=\"actions-icon material-icons\">check</i>\r\n                      </button>\r\n                      <button\r\n                        title=\"Cancel\"\r\n                        className=\"btn yellow darken-2 right updateBtn\"\r\n                        onClick={additionalDetailsEditCancel}\r\n                      >\r\n                        <i className=\"actions-icon material-icons\">cancel</i>\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                  <p className=\"heading left-align indigo-text darken-4\">\r\n                    {\" \"}\r\n                    {/*  Attachments */}\r\n                    <i className=\"material-icons inline-icon\">attachment</i>\r\n                    Attachments:\r\n                  </p>\r\n\r\n                  <div className=\"input-field\">\r\n                    <ul className=\"input-field incidentFiles\">\r\n                    {!incidentData.Attachments? null : incidentData.Attachments.map(file => {\r\n                      return (\r\n                        <li key={file.Id} className=\"center indigo-text darken-4\">\r\n                            <i\r\n                              title=\"Remove\"\r\n                              className=\"actions-icon material-icons red-text inline-icon\"\r\n                              onClick={() => deleteIncidentAttachment(file)}\r\n                            >\r\n                              cancel\r\n                            </i>\r\n                            <span title={ file.FileName } onClick={() => downloadFile(file)}> \r\n                                {file.FileName.length > 35 ? file.FileName.slice(0,35) + \"...\" :  file.FileName } \r\n                            </span>\r\n                      </li>\r\n                      )\r\n\r\n                    }) }\r\n\r\n                    </ul>\r\n                  </div>\r\n\r\n                  <Comments\r\n                    userId={userId}\r\n                    incidentId={incidentData.Id}\r\n                    comments={incidentData.Comments}                    \r\n                    getNameById = {getNameById}              \r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col s12 l5 offset-l1  ID-dropdowns\">\r\n                  <table>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Assignee\r\n                          </p>\r\n                        </td>\r\n                        <td>\r\n                          <input\r\n                            readOnly\r\n                            required\r\n                            type=\"text\"\r\n                            className=\"dropdown-trigger  align-right\"\r\n                            id=\"assignee\"\r\n                            data-target=\"dropdown1\"\r\n                            placeholder=\"\"\r\n                            ref={assigneeRef}\r\n                            value={assigneeName}\r\n                          />\r\n\r\n                          <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                            <li>\r\n                              <input\r\n                                type=\"text\"\r\n                                placeholder=\"Search Assignee\"\r\n                                onChange={searchAssignee}\r\n                              />\r\n                            </li>\r\n                            {!assigneeList\r\n                              ? null\r\n                              : assigneeList.map((user) => {\r\n                                  return (\r\n                                    <li\r\n                                      key={user.Id}\r\n                                      onClick={() => assigneeSelected(user.Id)}\r\n                                    >\r\n                                      <a className=\"indigo-text\" href=\"#!\">\r\n                                        {user.FirstName + \" \" + user.LastName}\r\n                                      </a>\r\n                                    </li>\r\n                                  );\r\n                                })}\r\n                          </ul>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Status{\" \"}\r\n                          </p>\r\n                        </td>\r\n                        <td>\r\n                          <select\r\n                            ref={statusRef}\r\n                            value={status}\r\n                            onChange={statusChanged}\r\n                          >\r\n                            <option value=\"N\" disabled selected>\r\n                              New\r\n                            </option>\r\n                            <option value=\"I\">In Progress</option>\r\n                            <option value=\"C\">Closed</option>\r\n                            <option value=\"A\">Approved</option>\r\n                          </select>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Due Date\r\n                            <i\r\n                              className=\"actions-icon inline-icon material-icons\"\r\n                              onClick={dueDateEditClick}\r\n                            >\r\n                              edit\r\n                            </i>\r\n                          </p>\r\n                        </td>\r\n                        <td>\r\n                          {!editDueDate ? (\r\n                            <p\r\n                              title={moment(dueDate).format(\r\n                                \"MMMM DD YYYY, h:mm a\"\r\n                              )}\r\n                            >\r\n                              {moment(dueDate).fromNow()}\r\n                            </p>\r\n                          ) : null}\r\n                          <div className={editDueDate ? \"\" : \"hide\"}>\r\n                            <div className=\"input-field \">\r\n                              <input\r\n                                type=\"text\"\r\n                                id=\"dueDateDate\"\r\n                                className=\"datepicker\"\r\n                                ref={dueDateDateRef}\r\n                              />\r\n                              <label for=\"dueDateDate\" className=\"\">\r\n                                Pick Date\r\n                              </label>\r\n                            </div>\r\n                            <div className=\"input-field \">\r\n                              <input\r\n                                type=\"text\"\r\n                                id=\"dueDateTime\"\r\n                                className=\"timepicker\"\r\n                                ref={dueDateTimeRef}\r\n                              />\r\n                              <label for=\"dueDateTime\" className=\"\">\r\n                                Pick Time\r\n                              </label>\r\n                            </div>\r\n                            <button\r\n                              title=\"Save\"\r\n                              className=\"btn green darken-2 right updateBtn\"\r\n                              onClick={dueDateEditSave}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                check\r\n                              </i>\r\n                            </button>\r\n                            <button\r\n                              title=\"Cancel\"\r\n                              className=\"btn yellow darken-2 right updateBtn\"\r\n                              onClick={dueDateEditCancel}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                cancel\r\n                              </i>\r\n                            </button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Start Time\r\n                            <i\r\n                              className=\"actions-icon inline-icon material-icons\"\r\n                              onClick={startDateEditClick}\r\n                            >\r\n                              edit\r\n                            </i>\r\n                          </p>\r\n                        </td>\r\n                        <td>\r\n                          {!editStartDate ? (\r\n                            <p\r\n                              title={moment(startTime).format(\r\n                                \"MMMM DD YYYY, h:mm a\"\r\n                              )}\r\n                            >\r\n                              {moment(startTime).fromNow()}\r\n                            </p>\r\n                          ) : null}\r\n                          <div className={editStartDate ? \"\" : \"hide\"}>\r\n                            <div className=\"input-field\">\r\n                              <input\r\n                                type=\"text\"\r\n                                id=\"startTimeDate\"\r\n                                className=\"datepicker\"\r\n                                ref={startTimeDateRef}\r\n                              />\r\n                              <label for=\"startTimeDate\" className=\"\">\r\n                                Pick Date\r\n                              </label>\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                              <input\r\n                                readOnly\r\n                                type=\"text\"\r\n                                id=\"startTimeTime\"\r\n                                className=\"timepicker\"\r\n                                ref={startTimeTimeRef}\r\n                              />\r\n                              <label for=\"startTimeime\" className=\"\">\r\n                                Pick Time\r\n                              </label>\r\n                            </div>\r\n                            <button\r\n                              title=\"Save\"\r\n                              className=\"btn green darken-2 right updateBtn\"\r\n                              onClick={startDateEditSave}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                check\r\n                              </i>\r\n                            </button>\r\n                            <button\r\n                              title=\"Cancel\"\r\n                              className=\"btn yellow darken-2 right updateBtn\"\r\n                              onClick={startDateEditCancel}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                cancel\r\n                              </i>\r\n                            </button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id       \r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllAssignees: () => dispatch(allUsers()),\r\n    getIncidentById: (incidentId) => dispatch(getIncidentById(incidentId)), \r\n    updateIncident: (parameters) => dispatch(updateIncident(parameters)),   \r\n    deleteAttachment : (type, userid, incidentId , file) => dispatch(deleteAttachment(type, userid, incidentId ,file))    \r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IncidentDetails);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\Comments.js",["156","157","158"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport moment from \"moment\";\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport Comment from \"./Comment\";\r\nimport { connect } from \"react-redux\";\r\nimport {  addNewComment } from \"../../store/actions/incidentsActions\";\r\n\r\nfunction Comments({\r\n  incidentId,\r\n  comments,\r\n  userId,\r\n  getNameById,\r\n  addNewComment\r\n}) {\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [newCommentFiles, setNewCommentFiles] = useState(null);\r\n\r\n  const newCommentFilesRef = useRef();\r\n  const history = useHistory();\r\n  //console.log(history);\r\n  const onFileChange = (event) => {\r\n    setNewCommentFiles(event.target.files);\r\n  };\r\n\r\n  const saveComment = () => {\r\n    if (newComment.trim() === \"\") {\r\n      alert(\"Please add comment first.\");\r\n      return;\r\n    }\r\n    const formData = new FormData();\r\n\r\n    if (newCommentFiles) {\r\n      for (let i = 0; i < newCommentFiles.length; i++) {\r\n        formData.append(\r\n          \"Attachment\" + i + 1,\r\n          newCommentFiles[i],\r\n          newCommentFiles[i].name\r\n        );\r\n      }\r\n    }\r\n    formData.append(\"CommentText\", newComment.trim());\r\n    formData.append(\"IncidentId\", incidentId);\r\n    formData.append(\"UserId\", userId);\r\n    addNewComment(formData);\r\n\r\n    setNewComment(\"\");\r\n    setNewCommentFiles(null);\r\n    newCommentFilesRef.current.value = \"\";\r\n    //history.push(history.location.pathname);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5 className=\"heading left-align\">Comments</h5>\r\n      <p className=\"all-comments-box\">\r\n        {!comments ? (\r\n          <h1>No Comments</h1>\r\n        ) : (\r\n          comments.map((comment) => {\r\n            return (\r\n              <Comment\r\n                key={comment.Id}\r\n                comment={comment}\r\n                getNameById={getNameById}\r\n                incidentId={incidentId}\r\n                userId={userId}               \r\n              />\r\n            );\r\n          })\r\n        )}{\" \"}\r\n        {/* end of comments loop */}\r\n      </p>\r\n\r\n      <h6 className=\"heading indigo-text darken-4 left-align\">Add Comment</h6>\r\n      <div className=\"input-field\">\r\n        <textarea\r\n          id=\"comment\"\r\n          className=\"materialize-textarea\"\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n        ></textarea>\r\n        <label for=\"comment\" className=\"\">\r\n          Comment\r\n        </label>\r\n      </div>\r\n      <div className=\"file-field input-field\">\r\n        <div className=\"btn indigo darken-2\">\r\n          <i className=\"material-icons \">attachment</i>\r\n          <input type=\"file\" id=\"attachment\" multiple onChange={onFileChange} />\r\n        </div>\r\n        <div className=\"file-path-wrapper\">\r\n          <input\r\n            className=\"file-path validate\"\r\n            ref={newCommentFilesRef}\r\n            type=\"text\"\r\n            placeholder=\"Upload upto 3 files\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"input-field center \">\r\n        <button\r\n          className=\"left btn green darken-2 updateBtn\"\r\n          onClick={saveComment}\r\n        >\r\n          <span>Add</span>\r\n          <i className=\"material-icons right\">save</i>\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id       \r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {    \r\n    addNewComment: (formData) => dispatch(addNewComment(formData))    \r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comments);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\Comment.js",["159","160","161","162","163","164"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport moment from \"moment\";\r\nimport { deleteAttachment, updateComment , deleteComment } from \"../../store/actions/incidentsActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { incidentsUrls } from \"../../api/apiURLs\";\r\n\r\nfunction Comment({\r\n  comment,\r\n  getNameById,\r\n  incidentId,\r\n  userId,\r\n  deleteAttachment,\r\n  updateComment,\r\n  deleteComment\r\n}) {\r\n\r\n  const [editComment, setEditComment] = useState(false);\r\n  const [commentText, setCommentText] = useState(comment.CommentText);\r\n  const [files, setFiles] = useState(null);\r\n\r\n  const commentEditClick = () => {\r\n    setEditComment(!editComment);\r\n    setCommentText(comment.CommentText);\r\n  };\r\n  const commentEditCancel = () => {\r\n    setCommentText(comment.CommentText);\r\n    setEditComment(false);\r\n  };\r\n\r\n  const commentEditSave = () => {\r\n    let changedComment = {\r\n      Id : comment.Id,\r\n      IncidentId : incidentId,\r\n      UserId : userId,\r\n      CreateDate : new Date(),\r\n      CommentText : commentText,\r\n      attachments :[]\r\n    }\r\n    updateComment(changedComment);\r\n    setEditComment(false);\r\n  };\r\n\r\n  const downloadFile = (file) => {\r\n    window.open(\r\n      incidentsUrls.downloadFileUrl + \r\n      \"type=comment\" +\r\n        \"&commentId=\" +\r\n        file.CommentId +\r\n        \"&incidentId=\" +\r\n        incidentId +\r\n        \"&filename=\" +\r\n        file.FileName +\r\n        \"&contentType=\" +\r\n        file.ContentType\r\n    );\r\n  };\r\n\r\n  const deleteFile = (file) => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this attachment.\" + file.FileName\r\n      )\r\n    ) {\r\n      deleteAttachment(\"comment\", userId, incidentId, file);  \r\n    }\r\n  };\r\n\r\n  const deleteThisComment = () => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this comment.\"\r\n      )\r\n    ) {\r\n      deleteComment(comment.Id,incidentId, userId );  \r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <p className=\"commentHeader darkslategrayText\">\r\n        <a className=\"username\">{getNameById(comment.UserId)}</a> added a\r\n        comment. -{\" \"}\r\n        <span\r\n          title={moment(comment.CreateDate).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n        >\r\n          {moment(comment.CreateDate).fromNow()}{\" \"}\r\n        </span>\r\n        <span className=\"right\">\r\n          <i\r\n            title=\"Edit Comment\"\r\n            className=\"actions-icon material-icons indigo-text darken-4 inline-icon\"\r\n            onClick={commentEditClick}\r\n          >\r\n            edit\r\n          </i>\r\n          <i\r\n            title=\"Delete Comment\"\r\n            className=\"actions-icon material-icons red-text inline-icon\"\r\n            onClick = {deleteThisComment}\r\n          >\r\n            cancel\r\n          </i>\r\n        </span>\r\n      </p>\r\n      {!editComment ? (\r\n        <p className=\"darkslategrayText\">{comment.CommentText}</p>\r\n      ) : (\r\n        <p className=\"comment-edit-box\">\r\n          <textarea className=\"materialize-textarea\" onChange={(e) => setCommentText(e.target.value)}></textarea>\r\n\r\n          <i\r\n            className=\"right green-text actions-icon material-icons\"\r\n            title=\"Save\"\r\n            onClick={commentEditSave}\r\n          >\r\n            check\r\n          </i>\r\n          <i\r\n            className=\"right yellow-text text-darken-2 actions-icon material-icons\"\r\n            title=\"Cancel\"\r\n            onClick={commentEditCancel}\r\n          >\r\n            cancel\r\n          </i>\r\n        </p>\r\n      )}{\" \"}\r\n      {/* end of edit comment - if */}\r\n      <p>\r\n        <ul className=\"commentFiles\">\r\n          {!comment.attachments\r\n            ? null\r\n            : comment.attachments.map((file) => {\r\n                return (\r\n                  <li key={file.Id}>\r\n                    <a className=\"center indigo-text darken-4\">\r\n                      {!editComment ? null : (\r\n                        <i\r\n                          title=\"Remove\"\r\n                          className=\"actions-icon material-icons red-text inline-icon\"\r\n                          onClick={() => deleteFile(file)}\r\n                        >\r\n                          cancel\r\n                        </i>\r\n                      )}\r\n                      <span\r\n                        title={file.FileName}\r\n                        onClick={() => downloadFile(file)}\r\n                      >\r\n                        {file.FileName.length > 40\r\n                          ? file.FileName.slice(0, 40) + \"...\"\r\n                          : file.FileName}\r\n                      </span>\r\n                    </a>\r\n                  </li>\r\n                );\r\n              })}\r\n        </ul>\r\n      </p>\r\n      <hr></hr>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id       \r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {   \r\n    deleteAttachment : (type, userid, incidentId , file) => dispatch(deleteAttachment(type, userid, incidentId ,file)),\r\n    updateComment : (comment) => dispatch(updateComment(comment)),\r\n    deleteComment : (commentId, incidentId, userId) => dispatch(deleteComment(commentId, incidentId, userId))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\api\\apiURLs.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Notifications.js",["165"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\notificationsReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\notificationsActions.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\signalR\\Receiver.js",["166"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\signalR\\sender.js",[],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":46,"column":20,"nodeType":"173","messageId":"174","endLine":46,"endColumn":24},{"ruleId":"171","severity":1,"message":"175","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":10},{"ruleId":"171","severity":1,"message":"176","line":7,"column":11,"nodeType":"173","messageId":"174","endLine":7,"endColumn":22},{"ruleId":"177","severity":1,"message":"178","line":27,"column":11,"nodeType":"179","endLine":27,"endColumn":77},{"ruleId":"177","severity":1,"message":"180","line":42,"column":15,"nodeType":"179","endLine":42,"endColumn":18},{"ruleId":"177","severity":1,"message":"180","line":66,"column":15,"nodeType":"179","endLine":66,"endColumn":44},{"ruleId":"177","severity":1,"message":"178","line":69,"column":15,"nodeType":"179","endLine":69,"endColumn":50},{"ruleId":"181","severity":1,"message":"182","line":21,"column":8,"nodeType":"183","endLine":21,"endColumn":10,"suggestions":"184"},{"ruleId":"181","severity":1,"message":"182","line":37,"column":8,"nodeType":"183","endLine":37,"endColumn":38,"suggestions":"185"},{"ruleId":"171","severity":1,"message":"186","line":33,"column":9,"nodeType":"173","messageId":"174","endLine":33,"endColumn":23},{"ruleId":"181","severity":1,"message":"187","line":38,"column":8,"nodeType":"183","endLine":38,"endColumn":16,"suggestions":"188"},{"ruleId":"177","severity":1,"message":"180","line":44,"column":15,"nodeType":"179","endLine":44,"endColumn":19},{"ruleId":"177","severity":1,"message":"180","line":17,"column":19,"nodeType":"179","endLine":17,"endColumn":53},{"ruleId":"177","severity":1,"message":"180","line":22,"column":19,"nodeType":"179","endLine":22,"endColumn":51},{"ruleId":"177","severity":1,"message":"180","line":27,"column":19,"nodeType":"179","endLine":27,"endColumn":52},{"ruleId":"171","severity":1,"message":"172","line":146,"column":23,"nodeType":"173","messageId":"174","endLine":146,"endColumn":27},{"ruleId":"181","severity":1,"message":"189","line":45,"column":8,"nodeType":"183","endLine":45,"endColumn":10,"suggestions":"190"},{"ruleId":"181","severity":1,"message":"182","line":27,"column":8,"nodeType":"183","endLine":27,"endColumn":38,"suggestions":"191"},{"ruleId":"171","severity":1,"message":"192","line":1,"column":17,"nodeType":"173","messageId":"174","endLine":1,"endColumn":23},{"ruleId":"171","severity":1,"message":"193","line":3,"column":8,"nodeType":"173","messageId":"174","endLine":3,"endColumn":9},{"ruleId":"171","severity":1,"message":"194","line":27,"column":10,"nodeType":"173","messageId":"174","endLine":27,"endColumn":18},{"ruleId":"181","severity":1,"message":"195","line":59,"column":6,"nodeType":"183","endLine":59,"endColumn":8,"suggestions":"196"},{"ruleId":"181","severity":1,"message":"197","line":74,"column":6,"nodeType":"183","endLine":74,"endColumn":20,"suggestions":"198"},{"ruleId":"199","severity":1,"message":"200","line":144,"column":28,"nodeType":"201","messageId":"202","endLine":144,"endColumn":29},{"ruleId":"177","severity":1,"message":"180","line":355,"column":34,"nodeType":"179","endLine":355,"endColumn":58},{"ruleId":"171","severity":1,"message":"203","line":1,"column":17,"nodeType":"173","messageId":"174","endLine":1,"endColumn":26},{"ruleId":"171","severity":1,"message":"204","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":14},{"ruleId":"171","severity":1,"message":"205","line":19,"column":9,"nodeType":"173","messageId":"174","endLine":19,"endColumn":16},{"ruleId":"171","severity":1,"message":"203","line":1,"column":17,"nodeType":"173","messageId":"174","endLine":1,"endColumn":26},{"ruleId":"171","severity":1,"message":"192","line":1,"column":38,"nodeType":"173","messageId":"174","endLine":1,"endColumn":44},{"ruleId":"171","severity":1,"message":"206","line":19,"column":10,"nodeType":"173","messageId":"174","endLine":19,"endColumn":15},{"ruleId":"171","severity":1,"message":"207","line":19,"column":17,"nodeType":"173","messageId":"174","endLine":19,"endColumn":25},{"ruleId":"177","severity":1,"message":"180","line":81,"column":9,"nodeType":"179","endLine":81,"endColumn":33},{"ruleId":"177","severity":1,"message":"180","line":135,"column":21,"nodeType":"179","endLine":135,"endColumn":64},{"ruleId":"181","severity":1,"message":"208","line":22,"column":6,"nodeType":"183","endLine":22,"endColumn":8,"suggestions":"209"},{"ruleId":"181","severity":1,"message":"210","line":40,"column":8,"nodeType":"183","endLine":40,"endColumn":10,"suggestions":"211"},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'qs' is defined but never used.","'commentSent' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["214"],["215"],"'dateDifference' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPageNumber'. Either include it or remove the dependency array. If 'setPageNumber' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["216"],"React Hook useEffect has a missing dependency: 'getAllAssignees'. Either include it or remove the dependency array. If 'getAllAssignees' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["217"],["218"],"'useRef' is defined but never used.","'M' is defined but never used.","'assignee' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllAssignees', 'getIncidentById', and 'match.params.id'. Either include them or remove the dependency array. If 'getIncidentById' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["219"],"React Hook useEffect has a missing dependency: 'allAssignees'. Either include it or remove the dependency array.",["220"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'useEffect' is defined but never used.","'moment' is defined but never used.","'history' is assigned a value but never used.","'files' is assigned a value but never used.","'setFiles' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getNotifications' and 'userId'. Either include them or remove the dependency array. If 'getNotifications' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["221"],"React Hook useEffect has missing dependencies: 'commentRecieved', 'refreshNotifications', 'updateHubId', and 'userId'. Either include them or remove the dependency array. If 'updateHubId' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["222"],"no-global-assign","no-unsafe-negation",{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"225","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},"Update the dependencies array to be: [props]",{"range":"240","text":"241"},"Update the dependencies array to be: [PageNumber, PageSize, Search, props]",{"range":"242","text":"243"},"Update the dependencies array to be: [search, setPageNumber]",{"range":"244","text":"245"},"Update the dependencies array to be: [getAllAssignees]",{"range":"246","text":"247"},{"range":"248","text":"243"},"Update the dependencies array to be: [getAllAssignees, getIncidentById, match.params.id]",{"range":"249","text":"250"},"Update the dependencies array to be: [allAssignees, incidentData]",{"range":"251","text":"252"},"Update the dependencies array to be: [getNotifications, userId]",{"range":"253","text":"254"},"Update the dependencies array to be: [commentRecieved, refreshNotifications, updateHubId, userId]",{"range":"255","text":"256"},[746,748],"[props]",[1135,1165],"[PageNumber, PageSize, Search, props]",[944,952],"[search, setPageNumber]",[1738,1740],"[getAllAssignees]",[807,837],[1956,1958],"[getAllAssignees, getIncidentById, match.params.id]",[2529,2543],"[allAssignees, incidentData]",[674,676],"[getNotifications, userId]",[1426,1428],"[commentRecieved, refreshNotifications, updateHubId, userId]"]