[{"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\index.js":"1","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\App.js":"2","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\reportWebVitals.js":"3","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\rootReducer.js":"4","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\NavBar.js":"5","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\UsersList.js":"6","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Login\\Login.js":"7","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\AddUser.js":"8","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\IncidentLisiting.js":"9","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\AddNew.js":"10","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\signalR\\Receiver.js":"11","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDetails.js":"12","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\Dashboard.js":"13","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\userLoginReducer.js":"14","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\usersReducer.js":"15","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\incidentsReducer.js":"16","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\notificationsReducer.js":"17","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\dashboardReducer.js":"18","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\messagesReducer.js":"19","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Messages.js":"20","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\User.js":"21","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Pages.js":"22","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\PageActions.js":"23","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\Incident.js":"24","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Notifications.js":"25","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\AssigneeDropdown.js":"26","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comments.js":"27","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OldestOpen.js":"28","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\DayByDayCount.js":"29","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OverallWidget.js":"30","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\LastFive.js":"31","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\MostAssignedByUser.js":"32","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\KPIBar.js":"33","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDescription.js":"34","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentTitle.js":"35","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\usersActions.js":"36","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\notificationsActions.js":"37","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\incidentsActions.js":"38","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\userLoginActions.js":"39","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\api\\apiURLs.js":"40","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\messagesActions.js":"41","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\SendMessage.js":"42","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\dashboardActions.js":"43","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comment.js":"44","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\signalR\\sender.js":"45","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\ComposeMessage.js":"46","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Reply.js":"47","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Message.js":"48","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Conversation.js":"49"},{"size":1161,"mtime":1636820537134,"results":"50","hashOfConfig":"51"},{"size":1981,"mtime":1661249743314,"results":"52","hashOfConfig":"51"},{"size":375,"mtime":1636820537134,"results":"53","hashOfConfig":"51"},{"size":639,"mtime":1638873118691,"results":"54","hashOfConfig":"51"},{"size":5177,"mtime":1661249228240,"results":"55","hashOfConfig":"51"},{"size":3955,"mtime":1642959935390,"results":"56","hashOfConfig":"51"},{"size":3190,"mtime":1660585744139,"results":"57","hashOfConfig":"51"},{"size":6483,"mtime":1636820537132,"results":"58","hashOfConfig":"51"},{"size":4931,"mtime":1659870035968,"results":"59","hashOfConfig":"51"},{"size":13512,"mtime":1659953722142,"results":"60","hashOfConfig":"51"},{"size":3484,"mtime":1659883733231,"results":"61","hashOfConfig":"51"},{"size":18468,"mtime":1661366014127,"results":"62","hashOfConfig":"51"},{"size":904,"mtime":1636820537127,"results":"63","hashOfConfig":"51"},{"size":1276,"mtime":1642959333756,"results":"64","hashOfConfig":"51"},{"size":839,"mtime":1636820537138,"results":"65","hashOfConfig":"51"},{"size":4705,"mtime":1636820537137,"results":"66","hashOfConfig":"51"},{"size":1171,"mtime":1636820537138,"results":"67","hashOfConfig":"51"},{"size":1213,"mtime":1636820537137,"results":"68","hashOfConfig":"51"},{"size":3576,"mtime":1659883967138,"results":"69","hashOfConfig":"51"},{"size":7915,"mtime":1661248038178,"results":"70","hashOfConfig":"51"},{"size":263,"mtime":1636820537132,"results":"71","hashOfConfig":"51"},{"size":4279,"mtime":1659967918349,"results":"72","hashOfConfig":"51"},{"size":1193,"mtime":1645009344614,"results":"73","hashOfConfig":"51"},{"size":2885,"mtime":1644085473470,"results":"74","hashOfConfig":"51"},{"size":5417,"mtime":1660403010600,"results":"75","hashOfConfig":"51"},{"size":5266,"mtime":1645698534003,"results":"76","hashOfConfig":"51"},{"size":3700,"mtime":1661366163786,"results":"77","hashOfConfig":"51"},{"size":2592,"mtime":1642960086151,"results":"78","hashOfConfig":"51"},{"size":2089,"mtime":1636820537127,"results":"79","hashOfConfig":"51"},{"size":4218,"mtime":1661249465552,"results":"80","hashOfConfig":"51"},{"size":2463,"mtime":1642960051069,"results":"81","hashOfConfig":"51"},{"size":4204,"mtime":1661249636873,"results":"82","hashOfConfig":"51"},{"size":1562,"mtime":1659869775177,"results":"83","hashOfConfig":"51"},{"size":4232,"mtime":1636820537129,"results":"84","hashOfConfig":"51"},{"size":3362,"mtime":1661365066425,"results":"85","hashOfConfig":"51"},{"size":1899,"mtime":1636820537137,"results":"86","hashOfConfig":"51"},{"size":1946,"mtime":1642958854181,"results":"87","hashOfConfig":"51"},{"size":8181,"mtime":1642959825263,"results":"88","hashOfConfig":"51"},{"size":3138,"mtime":1659883753747,"results":"89","hashOfConfig":"51"},{"size":2394,"mtime":1659883717753,"results":"90","hashOfConfig":"51"},{"size":8906,"mtime":1647174836421,"results":"91","hashOfConfig":"51"},{"size":3719,"mtime":1639738887015,"results":"92","hashOfConfig":"93"},{"size":3855,"mtime":1642959971898,"results":"94","hashOfConfig":"51"},{"size":6058,"mtime":1661369048403,"results":"95","hashOfConfig":"51"},{"size":2410,"mtime":1659883745772,"results":"96","hashOfConfig":"51"},{"size":3434,"mtime":1645641321572,"results":"97","hashOfConfig":"51"},{"size":2360,"mtime":1660402795129,"results":"98","hashOfConfig":"51"},{"size":2582,"mtime":1659966120783,"results":"99","hashOfConfig":"51"},{"size":2938,"mtime":1661245945054,"results":"100","hashOfConfig":"51"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},"dcxkzk",{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"103"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"103"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"103"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"103"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"103"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"103"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"103"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"103"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"103"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"103"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"103"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"103"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"103"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"103"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"103"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"103"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"103"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"103"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"103"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"103"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"103"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"103"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"103"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"103"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"18lj646",{"filePath":"210","messages":"211","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"103"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"103"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"103"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"103"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"103"},"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\index.js",[],["229","230"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\App.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\reportWebVitals.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\rootReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\NavBar.js",["231","232","233","234","235"],"import {React, useEffect} from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/Navbar.css';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Notifications from './Notifications';\r\nimport { signOut } from \"../store/actions/userLoginActions\";\r\nimport logo from '../images/logo-white.png'\r\nimport { allUsers } from \"../store/actions/usersActions\";\r\n\r\nfunction NavBar({user_Name, loginError, token, signOut, getAllUsers, allUsers, UnreadConversations}) {\r\n\r\n  useEffect(() => {    \r\n     getAllUsers();\r\n    }, [token]);\r\n\r\n  if (!token){\r\n    //alert(\"Your session has been expired. Please login again.\")\r\n    return <Redirect to='/' /> \r\n  } \r\n\r\n  const logOut = () => {\r\n    signOut();   \r\n  }\r\n  // if (loginError) return <Redirect to='/' /> \r\n   \r\n    return (\r\n      <nav className=\"nav-wrapper \">\r\n        <div className=\"container\">\r\n          <div className=\"left\">\r\n\r\n            <NavLink to=\"/dashboard\" className=\"brand-logo\">             \r\n              <img src={logo} />\r\n            </NavLink>\r\n          </div>\r\n          <a href=\"#\" className=\"sidenav-trigger\" data-target=\"mobile-menu\">\r\n            <i className=\"material-icons\">menu</i>\r\n          </a>\r\n          <ul className=\"navbar-ul right hide-on-med-and-down\">\r\n            <li class=\"nav-link\">     \r\n              <NavLink to=\"/incidentListing\"  > \r\n              <i class=\"material-icons\">pest_control</i>            \r\n                 <span>Incidents </span>\r\n              </NavLink> \r\n            </li>\r\n            <li class=\"nav-link\">\r\n              <NavLink to=\"/UsersList\" >\r\n              <i class=\"material-icons\">people</i>            \r\n                 <span>Users </span>\r\n                </NavLink>              \r\n            </li> \r\n               \r\n            <li class=\"nav-link\">     \r\n              <NavLink to=\"/messages\" className=\"message-nav\" >     \r\n                 <i className=\"material-icons  \">message</i> \r\n                 <span>Messages </span>\r\n              \r\n              </NavLink> \r\n              \r\n            </li>    \r\n              <Notifications />\r\n            <li>\r\n                <button type=\"button\" title={user_Name} className=\"btn-floating  orange darken-3 userWelcome\" >\r\n                  {user_Name.split(/\\s/).reduce((response,word)=> response+=word.slice(0,1),'')} \r\n                 </button>\r\n            </li>\r\n            <li className=\" singout-btn\">\r\n             <a> <i className=\"material-icons red-text\" onClick={() => logOut()}>logout</i> </a>\r\n            </li>\r\n          </ul>\r\n          {/* for mobile */}\r\n          <ul className=\"sidenav indigo darken-4\" id=\"mobile-menu\">\r\n\r\n            <li>\r\n              <NavLink to=\"/Dashboard\" className=\"nav-link sidenav-close  white-text\">\r\n              <i class=\"material-icons white-text\">home</i>\r\n                <span>Dashboard</span>\r\n              </NavLink>\r\n            </li>\r\n\r\n            <li>\r\n              <NavLink to=\"/incidentListing\" className=\"nav-link sidenav-close  white-text\">\r\n              <i class=\"material-icons white-text\">pest_control</i>\r\n                <span>Incidents</span>\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/UsersList\" className=\"sidenav-close white-text\">\r\n              <i class=\"material-icons white-text\">people</i>\r\n                <span>Users</span>\r\n                \r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/Messages\" className=\"sidenav-close white-text\">\r\n                <i class=\"material-icons white-text\">message</i>\r\n                  <span>Messages</span>\r\n                \r\n              </NavLink>\r\n            </li>\r\n\r\n            {/* <li>\r\n              <a href=\"\" className=\"white-text\">\r\n                <i className=\"material-icons white-text\">notifications</i>\r\n                <span className=\"Indigo-text\">5</span>\r\n              </a>\r\n\r\n            </li>\r\n            <li>\r\n              {UnreadConversations > 0? (\r\n                \r\n                <span className=\" badge white-text new  messages-badge\">{UnreadConversations}</span>\r\n              \r\n              )\r\n              : <></>}\r\n             </li>  */}\r\n\r\n            <li>\r\n              <a> <i className=\"material-icons red-text\" onClick={signOut}>settings_power</i> \r\n                <span className='red-text lighten-1'>Logout</span>\r\n              </a>\r\n            </li>\r\n\r\n            \r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{      \r\n      user_Name :state.userLogin.user_Name, // Logged in User's name\r\n      userId :state.userLogin.userId,  // logged in User Id      \r\n      loginError : state.userLogin.loginError,\r\n      token : state.userLogin.token,\r\n      allUser: state.users.users,   \r\n      UnreadConversations : state.messages.UnreadConversations\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    signOut: () => dispatch(signOut()),\r\n    getAllUsers: () => dispatch(allUsers()),\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\UsersList.js",["236"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Pages from '../Pages'\r\nimport User from './User'\r\nimport PageActions from \"../PageActions\";\r\nimport { userssWithPage } from \"../../store/actions/usersActions\";\r\nimport {  useHistory  } from 'react-router-dom'\r\n\r\n function UsersList(props) {\r\n\r\n    const [PageNumber, setPageNumber] = useState(1);\r\n    const [PageSize, setPageSize] = useState(5);\r\n    const [Search, setSearch] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n    \r\n    useEffect(() => {\r\n        const parameters = {\r\n            PageNumber : PageNumber,\r\n            PageSize : PageSize,\r\n            Search : Search\r\n        }        \r\n        props.userssWithPage(parameters);\r\n        return () => {\r\n            \r\n        }\r\n    }, [PageNumber, PageSize, Search])\r\n\r\n    const searchTextChange =   (text) => {      \r\n            setSearch(text);\r\n            setPageNumber(1);\r\n    }\r\n\r\n    const addNewClick = ()=>{\r\n      let path = '/AddUser';      \r\n      history.push(path);\r\n    }\r\n    \r\n    if( !props.Users){\r\n      return (\r\n        <div className=\"preloader-wrapper container big active page-loader\">\r\n        <div className=\"spinner-layer spinner-blue-only\">\r\n          <div className=\"circle-clipper left\">\r\n            <div className=\"circle\"></div>\r\n          </div><div className=\"gap-patch\">\r\n            <div className=\"circle\"></div>\r\n          </div><div className=\"circle-clipper right\">\r\n            <div className=\"circle\"></div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n      )\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Users\"} /> \r\n\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n\r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">                \r\n                  <input type=\"text\"  value={Search}  onChange={(e) => searchTextChange(e.target.value)} />\r\n                  <label htmlFor=\"search\">Search</label>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">              \r\n                  <button className=\"btn green darken-4 right\" onClick={()=>addNewClick()} >\r\n                    <span>Add New</span>\r\n                    <i className=\"material-icons right\">create</i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col s12 l12\">\r\n                <table className=\"responsive-table highlight incidentsTbl\">\r\n                  <thead>\r\n                    <tr className=\"header\" data-target=\"blue\">\r\n                      <th>First Name</th>\r\n                      <th>Last Name</th>\r\n                      <th>Email</th>                      \r\n                      <th>Created Date</th>                     \r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  {\r\n                   !props.Users? null : props.Users.map(user=>{\r\n                          return (\r\n                            <User key={user.Id} user= {user} />                          )\r\n                      })\r\n                  }           \r\n                  </tbody>\r\n                </table>\r\n                <Pages  TotalRecords={props.TotalUsers} PostsPerPage={PageSize} setPageNumber={setPageNumber} setPageSize={setPageSize} search={Search} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        Users : state.users.UsersList,\r\n        TotalUsers : state.users.TotalUsers     \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        userssWithPage: (parameters) => dispatch(userssWithPage(parameters))\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(UsersList);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Login\\Login.js",["237","238"],"import {React, useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { logIn } from '../../store/actions/userLoginActions'\r\nimport { Redirect } from 'react-router-dom'\r\nimport '../../styles/loginStyles.css'\r\nimport logo from '../../images/logoBigWhite.png'\r\nimport logoSmall from '../../images/logoColored.png'\r\n\r\n\r\n function Login(props) {\r\n     const [username , setUsername] = useState('');\r\n     const [password , setPassword] = useState('');\r\n\r\n   function loginClick(e){\r\n        e.preventDefault();   \r\n        let credentials = {\r\n            username,\r\n            password\r\n        }  \r\n        props.logIn(credentials);       \r\n   }\r\n\r\n    if (props.token) return <Redirect to='/dashboard' /> \r\n     \r\n    return (\r\n      <div className=\"\">\r\n     \r\n        <div className=\"row \">\r\n        \r\n        <div className=\"login-logo-col col l6 hide-on-med-and-down \">\r\n          <div className=\"logo-Container\">\r\n               <img src={logo}/>\r\n          </div>          \r\n        </div> \r\n\r\n          <div className=\"col s12 m8 offset-m2 l6\">\r\n            <div className=\"form-container\">\r\n            {/* <h3> WELCOME!</h3>\r\n            <br /> */}\r\n              <img className='hide-on-large-only' src={logoSmall}/>\r\n            <h4 className='userlogin-text'>User Login</h4>\r\n            <br />\r\n            <form>\r\n              <div className=\"input-field\">\r\n                <i className=\"material-icons prefix\">person</i>\r\n                <input type=\"text\" id=\"username\" onChange={(e) => setUsername(e.target.value)} />\r\n                <label htmlFor=\"username\" >\r\n                  Your Username\r\n                </label>\r\n              </div>\r\n              <div className=\"input-field\">\r\n                <i className=\"material-icons prefix\">password</i>\r\n                <input type=\"password\" id=\"password\"  onChange={(e) => setPassword(e.target.value)} />\r\n                <label htmlFor=\"password\">Your Password</label>\r\n              </div>\r\n              <div className=\"input-field hide\">\r\n                <a href=\"/\"> Forgot password?</a>\r\n              </div>\r\n              <div className=\"input-field \">              \r\n                  <p className=\"red-text\">{props.loginError? \"Incorret username or password.\" : \"\" }</p>\r\n              </div>\r\n              <div className=\"input-field \">\r\n                <button className=\"btn indigo darken-2 center\" onClick={(e)=>loginClick(e)}>\r\n                  <span>Login</span>\r\n                  <i className=\"material-icons right\">send</i>\r\n                </button>\r\n              </div>             \r\n            </form>\r\n          </div>\r\n          </div>\r\n        </div>      \r\n      </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        user_Name :state.userLogin.user_Name,\r\n        userId :state.userLogin.userId,\r\n        userLogin : state.userLogin.userLogin,\r\n        loginError : state.userLogin.loginError,\r\n        token : state.userLogin.token  \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        logIn: (creds) => dispatch(logIn(creds))\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Login);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\AddUser.js",["239","240"],"import {React , useRef, useEffect, useState} from 'react';\r\nimport PageActions from \"../PageActions\";\r\nimport M from 'materialize-css';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { addNewUser } from '../../store/actions/usersActions';\r\n\r\n\r\n function AddUser({addNewUser}){\r\n\r\n\r\n    const history = useHistory();\r\n\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [lastName, setLastName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");  \r\n    const [phone, setPhone] = useState(\"\");  \r\n    const [profilePic , setProfilePic] = useState(null);\r\n\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    useEffect(() => {     \r\n       \r\n      \r\n    }, []);\r\n\r\n   const onFileChange = (event) => {    \r\n     \r\n    setProfilePic(event.target.files);\r\n   };\r\n\r\n   const cancelClick = (event) => {\r\n     event.preventDefault();\r\n     history.goBack();\r\n     //console.log(history);\r\n   };\r\n\r\n   const validateForm = () => {\r\n\r\n    if(firstName === \"\" || lastName === \"\" || email === \"\"  || phone === \"\" )\r\n        return false;\r\n    return true;\r\n\r\n   }\r\n\r\n   const saveClick = (event) => {\r\n    event.preventDefault();     \r\n    if(!validateForm()){\r\n      setFormError(\"Please complete required fields before saving.\")\r\n      return;\r\n    }\r\n    \r\n    setFormError(\"\");\r\n   \r\n   \r\n    const formData = new FormData(); \r\n\r\n    if(profilePic){\r\n       \r\n          formData.append( \r\n            \"Attachment1\", \r\n            profilePic[0], \r\n            profilePic[0].name \r\n          );\r\n          }\r\n     formData.append(\"FirstName\", firstName); \r\n     formData.append(\"LastName\", lastName);\r\n     formData.append(\"Email\", email); \r\n     formData.append(\"Phone\", email); \r\n     addNewUser(formData);\r\n  }; \r\n\r\n \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Add new User\"} />\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 l10 offset-l1\">\r\n                <form>\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 l6\">\r\n                      <div className=\"input-field \">\r\n                        <input\r\n                         className=\"validate\"\r\n                          required\r\n                          type=\"text\"\r\n                          id=\"firstName\"\r\n                          value={firstName}\r\n                          onChange={(e) => setFirstName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s12 l6\">                    \r\n                        <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"lastName\"\r\n                            value={lastName}\r\n                            onChange={(e) => setLastName(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"lastName\">Last Name</label> \r\n                    </div>\r\n                                      \r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"email\">Email</label> \r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"phone\"\r\n                            value={phone}\r\n                            onChange={(e) => setPhone(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"phone\">Phone</label> \r\n                  </div>\r\n\r\n                  <div className=\"file-field input-field\">\r\n                    <div className=\"btn indigo darken-2\">\r\n                      <i className=\"material-icons \">attachment</i>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"attachment\"                        \r\n                        onChange={onFileChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                      <input\r\n                        className=\"file-path validate\"\r\n                        type=\"text\"\r\n                        placeholder=\"Upload profile picture\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-field\">\r\n                      <p className=\"red-text center\">{formError ? formError : \"\" }</p>\r\n                  </div>\r\n\r\n                  \r\n                  <div className=\"input-field \">\r\n                    <button\r\n                      className=\"btn green darken-2 left\"\r\n                      onClick={saveClick}\r\n                    >\r\n                      <span>Save</span>\r\n                      <i className=\"material-icons right\">save</i>\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn yellow darken-4 left\"\r\n                      onClick={cancelClick}\r\n                    >\r\n                      <span>Cancel</span>\r\n                      <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{\r\n        allAssignees : state.users.users,\r\n        user_Name :state.userLogin.user_Name, // Logged in User's name\r\n        userId :state.userLogin.userId,  // logged in User Id       \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {       \r\n        addNewUser : (formData) => dispatch(addNewUser(formData))\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUser);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\IncidentLisiting.js",["241","242"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Pages from '../../Pages'\r\nimport Incident from './Incident'\r\nimport PageActions from \"../../PageActions\";\r\nimport { allUsers } from \"../../../store/actions/usersActions\";\r\nimport { incidentsWithPage, cancel } from \"../../../store/actions/incidentsActions\";\r\nimport {  useHistory  } from 'react-router-dom';\r\n\r\n\r\n function IncidentLisiting(props) {\r\n   \r\n    const [PageNumber, setPageNumber] = useState(1);\r\n    const [PageSize, setPageSize] = useState(5);\r\n    const [Search, setSearch] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n      props.getAllAssignees();      \r\n    }, []);\r\n\r\n\r\n   \r\n    useEffect(() => {\r\n        const parameters = {\r\n            PageNumber : PageNumber,\r\n            PageSize : PageSize,\r\n            Search : Search            \r\n        }        \r\n        setLoading(true);\r\n        props.incidentsWithPage(parameters);\r\n        setLoading(false);\r\n        return () => {\r\n          cancel();        // cancel axios  \r\n        }\r\n    }, [PageNumber, PageSize, Search])\r\n\r\n    const searchTextChange =   (text) => {      \r\n            setSearch(text);\r\n            setPageNumber(1);\r\n    }\r\n\r\n    const addNewClick = ()=>{\r\n      const data = false;\r\n      props.dispatch({ type: 'NEW_INCIDENT_STATUS', data });\r\n      let path = '/AddNew';      \r\n      history.push(path);\r\n    }\r\n\r\n    const getUserNameById = (id) => {   \r\n      let user = props.allAssignees.find((assignee) => {\r\n        return assignee.Id === id;\r\n      });   \r\n      if(!user){    \r\n        return id;\r\n      }\r\n      return user.FirstName + \" \" + user.LastName\r\n    }\r\n\r\n    if(props.Error!==\"\"){\r\n      return (\r\n        <div className=\"container\">\r\n          <h1 className=\"center red-text\">Error</h1>\r\n          <h5 className=\"center\">{props.Error}</h5>\r\n          <p className=\"center\">Please check your network and try loging back.</p>\r\n        </div>\r\n      )\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Incidents\"} /> \r\n        { loading? <h1>Loading</h1> : null}\r\n        {/* { props.TotalIncidents === 0? <h1>Zero</h1> : null} */}\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n\r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">                \r\n                  <input type=\"text\" id=\"search\" value={Search}  onChange={(e) => searchTextChange(e.target.value)} />\r\n                  <label htmlFor=\"search\">Search</label>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">              \r\n                  <button className=\"btn green darken-4 right\" onClick={()=>addNewClick()} >\r\n                    <span>Add New</span>\r\n                    <i className=\"material-icons right\">create</i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col s12 l12\">\r\n                <table className=\"responsive-table highlight incidentsTbl\">\r\n                  <thead>\r\n                    <tr className=\"header\" data-target=\"blue\">\r\n                      <th>Title</th>\r\n                      <th>Description</th>\r\n                      <th>Assigned TO</th>\r\n                      <th>Created By</th>\r\n                      <th>Created Date</th>\r\n                      <th>Due Date</th>\r\n                      <th>Status</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  {\r\n                      props.Incidents.map(incident=>{\r\n                          return (\r\n                            <Incident key={incident.Id} incident= {incident} getUserNameById={getUserNameById} />                          )\r\n                      })\r\n                  }           \r\n                  </tbody>\r\n                </table>\r\n                <Pages  TotalRecords={props.TotalIncidents} PostsPerPage={PageSize} setPageNumber={setPageNumber} setPageSize={setPageSize} search={Search} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        allAssignees: state.users.users,\r\n        Incidents : state.incidents.Incidents,\r\n        TotalIncidents : state.incidents.TotalIncidents,\r\n        Error : state.incidents.IncidentsError   // if there is an error while getting data from API\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        incidentsWithPage: (parameters) => dispatch(incidentsWithPage(parameters)),\r\n        getAllAssignees: () => dispatch(allUsers()),\r\n        dispatch:dispatch\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(IncidentLisiting);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\AddNew.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\signalR\\Receiver.js",["243","244"],"import React, { useEffect} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {  JsonHubProtocol,   \r\n    HubConnectionBuilder,\r\n    LogLevel\r\n} from '@microsoft/signalr';\r\nimport { commentRecieved, getAllNotifications } from \"../store/actions/notificationsActions\";\r\nimport { updateHubId } from '../store/actions/userLoginActions';\r\nimport { conversationsByUser, messagesByConversations, receiveMessage, receiveConversation } from '../store/actions/messagesActions';\r\nimport { baseUrl } from \"../api/apiURLs\";\r\n\r\n  function Receiver({commentRecieved, updateHubId, userId, refreshNotifications, Conversations, conversationsByUser, Messages, messagesByConversations, receiveMessage, receiveConversation}) {\r\n\r\n    useEffect(() => {   \r\n        \r\n        const newConnection = new HubConnectionBuilder()\r\n        .withUrl(baseUrl +'hubs/notifications')\r\n        .withAutomaticReconnect()\r\n        .withHubProtocol(new JsonHubProtocol())\r\n        .configureLogging(LogLevel.Information)\r\n        .build();\r\n        console.log(\"newConnection\",newConnection);\r\n        newConnection.start()\r\n        .then(result => {\r\n            console.log('Connected!');\r\n            let hubId = newConnection.connectionId; \r\n            updateHubId(hubId, userId);\r\n            \r\n            newConnection.on('ReceiveMessage', (message) => {\r\n                console.log(message);\r\n                 commentRecieved(message);\r\n            });\r\n            newConnection.on('UpdateNotifications', (incidentId) => {\r\n              console.log(incidentId);\r\n              refreshNotifications(userId);\r\n          });\r\n\r\n          newConnection.on('ReceiveNewMessage', (newMessage) => {\r\n            console.log(\"newMessage\" , newMessage);          \r\n            \r\n              let coversationId = newMessage.ConversationId; \r\n              if(Messages[0].ConversationId == coversationId){ // if conversation is open, update messages \r\n                    receiveMessage(newMessage);\r\n              }\r\n               \r\n        });\r\n\r\n        newConnection.on('ReceiveNewConversation', (newMessage) => {          \r\n          console.log(\"newConversation\" , newMessage);        \r\n           receiveConversation(newMessage);         \r\n      });\r\n\r\n        })\r\n        .catch(e => console.log('Connection failed: ', e));\r\n     \r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <>  \r\n      \r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      allAssignees: state.users.users,\r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,  // logged in User Id\r\n      Conversations :  state.messages.Conversations,    \r\n      Messages: state.messages.Messages,  \r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        commentRecieved: (comment) => dispatch(commentRecieved(comment)),\r\n        updateHubId: (hubId, userId) => dispatch(updateHubId(hubId, userId)),\r\n        refreshNotifications : (userId) =>  dispatch(getAllNotifications(userId)),\r\n        conversationsByUser: (userId) => dispatch(conversationsByUser(userId)),   \r\n        messagesByConversations: (conversationId) => dispatch(messagesByConversations(conversationId)),\r\n        receiveMessage : (newMessage) => dispatch(receiveMessage(newMessage)),\r\n        receiveConversation : (newConversation) => dispatch(receiveConversation(newConversation))\r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Receiver);\r\n  \r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDetails.js",["245","246","247","248","249","250"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\Dashboard.js",["251"],"import React from 'react'\r\nimport PageActions from '../../PageActions';\r\nimport KPIBar from './KPIBar';\r\nimport OverallWidget from './OverallWidget'\r\nimport LastFive from './LastFive';\r\nimport  '../../../styles/dashboard.css'\r\nimport MostAssignedByUser from './MostAssignedByUser';\r\nimport DayByDayCount from './DayByDayCount';\r\nimport FiveOldestOpenIncidents from './OldestOpen';\r\n\r\n function Dashboard() {\r\n \r\n\r\n    return (\r\n      <div>\r\n        <PageActions Title={\"Dashboard\"} />\r\n        \r\n        <div className=\"container\">     \r\n          <KPIBar />\r\n          <div className=\"row\">\r\n            <OverallWidget />\r\n            <LastFive />\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n           <MostAssignedByUser />\r\n           <FiveOldestOpenIncidents />\r\n           {/* <DayByDayCount /> */}\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\userLoginReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\usersReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\incidentsReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\notificationsReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\dashboardReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\messagesReducer.js",["252","253","254","255"],"\r\nconst initState = {\r\n    Messages : [],\r\n    MessagesChanged:false,\r\n    Conversations : [],  \r\n    ConversationsChanged:false,\r\n    UnreadConversations: 0,\r\n    SelectedConversation: {},\r\n    SelectedConversationChanged:false,\r\n   }\r\n \r\n   let changedMessages;\r\n   let changedConversations;\r\n\r\n   const messagesReducer = (state = initState, action) => {\r\n\r\n     switch (action.type) {\r\n       case \"MESSAGES_BY_USER\":\r\n         //  console.log(action.data);\r\n         return {\r\n           ...state,\r\n           Messages: action.data\r\n         };\r\n         \r\n        case \"CONVERSATION_SELECTED\":\r\n         //  console.log(\"CONVERSATION_SELECTED\", action.data);\r\n         return {\r\n           ...state,\r\n           SelectedConversation: action.data,\r\n           SelectedConversationChanged : !state.SelectedConversationChanged,\r\n         };\r\n        case \"UNREAD_CONVERSATION\":\r\n        //  console.log(action.data);\r\n        return {\r\n          ...state,\r\n          UnreadConversations: action.data\r\n        };\r\n\r\n       case \"CONVERSATIONS_BY_USER\":\r\n         //  console.log(action.data);\r\n         return {\r\n           ...state,\r\n           Conversations: action.data,\r\n           ConversationsChanged: !state.ConversationsChanged,\r\n         };\r\n\r\n       case \"MESSAGES_BY_CONVERSATIONS\":\r\n         //  console.log(action.data);\r\n         return {\r\n           ...state,\r\n           Messages: action.data,\r\n           MessagesChanged: !state.MessagesChanged,\r\n         };\r\n        \r\n       case \"NEW_MESSAGE\":\r\n\r\n         changedMessages = [...state.Messages];\r\n         changedMessages.push(action.data);\r\n         return {\r\n           ...state,\r\n           Messages: changedMessages,\r\n           MessagesChanged: !state.MessagesChanged,\r\n         };\r\n\r\n       case \"NEW_CONVERSATION\":\r\n\r\n         return {\r\n           ...state,\r\n           Conversations: [action.data, ...state.Conversations]\r\n         };\r\n       case \"DELETE_MESSAGE\":\r\n         changedMessages = [...state.Messages];\r\n         let mId = action.data;\r\n         changedMessages = changedMessages.filter(m => m.Id != mId);\r\n\r\n         return {\r\n           ...state,\r\n           Messages: changedMessages\r\n         };\r\n\r\n       case \"CHANGE_MESSAGE_STATUS\":\r\n        \r\n         changedMessages = [...state.Messages];\r\n         changedMessages = changedMessages.map(m => {\r\n           if (m.Id == action.data.messageId){            \r\n             m.Status = action.data.status;\r\n           }   \r\n             return m;\r\n         }\r\n         );\r\n\r\n         changedConversations = [...state.Conversations];\r\n         changedConversations = changedConversations.map(c => {\r\n           if (c.Id == state.SelectedConversation.Id){\r\n            c.UnReadCount = c.UnReadCount - 1;\r\n           }          \r\n           return c;\r\n         });\r\n        \r\n         return {\r\n           ...state,\r\n           Messages: changedMessages,\r\n           Conversations: changedConversations\r\n         };\r\n\r\n       case \"DELETE_CONVERSATION\":\r\n         console.log(\"deleteConversation reducer 1\", action.data);\r\n         changedConversations = [...state.Conversations];\r\n         let cId = action.data;\r\n         changedConversations = changedConversations.filter(c => c.Id != cId);\r\n\r\n         return {\r\n           ...state,\r\n           Conversations: changedConversations,\r\n           SelectedConversation: changedConversations[0],\r\n           SelectedConversationChanged : !state.SelectedConversationChanged,\r\n         };\r\n  \r\n       default:\r\n         return state;\r\n     }\r\n   };\r\n   \r\n   export default messagesReducer;","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Messages.js",["256","257","258","259","260"],"import { React, useState, useEffect, useRef} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { messagesByUser, conversationsByUser, messagesByConversations, selectConversation, deleteConversation } from \"../../store/actions/messagesActions\";\r\nimport '../../styles/messages.css';\r\nimport ComposeMessage from './ComposeMessage';\r\nimport Reply from './Reply';\r\nimport Message from './Message'\r\nimport Conversation from './Conversation'\r\n\r\nfunction Messages({\r\n    userId,\r\n    allUsers,\r\n    UserMessages,\r\n    getMessagesByUser,\r\n    conversationsByUser,\r\n    messagesByConversations,\r\n    Conversations, \r\n    SelectedConversation,\r\n    selectConversation,\r\n    deleteConversation,\r\n    UserMessagesChanged, ConversationsChanged, SelectedConversationChanged\r\n}) {\r\n\r\n    const [userToggle, setUserToggle] = useState(false);\r\n    const [composeToggle, setComposeToggle] = useState(false);\r\n    const messagesRef = useRef();  \r\n    const [conversationTitle, setConversationTitle] = useState('');\r\n    const [isScrollDone, setIsScrollDone] = useState(false);\r\n\r\n    useEffect(() => {\r\n        conversationsByUser(userId);   \r\n    }, []);\r\n\r\n    useEffect(() => {        \r\n        if(Conversations != null && Conversations.length > 0){\r\n            setIsScrollDone(false);   \r\n            selectConversation(Conversations[0]);    \r\n        }  \r\n    }, [ConversationsChanged])\r\n\r\n    useEffect(() => {\r\n        setIsScrollDone(false);  \r\n        messagesByConversations(SelectedConversation.Id);\r\n        if(SelectedConversation != null && SelectedConversation !={}){\r\n            let user = SelectedConversation.User1 == userId? getUserNameById(SelectedConversation.User2) : getUserNameById(SelectedConversation.User1);\r\n           setConversationTitle(user);           }       \r\n       \r\n    }, [SelectedConversationChanged]);\r\n\r\n    useEffect(() => {        \r\n        try{\r\n            messagesRef.current.scrollTop = messagesRef.current.scrollHeight; \r\n            setIsScrollDone(true);    \r\n        }  catch(e){}\r\n    }, [UserMessagesChanged])\r\n\r\n    const newConversationAdded = () =>{\r\n        conversationsByUser(userId);  \r\n    }\r\n\r\n    const delConversation = () => {\r\n        if(window.confirm(\"Delete conversation forever?\")){\r\n            deleteConversation(SelectedConversation.Id);\r\n        }      \r\n    }\r\n\r\n    const composeToggleClicked = () => {\r\n        setComposeToggle(!composeToggle);\r\n        setUserToggle(!userToggle);\r\n    }\r\n\r\n    const getUserNameById = (id) => {   \r\n        let user = allUsers.find((assignee) => {\r\n          return assignee.Id === id;\r\n        });   \r\n        if(!user){    \r\n          return id;\r\n        }\r\n        return user.FirstName + \" \" + user.LastName\r\n      }\r\n      \r\n        \r\n    return (\r\n        <section>\r\n            <div className=\"container messages-window\">     \r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col s1 m1 hide-on-large-only\">\r\n                        <div className=\"user-toogle\" onClick={()=>setUserToggle(!userToggle)}>\r\n                            {/* <span>Users</span>\r\n                            <br></br> */}\r\n                            <i className=\"material-icons center\">person</i>\r\n                        </div> \r\n                    </div>\r\n                    {userToggle? (\r\n                         <div className=\"col s11 m11 l3 users hide-on-large-only\">\r\n                              <div className=\"compose-message\" onClick={()=> composeToggleClicked()}>\r\n                                     <i className=\"material-icons indigo-text\">message</i>\r\n                                    <span className='indigo-text'> Compose Message </span>\r\n                                </div>  \r\n                         <ul className='conversation-list'>                         \r\n                                {Conversations.map(c => <Conversation key={c.Id + \"ll\"} conversation={c}  getUserNameById={getUserNameById} setUserToggle={setUserToggle}  />)}\r\n\r\n                         </ul>\r\n                     </div>\r\n                    ) : <></>}\r\n                   \r\n\r\n                    <div className=\"col s10 m9 l3 users hide-on-med-and-down\">                        \r\n                        <div className=\"compose-message\" onClick={()=> setComposeToggle(!composeToggle)}>\r\n                            <i className=\"material-icons indigo-text\">message</i>\r\n                            <span className='indigo-text'> Compose Message </span>\r\n                        </div>   \r\n                        <ul className='conversation-list'> \r\n                            {(Conversations != null && Conversations.length > 0)? \r\n                                Conversations.map(c => <Conversation conversation={c} key={c.Id} getUserNameById={getUserNameById} setUserToggle={null}  />)\r\n                                :\r\n                                <></>\r\n                            }\r\n\r\n                        </ul>\r\n                    </div>\r\n                    {composeToggle ? (\r\n                        <div className=\"col s10 m9 l9  \">\r\n                            <ComposeMessage setComposeToggle={setComposeToggle} newConversationAdded={newConversationAdded} />\r\n                        </div>\r\n                    )\r\n                        :\r\n                        (\r\n                            !userToggle ? (\r\n                                <div className=\"col s10 m9 l9 \">\r\n                                    <div className=\"converation-title\">\r\n                                        <h5 className=\"left indigo-text darken-4\"> {conversationTitle}\r\n                                        </h5>\r\n                                        <i title=\"Delete Conversation\" onClick={() => delConversation()} className=\"material-icons red-text lighten-4\">delete</i>\r\n                                    </div>\r\n                                    <div className=\"messages\" ref={messagesRef}>\r\n                                        <ul className=''>\r\n                                            {\r\n                                                UserMessages.map((m,index,allM) => (\r\n                                                    <Message key={m.Id} isLast={index+1 === allM.length? true: false} message={m} userId={userId} isScrollDone={isScrollDone} />\r\n                                                ))\r\n                                            }\r\n                                        </ul>\r\n                                    </div>\r\n                                    <Reply />\r\n                                </div>\r\n\r\n                            ) : <></>\r\n                        )}                  \r\n\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n        allUsers: state.users.users,\r\n        UserMessages : state.messages.Messages,\r\n        Conversations :  state.messages.Conversations,      \r\n        SelectedConversation : state.messages.SelectedConversation,\r\n        UserMessagesChanged : state.messages.MessagesChanged,\r\n        ConversationsChanged :  state.messages.ConversationsChanged,      \r\n        SelectedConversationChanged : state.messages.SelectedConversationChanged\r\n    }\r\n  }\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getMessagesByUser: (userId) => dispatch(messagesByUser(userId)),   \r\n        conversationsByUser: (userId) => dispatch(conversationsByUser(userId)),   \r\n        messagesByConversations: (conversationId) => dispatch(messagesByConversations(conversationId)),\r\n        selectConversation: (conversation) => dispatch(selectConversation(conversation)),    \r\n        deleteConversation: (conversationId) => dispatch(deleteConversation(conversationId)),    \r\n    }\r\n  }\r\n \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Messages);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\User.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Pages.js",["261","262","263","264","265","266","267"],"import {React, useState, useEffect, useRef} from 'react';\r\nimport M from 'materialize-css';\r\n\r\nexport default function Pages({TotalRecords, PostsPerPage, setPageNumber, setPageSize , search }) {\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentSize, setCurrentSize] = useState(5);\r\n    const [information, setInformation] = useState('');\r\n\r\n    let hidePreviousPages = false;\r\n    let hideNextPages = false;\r\n\r\n    const ddlRef = useRef();\r\n\r\n    let pageIndexes = [];\r\n    for(let i = 1; i <= Math.ceil(TotalRecords / PostsPerPage) ; i++ )\r\n    {\r\n        if(i > currentPage - 3 &&  i < currentPage + 3)\r\n        pageIndexes.push(i);        \r\n    }\r\n\r\n    if(pageIndexes[0] != 1){\r\n        hidePreviousPages = true;      \r\n    }\r\n\r\n    if(pageIndexes[pageIndexes.length -1] != Math.ceil(TotalRecords / PostsPerPage)){\r\n        hideNextPages = true;      \r\n    }\r\n\r\n    const pageNumberClick = (event, p) =>{\r\n        event.preventDefault();\r\n        if(p <1 || p > Math.ceil(TotalRecords / PostsPerPage))\r\n            return;\r\n            console.log(p);\r\n        setPageNumber(p);\r\n        setCurrentPage(p);       \r\n    }\r\n\r\n    const pageSizeChanged = (pSize) => {\r\n        setPageSize(pSize);\r\n        setCurrentSize(pSize);\r\n        setCurrentPage(1);\r\n        setPageNumber(1);\r\n       \r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setPageNumber(1);        \r\n        M.FormSelect.init(ddlRef.current); \r\n        pageInformation();\r\n    }, [search])\r\n\r\n    useEffect(() => {    \r\n        pageInformation();\r\n    }, [currentPage, currentSize, TotalRecords])\r\n        \r\n\r\n    const pageInformation = () => {\r\n        let end = currentPage * currentSize;\r\n        let start = end - currentSize + 1;\r\n        if(end > TotalRecords)\r\n            end = TotalRecords;\r\n        if(start > TotalRecords)\r\n            start = 0;\r\n        setInformation(\"Showing from \" + start + \" to \" + end + \" of \" + TotalRecords);\r\n    }\r\n\r\n    let pages = pageIndexes.map((p,index)=>{\r\n        let pclass = currentPage === p ? \"active\" : \"\";        \r\n        return (             \r\n            <li className={pclass} key={p}  onClick={(e) => pageNumberClick(e, p)}>              \r\n              <a > {p} </a>\r\n            </li>        \r\n        );\r\n    });\r\n\r\n    return (\r\n        \r\n      <div className=\"row pagesRow\">\r\n        <div className=\"col s12 m8 l6\">\r\n            <p className='left green-text darken-2'>{information}</p>\r\n        </div>\r\n        <div className=\"col s12 m4 l2 pageSize\">              \r\n                    <span>Page Size</span>\r\n                    <select value={currentSize} onChange={(e) => pageSizeChanged(e.target.value)}\r\n                        ref={ddlRef}  >\r\n                        <option value=\"5\">5</option>\r\n                        <option value=\"10\">10</option>\r\n                        <option value=\"15\">15</option>\r\n                        <option value=\"20\">20</option>\r\n                        <option value=\"25\">25</option>\r\n                        <option value=\"30\">30</option>\r\n                        <option value=\"35\">35</option>\r\n                        <option value=\"40\">40</option>\r\n                        <option value=\"45\">45</option>\r\n                        <option value=\"50\">50</option>\r\n                    </select>               \t\t\t\t\t\r\n        </div>\r\n      \r\n        <div className=\"input-field col s12 m12 l4\">\r\n            <ul className=\"pagination right\">\r\n            <li\r\n                className={  currentPage === 1 ? \" disabled\" : \"\" } >\r\n                <a href=\"#!\" onClick={(e) => pageNumberClick(e ,currentPage - 1)}>\r\n                <i className=\"material-icons\">chevron_left</i>               \r\n                </a>\r\n            </li>\r\n            {hidePreviousPages? <li><a>...</a></li> : null} \r\n            {pages}\r\n            {hideNextPages? <li><a>...</a></li> : null} \r\n            <li\r\n                className={ currentPage === Math.ceil(TotalRecords / PostsPerPage) ? \" disabled\" : \"\" } >\r\n                <a href=\"#!\" onClick={(e) => pageNumberClick(e, currentPage + 1)}>\r\n                <i className=\"material-icons\">chevron_right</i>\r\n                </a>\r\n            </li>\r\n            </ul>\r\n        </div>\r\n\r\n\r\n      </div>\r\n    );\r\n}\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\PageActions.js",["268","269","270"],"import React from 'react'\r\n//import '../styles/tooltip.css';\r\n\r\nexport default function PageActions(props) {\r\n    return (\r\n      <section className=\"container\">\r\n        <div className=\"row \">\r\n          <div className=\"col s12 l5\">\r\n            <div className=\"left\">\r\n              <h4 className=\"page-title\" data-tip={props.Title}>{props.Title}</h4>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"col s7 l9 hide\">\r\n            <div className=\"right\">\r\n              <ul className=\"actionsBtns\">\r\n                <li>\r\n                  <a className=\"btn-floating green\">\r\n                    <i className=\"material-icons\">refresh</i>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"btn-floating red\">\r\n                    <i className=\"material-icons\">print</i>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"btn-floating blue\">\r\n                    <i className=\"material-icons\">file_download</i>\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n}\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\Incident.js",["271","272","273"],"import React from 'react';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { removeIncidentData } from \"../../../store/actions/incidentsActions\";\r\nimport { connect  } from 'react-redux';\r\nimport '../../../styles/IncidentListing.css';\r\nimport moment from \"moment\";;\r\n\r\nfunction Incident({incident, dispatch, getUserNameById}) {\r\n\r\n  const history = useHistory();\r\n\r\n  const openIncident = (id) => {  \r\n    dispatch(removeIncidentData()); // So that user does not see old data that is stored in redux (and local storage)\r\n    let path = '/Incident/' + id;      \r\n      history.push(path);\r\n  }\r\n\r\n  const statusName = (status) => {\r\n    switch(status){\r\n      case \"N\":\r\n        return \"New\";\r\n      case \"C\":\r\n        return \"Closed\";\r\n      case \"A\":\r\n        return \"Approved\";\r\n      case \"I\":\r\n        return \"In Progress\";\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  const dateDifference = (date1 , date2) =>{\r\n   \r\n      const diffTime = Math.abs(date2 - date1);\r\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \r\n     // console.log(diffTime + \" milliseconds\");\r\n     // console.log(diffDays + \" days\");\r\n     return diffDays;\r\n  }\r\n\r\n  let currentDate = new Date();\r\n  const dueDateClass = (new Date(incident.DueDate)) > currentDate || incident.Status == 'C' || incident.Status == 'A' ?  \"green-text text-darken-2\" : \"red-text text-darken-2\" ;\r\n  \r\n    return (\r\n      <tr >      \r\n        \r\n        <td\r\n          className=\"tbl-title\"        \r\n        >\r\n          <div className=\"custom-dropdown\">\r\n            <span className=\"indigo-text darken-4\" onClick={() => openIncident(incident.Id)} >\r\n              {incident.Title.length > 50 ? incident.Title.slice(0, 50) + \" ...\" : incident.Title}\r\n            </span>\r\n            <div className=\"custom-dropdown-content\">\r\n              <p> {incident.Title}</p>\r\n            </div>\r\n          </div>\r\n\r\n        </td>\r\n        \r\n        <td\r\n          className=\"tbl-description\"\r\n        >\r\n          <div className=\"custom-dropdown\">\r\n            <span >\r\n               {incident.Description.length > 30 ? incident.Description.slice(0,30) + \" ...\" : incident.Description }\r\n            </span>\r\n            <div className=\"custom-dropdown-content\">\r\n              <p> {incident.Description}</p>\r\n            </div>\r\n          </div>\r\n    \r\n        </td>\r\n        <td>{getUserNameById(incident.AssignedTo)}</td>\r\n        <td>{getUserNameById(incident.CreatedBy)}</td>\r\n        <td><span title= {moment(incident.CreatedAT).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(incident.CreatedAT).fromNow() } </span></td>\r\n        <td><span className={dueDateClass} title= {moment(incident.DueDate).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(incident.DueDate).fromNow() } </span></td>\r\n        <td>{statusName(incident.Status)}</td>\r\n      </tr>\r\n    );\r\n}\r\n\r\nexport default connect()(Incident);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Notifications.js",["274"],"import {React, useRef, useEffect, useState} from 'react'\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport M from 'materialize-css';\r\nimport  '../styles/notifications.css'\r\nimport {getAllNotifications, setNotificationStatus} from '../store/actions/notificationsActions';\r\nimport { removeIncidentData, getIncidentById } from \"../store/actions/incidentsActions\";\r\nimport moment from \"moment\";\r\n\r\n function Notifications({\r\n   getNotifications,\r\n   userId,\r\n   notifications,\r\n   setNotificationStatus,\r\n   removeIncidentData,\r\n   getIncidentById\r\n }) {\r\n   const ddlNotiRef = useRef();\r\n   const history = useHistory();\r\n\r\n   const [unReadCount, setUnReadCount] = useState(    \r\n      notifications!=null && notifications.length >0 ? notifications.filter((notification) => !notification.IsRead).length : 0     \r\n   );\r\n\r\n   useEffect(() => {\r\n     var options = {\r\n       closeOnClick: false,\r\n     };\r\n     M.Dropdown.init(ddlNotiRef.current, options);\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n     getNotifications(userId);\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n     setUnReadCount(\r\n      notifications!=null && notifications.length >0 ? notifications.filter((notification) => !notification.IsRead).length : 0     \r\n     );\r\n   }, [notifications]);\r\n\r\n   const setStatus = (id, status) => {\r\n     setNotificationStatus(id, status);\r\n   };\r\n\r\n   const openIncident = (notification) => {\r\n     setStatus(notification.Id, true);\r\n\r\n     let path = \"/Incident/\" + notification.IncidentId;\r\n     if (history.location.pathname !== path) {\r\n       // only change path if it is different      \r\n       removeIncidentData(); // So that user does not see old data that is stored in redux (and local storage)\r\n     }\r\n     else{\r\n      M.Dropdown.getInstance(ddlNotiRef.current).close();\r\n      getIncidentById(notification.IncidentId); //if already on the same incident, just get new data and update page\r\n     }\r\n     history.push(path);\r\n   };\r\n\r\n   console.log(\"in Notifications\");\r\n\r\n   return (\r\n     <>\r\n       <li>\r\n         <a\r\n           ref={ddlNotiRef}\r\n           href=\"#dropdown1\"\r\n           className=\"btn-floating z-depth-0 indigo darken-4 dropdown-trigger badge-a\"\r\n           data-target=\"dropdownNotifications\"\r\n         >\r\n           <i className=\"material-icons\">notifications</i>\r\n         </a>\r\n         <ul\r\n           id=\"dropdownNotifications\"\r\n           className=\"notifications dropdown-content\"\r\n         >\r\n           {notifications == null || notifications.length < 1 ? (\r\n             <li>\r\n               <div className=\"notification-box\">\r\n                 <p className=\"\">No new notificaitons.</p>\r\n               </div>\r\n             </li>\r\n           ) : (\r\n             notifications.map((notification) => {\r\n               let classes = notification.IsRead\r\n                 ? \"notification-box read\"\r\n                 : \"notification-box unread\";\r\n               return (\r\n                 <li key={notification.Id}>\r\n                   <div className={classes}>\r\n                     <span className='icon'>\r\n                       {notification.IsRead ? (\r\n                         <i\r\n                           className=\"material-icons black-text readIcon\"\r\n                           title=\"Mark Unread\"\r\n                           onClick={() => setStatus(notification.Id, false)}\r\n                         >\r\n                           radio_button_unchecked\r\n                         </i>\r\n                       ) : (\r\n                         <i\r\n                           className=\"material-icons black-text readIcon\"\r\n                           title=\"Mark Read\"\r\n                           onClick={() => setStatus(notification.Id, true)}\r\n                         >\r\n                           radio_button_checked\r\n                         </i>\r\n                       )}\r\n                     </span>\r\n\r\n                     <p className='text indigo-text darken-4' onClick={() => openIncident(notification)}>\r\n                       {\" \"}\r\n                       {notification.NotifyAbout}\r\n                     </p>\r\n\r\n                     <p className='time'>\r\n                      <span title= {moment(notification.CreateDate).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(notification.CreateDate).fromNow() } </span>                      \r\n                     </p>\r\n                         \r\n                       \r\n                   </div>\r\n                 </li>\r\n               );\r\n             })\r\n           )}\r\n         </ul>\r\n       </li>\r\n       <li>\r\n         {unReadCount > 0 ? (\r\n           <span className=\"badge notification-badge white-text new pink\">{unReadCount}</span>\r\n         ) : null}\r\n       </li>\r\n     </>\r\n   );\r\n }\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{      \r\n        notifications :state.notifications.notifications,\r\n        userId :state.userLogin.userId  // logged in User Id   \r\n    }\r\n  }  \r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      getNotifications: (userid) => dispatch(getAllNotifications(userid)),\r\n      setNotificationStatus : (id, isRead) => dispatch(setNotificationStatus(id, isRead)),\r\n      removeIncidentData : () => dispatch(removeIncidentData()),\r\n      getIncidentById: (incidentId) => dispatch(getIncidentById(incidentId)), \r\n    };\r\n};\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Notifications);\r\n  ","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\AssigneeDropdown.js",["275"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport {  updateIncident, deleteAttachment } from \"../../store/actions/incidentsActions\";\r\nimport M from \"materialize-css\";\r\nimport { connect } from \"react-redux\";\r\nimport { allUsers } from \"../../store/actions/usersActions\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction AssigneeDropdown({getAllAssignees, allAssignees, updateIncidentByField, setAssignee ,assigneeName, setAssigneeName }) {\r\n\r\n    const [assigneeList, setAssigneeList] = useState(allAssignees);\r\n    const [assgineeSearchText, setAssgineeSearchText] = useState(\"\");\r\n    const assigneeRef = useRef();\r\n\r\n    const dropDownId = \"dropdownAssginee\" + uuidv4();\r\n\r\n    useEffect(() => {       \r\n       // getAllAssignees();\r\n      }, []); // get assignee on first render only\r\n    \r\n    useEffect(() => {\r\n       console.log(\"Set hook edit\");\r\n        setAssigneeList(allAssignees);\r\n      }, [allAssignees]);\r\n\r\n      useEffect(() => {\r\n        setMaterializeCSS();\r\n      }, [allAssignees]);\r\n\r\n      \r\n  const setMaterializeCSS = () => {\r\n    var options = {\r\n      closeOnClick: false,\r\n    };\r\n    M.Dropdown.init(assigneeRef.current, options);   \r\n  }\r\n\r\n  const assigneeSelected = (event, userId) => {\r\n    event.preventDefault();\r\n    let currentAssignee = allAssignees.find((assignee) => {\r\n      return assignee.Id === userId;\r\n    });\r\n\r\n    setAssignee(userId);\r\n    setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);\r\n    if(updateIncidentByField)\r\n         updateIncidentByField(\"AssignedTo\" , userId); \r\n\r\n    var assigneeDropdown = M.Dropdown.getInstance(assigneeRef.current);\r\n    assigneeDropdown.close();\r\n  };\r\n\r\n  const searchAssignee = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"searching....\");\r\n    setAssgineeSearchText(event.target.value);\r\n    console.log(\"assgineeSearchText\", assgineeSearchText);\r\n    let newList = [];\r\n    if (event.target.value !== \"\")\r\n      newList = allAssignees.filter((assignee) => {\r\n        return (\r\n          assignee.FirstName.toUpperCase().startsWith(\r\n            event.target.value.toUpperCase()\r\n          ) ||\r\n          assignee.LastName.toUpperCase().startsWith(\r\n            event.target.value.toUpperCase()\r\n          )\r\n        );\r\n      });\r\n\r\n    if (newList !== undefined && newList.length !== 0) {\r\n      //check if there is atlease one assignee\r\n      newList = [].concat(newList);\r\n    } else {\r\n      //if search found nothing, show all assignees\r\n      newList = allAssignees.slice(0, allAssignees.length);\r\n    }\r\n    setAssigneeList(newList);\r\n  };\r\n\r\n\r\n  if (allAssignees && !assigneeList) {\r\n    setAssigneeList(allAssignees);\r\n  }\r\n\r\n\r\n    return (\r\n        <>\r\n             <input\r\n                            readOnly\r\n                            required\r\n                            type=\"text\"\r\n                            className=\"dropdown-trigger  align-right\"\r\n                            id=\"assignee\"\r\n                            data-target={dropDownId}\r\n                            placeholder=\"Select User\"\r\n                            ref={assigneeRef}\r\n                            value={assigneeName}\r\n                          \r\n                          />\r\n\r\n                          <ul id={dropDownId} className=\"dropdown-content\">\r\n                            <li className=\"search-assignee-box\">\r\n                              <input\r\n                              // onClick={()=> alert(\"clicker\")}\r\n                            //   onKeyDown={(e)=> console.log(e.target.value)}\r\n                               // value={assgineeSearchText}\r\n                                type=\"text\"\r\n                                placeholder=\"Search Assignee\"\r\n                                onChange={searchAssignee}\r\n                              />\r\n                            </li>\r\n                            {!assigneeList\r\n                              ? null\r\n                              : assigneeList.map((user) => {\r\n                                  return (\r\n                                    <li\r\n                                      key={user.Id}\r\n                                      onClick={(event) => assigneeSelected(event,user.Id)}\r\n                                    >\r\n                                      <a className=\"indigo-text\" href=\"#!\">\r\n                                        {user.FirstName + \" \" + user.LastName}\r\n                                      </a>\r\n                                    </li>\r\n                                  );\r\n                                })}\r\n                          </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      allAssignees: state.users.users,\r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      IncidentDetailError : state.incidents.IncidentDetailError     // if api ERROR\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      getAllAssignees: () => dispatch(allUsers()),    \r\n      updateIncident: (parameters) => dispatch(updateIncident(parameters)),   \r\n        \r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(AssigneeDropdown);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comments.js",["276","277","278"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OldestOpen.js",["279","280","281"],"import React ,{useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { GetOldest5UnresolvedIncidents } from '../../../store/actions/dashboardActions';\r\nimport moment from \"moment\";\r\nimport {  useHistory  } from 'react-router-dom';\r\n\r\nfunction FiveOldestOpenIncidents({Oldest5UnresolvedIncidents, getOldest5UnresolvedIncidents}) {\r\n\r\n  useEffect(() => {\r\n    getOldest5UnresolvedIncidents();\r\n}, [])\r\n\r\nif(Oldest5UnresolvedIncidents == null || Oldest5UnresolvedIncidents.length===0 )\r\n return <h3>Loading...</h3>\r\n\r\n    return (\r\n      <div className=\"col s12 m12 l6\">\r\n        <div className=\"widget\">\r\n          <h5> 5 Oldest Unresolved Incidents</h5>\r\n\r\n          {\r\n            Oldest5UnresolvedIncidents.map(incident => {\r\n              return (\r\n                <Incident key={incident.Id} incident={incident} />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst Incident = ({incident, dispatch}) => {\r\n\r\n  const statusName = (status) => {\r\n    switch(status){\r\n      case \"N\":\r\n        return \"New\";\r\n      case \"C\":\r\n        return \"Closed\";\r\n      case \"A\":\r\n        return \"Approved\";\r\n      case \"I\":\r\n        return \"In Progress\";\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  const history = useHistory();\r\n  const openIncident = (id) => {  \r\n  //  dispatch(removeIncidentData()); // So that user does not see old data that is stored in redux (and local storage)\r\n    let path = '/Incident/' + id;      \r\n      history.push(path);\r\n  }\r\n\r\n    return (\r\n      <div className=\"incident\">\r\n        <div className=\"time-status\">\r\n        <span className=\"timestamp\"\r\n          title={moment(incident.CreatedAT).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n        >\r\n          {moment(incident.CreatedAT).fromNow()}{\" \"}\r\n        </span>\r\n         \r\n          <span className=\"status\">\r\n            {statusName(incident.Status)}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"title\">\r\n          <a onClick={()=> openIncident(incident.Id)} >\r\n            {incident.Title}\r\n          </a>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      Oldest5UnresolvedIncidents: state.dashboard.Oldest5UnresolvedIncidentsData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getOldest5UnresolvedIncidents: () => dispatch(GetOldest5UnresolvedIncidents()),     \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FiveOldestOpenIncidents);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\DayByDayCount.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OverallWidget.js",["282"],"import React ,{useEffect, useState} from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport {GetOverallWidget} from '../../../store/actions/dashboardActions';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction OverallWidget({overallWidgetData, getOverallWidgetData}) {\r\n    const [chartOptions, setChartOptions] = useState({});\r\n\r\n    useEffect(() => {\r\n        getOverallWidgetData();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n     \r\n        const options = {\r\n            chart: {\r\n                type: 'pie',\r\n                // height: (80) + '%',\r\n            },\r\n            title: {\r\n                text: ''\r\n            },\r\n            credits:\r\n            {\r\n                enabled: false\r\n            },\r\n            tooltip: {\r\n                pointFormat: '{series.name}: <b>{point.y} ({point.percentage:.1f}%)</b>'\r\n            },\r\n            plotOptions: {\r\n                pie: {\r\n                    allowPointSelect: true,\r\n                    cursor: 'pointer',\r\n                    dataLabels: {\r\n                        enabled: false\r\n                    },\r\n                    showInLegend: true\r\n                }\r\n            },\r\n            series: [{\r\n                name: 'Share',\r\n                data: [\r\n                    //{ name: 'New', y: overallWidgetData.New, color: '#F57C00' },\r\n                    { name: 'New', y: overallWidgetData.New,   color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(245,124,0,1)'],\r\n                            [1, 'rgba(255,226,0,1)']\r\n                        ]\r\n                    } },\r\n                    //{ name: 'In Progress', y: overallWidgetData.InProgress, color: '#1976D2' },\r\n                    { name: 'In Progress', y: overallWidgetData.InProgress, color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(25,118,210,1)'],\r\n                            [1, 'rgba(0,237,255,1)']\r\n                        ]\r\n                    } },\r\n                    { name: 'Closed', y: overallWidgetData.Closed,  color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(67,160,71,1)'],\r\n                            [1, 'rgba(0,255,187,1)']\r\n                        ]\r\n                    } },\r\n                   // { name: 'Closed', y: overallWidgetData.Closed, color: '#43A047' },\r\n                    { name: 'Approved', y: overallWidgetData.Approved,  color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(27,94,32,1)'],\r\n                            [1, 'rgba(19,255,0,1)']\r\n                        ]\r\n                    } },\r\n                    { name: 'Late', y: overallWidgetData.Late,  color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(183,28,28,1)'],\r\n                            [1, 'rgba(255,140,0,1)']\r\n                        ]\r\n                    } }\r\n\r\n                    //{ name: 'Approved', y: overallWidgetData.Approved, color: '#1B5E20' },\r\n                    //{ name: 'Late', y: overallWidgetData.Late, color: '#B71C1C' }\r\n                ]\r\n            }]\r\n        }\r\n        try{\r\n            setChartOptions(options);\r\n        }catch(e){}\r\n    \r\n    }, [overallWidgetData])\r\n\r\n\r\n    return (\r\n        <div className=\"col s12 m12 l6 widget chart-widget\">\r\n            <h5> Overall</h5>\r\n            <HighchartsReact highcharts={Highcharts} options={chartOptions} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{   \r\n        userId :state.userLogin.userId,  // logged in User Id  \r\n        overallWidgetData: state.dashboard.OverallWidgetData\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getOverallWidgetData: () => dispatch(GetOverallWidget()),     \r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(OverallWidget);\r\n\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\LastFive.js",["283","284","285"],"import React ,{useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { GetLast5Incidents } from '../../../store/actions/dashboardActions';\r\nimport moment from \"moment\";\r\n\r\nimport {  useHistory  } from 'react-router-dom';\r\n\r\nfunction LastFive({Last5IncidentsData, getLast5IncidentsData, dispatch}) {\r\n\r\n  useEffect(() => {\r\n    getLast5IncidentsData();\r\n}, [])\r\n\r\n\r\nif(Last5IncidentsData == null || Last5IncidentsData.length===0 )\r\n return <h3>Loading...</h3>\r\n\r\n    return (\r\n      <div className=\"col s12 m12 l6\">\r\n        <div className=\"widget\">\r\n          <h5> Last 5 Incidents</h5>\r\n\r\n          {\r\n            Last5IncidentsData.map(incident => {\r\n              return (\r\n                <Incident key={incident.Id} incident={incident} />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst Incident = ({incident, dispatch}) => {\r\n\r\n  const statusName = (status) => {\r\n    switch(status){\r\n      case \"N\":\r\n        return \"New\";\r\n      case \"C\":\r\n        return \"Closed\";\r\n      case \"A\":\r\n        return \"Approved\";\r\n      case \"I\":\r\n        return \"In Progress\";\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  const history = useHistory();\r\n  const openIncident = (id) => {  \r\n  //  dispatch(removeIncidentData()); // So that user does not see old data that is stored in redux (and local storage)\r\n    let path = '/Incident/' + id;      \r\n      history.push(path);\r\n  }\r\n\r\n    return (\r\n      <div className=\"incident\">\r\n        <div className=\"time-status\">\r\n        <span className=\"timestamp\"\r\n          title={moment(incident.CreatedAT).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n        >\r\n          {moment(incident.CreatedAT).fromNow()}{\" \"}\r\n        </span>\r\n         \r\n          <span className=\"status\">\r\n            {statusName(incident.Status)}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"title\">\r\n          <a onClick={()=> openIncident(incident.Id)} >\r\n            {incident.Title}\r\n          </a>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      Last5IncidentsData: state.dashboard.Last5IncidentsData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getLast5IncidentsData: () => dispatch(GetLast5Incidents()),     \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LastFive);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\MostAssignedByUser.js",["286","287"],"import React, {useEffect} from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport {GetMostAssignedToUsers} from '../../../store/actions/dashboardActions';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction MostAssignedByUser({MostAssignedIncidentsData, getMostAssignedToUsers}) {\r\n\r\n  useEffect(() => {\r\n    getMostAssignedToUsers();\r\n  }, []);\r\n\r\n   if(MostAssignedIncidentsData.length ===0 || MostAssignedIncidentsData == null )\r\n   return (<h3>loading..</h3>);\r\n\r\n  let data = [];\r\n\r\n  try{\r\n    data =  [\r\n      // { name: MostAssignedIncidentsData[0].Name, y: parseInt(MostAssignedIncidentsData[0].Count), color:'#B71C1C' },\r\n      // { name: MostAssignedIncidentsData[1].Name, y: parseInt(MostAssignedIncidentsData[1].Count), color:'#E53935' },\r\n      // { name: MostAssignedIncidentsData[2].Name, y: parseInt(MostAssignedIncidentsData[2].Count), color:'#EF5350' },\r\n      // { name: MostAssignedIncidentsData[3].Name, y: parseInt(MostAssignedIncidentsData[3].Count), color:'#E57373' },\r\n      // { name: MostAssignedIncidentsData[4].Name, y: parseInt(MostAssignedIncidentsData[4].Count), color:'#FFCDD2' }  \r\n      \r\n      { name: MostAssignedIncidentsData[0].Name, y: parseInt(MostAssignedIncidentsData[0].Count),  color: {\r\n        linearGradient:  [0, 0, 0, 300],\r\n        stops: [\r\n            [0, 'rgba(255,114,0,1)'],\r\n            [1, 'rgba(183,28,28,1)']           \r\n        ]\r\n      } },\r\n      { name: MostAssignedIncidentsData[1].Name, y: parseInt(MostAssignedIncidentsData[1].Count),color: {\r\n        linearGradient:  [0, 0, 0, 300],\r\n        stops: [\r\n            [0, 'rgba(255,127,0,1)'],\r\n            [1, 'rgba(229,57,53,1)']           \r\n        ]\r\n      }  },\r\n      { name: MostAssignedIncidentsData[2].Name, y: parseInt(MostAssignedIncidentsData[2].Count), color: {\r\n        linearGradient:  [0, 0, 0, 300],\r\n        stops: [\r\n            [0, 'rgba(255,127,0,1)'],\r\n            [1, 'rgba(239,83,80,1)']           \r\n        ]\r\n      }  },\r\n      { name: MostAssignedIncidentsData[3].Name, y: parseInt(MostAssignedIncidentsData[3].Count), color: {\r\n        linearGradient:  [0, 0, 0, 300],\r\n        stops: [\r\n            [0, 'rgba(230,255,46,1)'],\r\n            [1, 'rgba(160,157,53,1)']           \r\n        ]\r\n      }  },\r\n      { name: MostAssignedIncidentsData[4].Name, y: parseInt(MostAssignedIncidentsData[4].Count), color: {\r\n        linearGradient:  [0, 0, 0, 300],\r\n        stops: [\r\n            [0, 'rgba(104,255,38,1)'],\r\n            [1, 'rgba(46,139,44,1)']           \r\n        ]\r\n      }  }  \r\n  ];\r\n\r\n  }\r\n  catch(err){\r\n    console.log(\"error\", err);\r\n  }\r\n\r\n    const options = {\r\n        title: {\r\n          text: 'My chart'\r\n        },\r\n        chart: {    \r\n          type: 'bar',\r\n          // height: (70) + '%',\r\n          //width: (100) + '%',\r\n         },\r\n         title:{\r\n            text:''\r\n        },\r\n        credits:\r\n        {\r\n            enabled: false\r\n        },\r\n        legend: {\r\n            enabled: false\r\n        },\r\n        yAxis: {\r\n            title: {\r\n                text: ''\r\n            }\r\n        },\r\n    \r\n        xAxis: {\r\n            type: 'category',\r\n            min: 0,\r\n            labels: {\r\n                animate: true\r\n            }\r\n        },\r\n      \r\n         series: [{\r\n          name: '',\r\n          dataSorting: {\r\n            enabled: true,\r\n            sortKey: 'y'\r\n        },\r\n          data: data\r\n      }]\r\n      }\r\n\r\n    return (\r\n      <div className=\"col s12 m12 l6 widget\">\r\n        <div className=\"\">\r\n          <h5> Most Assigned To Users</h5>\r\n          <HighchartsReact highcharts={Highcharts} options={options} />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      MostAssignedIncidentsData: state.dashboard.MostAssignedIncidentsData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getMostAssignedToUsers: () => dispatch(GetMostAssignedToUsers()),     \r\n  }\r\n}\r\n\r\n// create \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MostAssignedByUser);\r\n\r\n//please invert binary tree\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\KPIBar.js",["288","289"],"import React,{useEffect, useState} from 'react'\r\nimport '../../../styles/kpibar.css'\r\nimport { GetKPI } from '../../../store/actions/dashboardActions';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction KPIBar({getKPIData, userId, kpiData}) {\r\n \r\n  //console.log(\"kpiData\",kpiData);\r\n  \r\n  useEffect(() => {    \r\n    getKPIData(userId); \r\n  }, [])\r\n\r\n \r\n    return (     \r\n      <div className=\"row kpibar\">       \r\n        <KPI value={kpiData.New} text=\"NEW\" color=\"new-color\" />\r\n        <KPI value={kpiData.InProgress} text=\"IN PROGRESS\" color=\"inprogress-color\" />\r\n        <KPI value={kpiData.Closed} text=\"CLOSED\" color=\"closed-color\" />\r\n        <KPI value={kpiData.Approved} text=\"APPROVED\" color=\"approved-color\" />\r\n        <KPI value={kpiData.Late} text=\"LATE\" color=\"late-color\"/>\r\n        <KPI value={kpiData.AssignedToMe} text=\"ASSINGED TO YOU\" color=\"assignedToMe-color\"/>        \r\n      </div>\r\n    );\r\n}\r\n\r\nfunction KPI({value, text, color}) {\r\n  return (\r\n    <div className=\"col l2 m6 s6\">\r\n      <div className={\"kpi \" + color}  >\r\n        <div className=\"kpi-value\">{value}</div>\r\n        <div className=\"kpi-text\">{text}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      kpiData: state.dashboard.KPIData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      getKPIData : (userId) => dispatch(GetKPI(userId)),     \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(KPIBar);\r\n\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDescription.js",["290"],"import { React, useEffect, useState, useRef } from \"react\";\r\n\r\nimport { updateIncident } from \"../../../store/actions/incidentsActions\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nfunction IncidentDescription({type, incidentData, updateIncident, userId}) {\r\n\r\n    const [description, setDescription] = useState(\"\");\r\n    const [editDescription, setEditDescription] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setDescription(type === \"description\"? incidentData.Description : incidentData.AdditionalData);       \r\n       }, [incidentData, type])\r\n\r\n    const updateIncidentByField = (field , value) => {    \r\n        let parameters = {\r\n          IncidentId : incidentData.Id,\r\n          Parameter : field,\r\n          Value : value,\r\n          UserId : userId\r\n        };\r\n        updateIncident(parameters); // Calling action here\r\n      }\r\n\r\n    const descriptionEditClick = () =>{\r\n        setEditDescription(!editDescription);\r\n        setDescription(type === \"description\"? incidentData.Description : incidentData.AdditionalData);\r\n       \r\n      }\r\n      const descriptionEditCancel = () =>{\r\n        setDescription(type === \"description\"? incidentData.Description : incidentData.AdditionalData);\r\n        setEditDescription(false);\r\n      }\r\n    \r\n      const descriptionEditSave = () =>{\r\n        if(description.trim() === \"\"){\r\n          alert(\"Description cannot be empty.\");\r\n          setDescription(incidentData.Description);\r\n          return;\r\n        }\r\n        type === \"description\"\r\n        ? updateIncidentByField(\"Description\", description.trim())\r\n        : updateIncidentByField(\"AdditionalData\", description.trim());\r\n       \r\n        setEditDescription(false);\r\n      }\r\n    return (\r\n        <>\r\n                 <p className=\"heading left-align indigo-text darken-4\">\r\n                    {\" \"}\r\n                    {/* Description  */}\r\n                    {type === \"description\" ? \"Description\" : \"Additional Details\"}\r\n                    <i\r\n                      className=\"inline-icon material-icons actions-icon\"\r\n                      onClick={descriptionEditClick}\r\n                    >\r\n                      edit\r\n                    </i>\r\n                  </p>\r\n                  {!editDescription ? (\r\n                    <>\r\n                      <div className=\"input-field\">\r\n                        <p className=\"darkslategrayText bigTextScroll\">\r\n                          {description}\r\n                        </p>\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <div className=\"input-field\">\r\n                        {\" \"}\r\n                        {/* Description Edit */}\r\n                        <textarea\r\n                          id=\"description\"\r\n                          className=\"materialize-textarea\"\r\n                          value={description}\r\n                          onChange={(e) => setDescription(e.target.value)}\r\n                        ></textarea>\r\n                        <button\r\n                          title=\"Save\"\r\n                          className=\"btn green darken-2 right updateBtn\"\r\n                          onClick={descriptionEditSave}\r\n                        >\r\n                          <i className=\"actions-icon material-icons\">check</i>\r\n                        </button>\r\n                        <button\r\n                          title=\"Cancel\"\r\n                          className=\"btn yellow darken-2 right updateBtn\"\r\n                          onClick={descriptionEditCancel}\r\n                        >\r\n                          <i className=\"actions-icon material-icons\">cancel</i>\r\n                        </button>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {     \r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,    \r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {     \r\n      updateIncident: (parameters) => dispatch(updateIncident(parameters)),  \r\n    };\r\n  };\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(IncidentDescription);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentTitle.js",["291","292"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\usersActions.js",["293"],"import axios from 'axios';\r\nimport { usersUrls } from \"../../api/apiURLs\";\r\n\r\nexport const  allUsers = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.allUsersUrl\r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const users = response.data;\r\n              dispatch({ type: 'ALL_USERS', users });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n  export const userssWithPage = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.userssWithPageUrl +\r\n                    \"PageSize=\" + parameters.PageSize +\"&PageNumber=\" + parameters.PageNumber \r\n                    + \"&SortBy=q&SortDirection=q&Search=\" + parameters.Search;\r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const data = response.data;                   \r\n              dispatch({ type: 'USERS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n\r\n  export const addNewUser = (formData) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.addNewUserUrl \r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = response.data;\r\n            //  dispatch({ type: 'INCIDENTS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\notificationsActions.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\incidentsActions.js",["294","295","296","297","298","299","300"],"import axios from 'axios';\r\nimport { incidentsUrls } from \"../../api/apiURLs\";\r\nimport { incidentUpdatedSignalR } from \"../../signalR/sender\";\r\n\r\nexport var cancel;\r\n\r\nexport const incidentsWithPage = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.incidentsWithPageUrl +\r\n                    \"PageSize=\" + parameters.PageSize +\"&PageNumber=\" + parameters.PageNumber \r\n                    + \"&SortBy=q&SortDirection=q&Search=\" + parameters.Search;     \r\n        axios({\r\n          method: 'GET',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n              dispatch({ type: 'INCIDENTS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err.message);\r\n                   if(err.message.toLowerCase()==\"request failed with status code 401\")\r\n                         dispatch({ type: 'SIGN_OUT', data:\"token invalid\" });\r\n\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err)\r\n                   dispatch({ type: 'INCIDENTS_WITH_PAGE_ERROR', data });\r\n          });    \r\n    }\r\n  }\r\n\r\n  export const addNewIncident = (formData) => {\r\n    return (dispatch, getState) => {      \r\n      //console.log(\"add new incident action\");\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.addNewIncidentUrl\r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = true;\r\n              dispatch({ type: 'NEW_INCIDENT_STATUS', data });\r\n          })\r\n          .catch((err)=>{  \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n           let data = err.message;\r\n              console.log(data);\r\n            dispatch({ type: 'NEW_INCIDENT_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const addNewComment = (formData) => {\r\n    return (dispatch, getState) => {      \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.addNewCommentUrl\r\n         axios.post(url, formData)\r\n           .then((response)=>{            \r\n             const comment = response.data;\r\n            // console.log(\"Comment\", comment);\r\n              dispatch({ type: 'ADD_NEW_COMMENT', data: comment });\r\n              incidentUpdatedSignalR(comment.IncidentId, comment.UserId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(\"err\", err);\r\n            const data = \"while adding comment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const deleteComment = (commentId, incidentId, userId) => {\r\n    return (dispatch, getState) => {      \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.deleteCommentUrl\r\n                    + \"commentId=\" + commentId\r\n                    + \"&incidentId=\" + incidentId\r\n                    + \"&userId=\" + userId\r\n        axios.get(url)\r\n          .then((response)=>{    \r\n              dispatch({ type: 'COMMENT_DELETED', data: commentId });\r\n              incidentUpdatedSignalR(incidentId, userId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n               dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while delteing comment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const updateIncident = (parameters) => {\r\n    return (dispatch, getState) => {      \r\n     // console.log(comment);\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.updateIncidentUrl\r\n        axios.post(url, parameters)\r\n          .then((response)=>{  \r\n              dispatch({ type: 'INCIDENTS_UPDATE', parameters });\r\n              incidentUpdatedSignalR(parameters.IncidentId, parameters.UserId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n               dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while updating incident: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const updateComment = (comment) => {\r\n    return (dispatch, getState) => {    \r\n       console.log(comment);\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.updateCommentUrl\r\n        axios.post(url, comment)\r\n          .then((response)=>{  \r\n          //  dispatch(getIncidentById(comment.IncidentId)); \r\n        //  dispatch({ type: 'COMMENT_UPDATE', data:comment });\r\n          incidentUpdatedSignalR(comment.IncidentId, comment.UserId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while updating comment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n\r\n  export const getIncidentById = (incidentId) => {\r\n    return (dispatch, getState) => {  \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.getIncidentByIdUrl + incidentId; \r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const data = response.data;                           \r\n              dispatch({ type: 'INCIDENTS_BY_ID', data });\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while getting data for incident: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const deleteAttachment = (type, userid, incidentId , file) => {\r\n    return (dispatch, getState) => {    \r\n           axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.deleteAttachmentUrl\r\n                + \"type=\" + type\r\n                + \"&commentId=\" + file.CommentId \r\n                + \"&incidentId=\" + incidentId\r\n                + \"&userId=\" + userid\r\n                + \"&fileId=\" + file.Id\r\n                + \"&filename=\" + file.FileName\r\n                + \"&contentType=\" + file.ContentType\r\n        axios.get(url)\r\n          .then((response)=>{      \r\n                if (type === \"comment\")\r\n                  dispatch({ type: \"COMMENT_ATTACHMENT_DELETED\", data: file });\r\n                else\r\n                dispatch({ type: \"INCIDENT_ATTACHMENT_DELETED\", data: file });\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while delteing attachment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const removeIncidentData = () => {       \r\n         return   { type: 'REMOVE_INCIDENT_DATA', data : null};\r\n         \r\n  }\r\n\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\userLoginActions.js",["301"],"import axios from 'axios';\r\nimport qs from 'qs';\r\nimport { usersUrls } from \"../../api/apiURLs\";\r\n\r\n// export const logIn = (credentials) => {\r\n//     return (dispatch, getState) => {     \r\n//         axios({\r\n//             method: 'post',\r\n//             //url: baseUrl + 'applications/' + appName + '/dataexport/plantypes' + plan,\r\n//             url : usersUrls.tokenUrl,\r\n//             headers: {'Content-type': 'application/x-www-form-urlencoded'}, \r\n//             data: qs.stringify({\r\n//                 grant_type: 'password',\r\n//                 username: credentials.username,\r\n//                 password: credentials.password \r\n//             }),\r\n//           })\r\n//           .then((response)=>{              \r\n//               const loginData = {\r\n//                   token : response.data.access_token,\r\n//                   Name :  response.data.Name,\r\n//                   User_Id :  response.data.User_Id\r\n//               }\r\n//               dispatch({ type: 'LOGIN_PASS', loginData });\r\n//           })\r\n//           .catch((err)=>{\r\n//                    dispatch({ type: 'LOGIN_FAIL'});\r\n//                    console.log(err);\r\n//           });    \r\n//     }\r\n//   }\r\n\r\n  export const logIn = (credentials) => {\r\n    return (dispatch, getState) => {   \r\n         axios({\r\n            method: 'post',\r\n            //url: baseUrl + 'applications/' + appName + '/dataexport/plantypes' + plan,\r\n            url : usersUrls.authenticateUrl,\r\n            headers: {'Content-type': 'application/json'}, \r\n            data: {               \r\n                Username: credentials.username,\r\n                Password: credentials.password \r\n            },\r\n          })\r\n          .then((response)=>{              \r\n              const loginData = {\r\n                  token : response.data.Token,\r\n                  Name :  response.data.user.FirstName + \" \" +  response.data.user.LastName,\r\n                  User_Id :  response.data.user.Id\r\n              }\r\n              dispatch({ type: 'LOGIN_PASS', loginData });\r\n              dispatch({ type: 'UNREAD_CONVERSATION', data:  response.data.UnreadConversationCount });            \r\n          })\r\n          .catch((err)=>{\r\n                   dispatch({ type: 'LOGIN_FAIL'});\r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n  \r\n  \r\n  export const signOut = () => {\r\n    return (dispatch, getState) => {     \r\n      dispatch({ type: 'SIGN_OUT', data:null });\r\n    }\r\n  }\r\n  \r\n  export const signUp = (newUser) => {\r\n    return (dispatch, getState) => {     \r\n    }\r\n  }\r\n\r\n  export const updateHubId = (hubId, userId) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.updateHubIdUrl \r\n        axios.post(url, {\r\n          HubId : hubId,\r\n          UserId : userId\r\n        })\r\n          .then((response)=>{          \r\n          \r\n             dispatch({ type: 'UPDATE_HUB', hubId });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\api\\apiURLs.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\messagesActions.js",["302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318"],"import axios from 'axios';\r\nimport { messagesUrls } from \"../../api/apiURLs\";\r\nimport { sendMessageSignalR } from \"../../signalR/sender\";\r\n\r\nexport var cancel;\r\n\r\nexport const messagesByUser = (userId) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.messagesByUserUrl + userId;                   \r\n        axios({\r\n          method: 'GET',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n              dispatch({ type: 'MESSAGES_BY_USER', data });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err.message);\r\n                   if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                       dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n\r\n  export const conversationsByUser = (userId) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.conversationsByUserUrl + userId;                   \r\n        axios({\r\n          method: 'GET',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n              dispatch({ type: 'CONVERSATIONS_BY_USER', data });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err.message);\r\n                   if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                      dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n\r\n  export const messagesByConversations = (conversationId) => {\r\n    \r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.messagesByConversationsUrl + conversationId;                   \r\n        axios({\r\n          method: 'GET',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n            // console.log(\"Messages Action\", data);\r\n              dispatch({ type: 'MESSAGES_BY_CONVERSATIONS', data });\r\n          })\r\n          .catch((err)=>{  \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });  \r\n                   console.log(err.message);\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n\r\n  export const replyMessage = (formData, conversationId) => {\r\n    return (dispatch, getState) => {      \r\n      //console.log(\"add new incident action\");\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.sendMessageUrl\r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = true;           \r\n             dispatch({ type: 'NEW_MESSAGE', data:response.data[0] });\r\n           //  dispatch(messagesByConversations(conversationId));\r\n             console.log(\"conversationId, response.data.To\");\r\n             sendMessageSignalR(conversationId, response.data[0].To, response.data[0], false);\r\n             // dispatch({ type: 'NEW_MESSAGE', data });\r\n          })\r\n          .catch((err)=>{  \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = err.message;\r\n            console.log(data);\r\n           \r\n          });   \r\n    }\r\n  }\r\n\r\n  \r\n  export const receiveMessage = (newMessage) => {\r\n    return (dispatch, getState) => {      \r\n     dispatch({ type: 'NEW_MESSAGE', data:newMessage });\r\n    }\r\n  }\r\n  export const receiveConversation = (newConversation) => {\r\n    console.log(\"newConversation\", newConversation);\r\n    return (dispatch, getState) => {      \r\n     dispatch({ type: 'NEW_CONVERSATION', data:newConversation });\r\n    }\r\n  }\r\n\r\n  export const selectConversation = (conversation) => {\r\n    return (dispatch, getState) => {      \r\n     dispatch({ type: 'CONVERSATION_SELECTED', data:{...conversation} });\r\n    }\r\n  }\r\n\r\n \r\n  export const sendNewMessage = (formData) => {\r\n    return (dispatch, getState) => {      \r\n      //console.log(\"add new incident action\");\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.sendMessageUrl\r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = true;\r\n             dispatch({ type: 'NEW_CONVERSATION', data:response.data[1] });\r\n             sendMessageSignalR(null, response.data[1].User2, response.data[1], true);\r\n          })\r\n          .catch((err)=>{  \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = err.message;\r\n            console.log(data);\r\n           \r\n          });   \r\n    }\r\n  }\r\n \r\n\r\n  export const deleteMessage = (messageId) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.deleteMessageUrl + messageId;                   \r\n        axios({\r\n          method: 'POST',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n             console.log(data);\r\n              dispatch({ type: 'DELETE_MESSAGE', data:messageId });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err);\r\n                   if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                      dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n\r\n  export const changeMessageStatus = (messageId, status) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n      //dispatch({ type: 'CHANGE_MESSAGE_STATUS', data:{messageId, status} });\r\n      //return;\r\n\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.changeMessageStatusUrl + messageId + \"&Status=\" + status;                   \r\n        axios({\r\n          method: 'POST',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n             console.log(data);\r\n             dispatch({ type: 'CHANGE_MESSAGE_STATUS', data:{messageId, status} });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err);\r\n                   if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                      dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n\r\n  \r\n  export const deleteConversation = (conversationId) => {\r\n    return (dispatch, getState) => {    \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.deleteConversationUrl + conversationId;                   \r\n        axios({\r\n          method: 'POST',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n             //console.log(data);\r\n              dispatch({ type: 'DELETE_CONVERSATION', data:conversationId });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err);\r\n                   if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                      dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\SendMessage.js",["319"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\dashboardActions.js",["320","321","322","323","324"],"import axios from 'axios';\r\nimport { dashboardUrls } from \"../../api/apiURLs\";\r\n\r\nexport const  GetKPI = (userId) => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.kpiUrl + userId;       \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n          \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'KPI', data });\r\n          })\r\n          .catch((err)=>{      \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                   dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });           \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n  export const  GetOverallWidget = () => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.overallWidgetUrl ;      \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n                \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'OVERALLWIDGET', data });\r\n          })\r\n          .catch((err)=>{     \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n             dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });            \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n\r\n  export const  GetLast5Incidents = () => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.last5IncidentsUrl ;      \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n          \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'LAST5INCIDENTS', data });\r\n          })\r\n          .catch((err)=>{     \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n               dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });            \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n \r\n\r\n  export const  GetOldest5UnresolvedIncidents = () => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.oldest5UnresolvedIncidentsUrl ;      \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n           \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'OLDEST5UNRESOLVEDINCIDENTS', data });\r\n          })\r\n          .catch((err)=>{        \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n               dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });         \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n \r\n  export const  GetMostAssignedToUsers = () => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.mostAssignedToUsersIncidentsUrl ;      \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n                 \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'MOSTASSIGNEDTOUSERS', data });\r\n          })\r\n          .catch((err)=>{    \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });             \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comment.js",["325","326","327","328","329"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\signalR\\sender.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\ComposeMessage.js",["330","331"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { sendNewMessage, conversationsByUser } from \"../../store/actions/messagesActions\";\r\nimport  AssigneeDropdown  from \"../../components/Incidents/AssigneeDropdown\";\r\nimport '../../styles/composemessage.css'\r\n\r\nfunction ComposeMessage({\r\n    userId,\r\n    allUsers,\r\n    UserMessages,\r\n    sendNewMessage,\r\n    conversationsByUser,\r\n    setComposeToggle,\r\n    newConversationAdded\r\n}) {\r\n\r\n\r\n    const [receiver, setReceiver] = useState(null);\r\n    const [receivereName, setReceiverName] = useState(\"\");  \r\n    const [messageText, setMessageText] = useState(\"\");\r\n  \r\n    const sendMessage = (event) => {\r\n        \r\n        event.preventDefault();\r\n\r\n        if(messageText.trim() == \"\" || receiver == null){\r\n            alert(\"Please select a user and type message.\");\r\n            return;\r\n        }\r\n       \r\n        const formData = new FormData(); \r\n\r\n         formData.append(\"From\", userId); \r\n         formData.append(\"To\", receiver);\r\n         formData.append(\"MessageText\", messageText);     \r\n      \r\n        sendNewMessage(formData);\r\n\r\n        setMessageText(\"\");\r\n        setReceiverName(\"\");\r\n        setReceiver(null);\r\n        //conversationsByUser(userId);\r\n        setComposeToggle(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"compose-message-container\">    \r\n            <h5>Compose New Message</h5>\r\n                    <form action=\"#\">\r\n                        <div className=\"field\">\r\n                            <AssigneeDropdown\r\n                                updateIncidentByField={null}\r\n                                setAssignee={setReceiver}\r\n                                assigneeName={receivereName}\r\n                                setAssigneeName={setReceiverName}\r\n                            />\r\n                        </div>\r\n                <div className=\"input-field\">\r\n                    <textarea className=\"materialize-textarea\" cols=\"30\" value={messageText} rows=\"10\" onChange={(e) => setMessageText(e.target.value)} placeholder=\"Write message here\" required></textarea>\r\n                </div>\r\n\r\n                <div>\r\n                    <button\r\n                        className=\" btn green darken-2 updateBtn\"\r\n                        onClick={(event) => sendMessage(event)}\r\n                    >\r\n                        <span>Send</span>\r\n                        <i className=\"material-icons right\">send</i>\r\n                    </button>\r\n\r\n                    <button\r\n                        className=\" btn yellow darken-2 updateBtn\"\r\n                        onClick={() => setComposeToggle(false)}\r\n                    >\r\n                        <span>Cancel</span>\r\n                        <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                </div>\r\n                    </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n        allUsers: state.users.users,\r\n        UserMessages : state.messages.Messages,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendNewMessage: (formData) => dispatch(sendNewMessage(formData)),   \r\n        conversationsByUser: (userId) => dispatch(conversationsByUser(userId)),  \r\n    }\r\n  }\r\n\r\n  export default connect(mapStateToProps, mapDispatchToProps)(ComposeMessage); \r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Reply.js",["332","333","334"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { replyMessage } from \"../../store/actions/messagesActions\";\r\n\r\nconst Reply = ({\r\n    userId,      \r\n    replyMessage,\r\n    UserMessages,\r\n    SelectedConversation\r\n}) => {\r\n\r\n    const [messageText, setMessageText] = useState(\"\");\r\n  \r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n       \r\n        let To =  SelectedConversation.User1 == userId? SelectedConversation.User2 : SelectedConversation.User1;\r\n        let conversationId = SelectedConversation.Id;\r\n        const formData = new FormData(); \r\n\r\n         formData.append(\"From\", userId); \r\n         formData.append(\"To\", To);\r\n         formData.append(\"MessageText\", messageText);     \r\n        \r\n         replyMessage(formData, conversationId);\r\n        setMessageText(\"\");     \r\n    }\r\n    \r\n    const keyPressedOnMessageText = (e) =>{\r\n        console.log(e.keyCode);\r\n    }\r\n\r\n    return (\r\n        <div className=\"new-message-window\">\r\n            <div className=\"input-field\">\r\n                <textarea\r\n                    id=\"comment\"\r\n                    className=\"materialize-textarea\"\r\n                    placeholder='Write new message'\r\n                     value={messageText}\r\n                     onChange={(e) => setMessageText(e.target.value)}\r\n                    // onKeyDown={(e) => keyPressedOnMessageText(e)}\r\n                ></textarea>\r\n            </div>\r\n            <div>\r\n                <button\r\n                    className=\"left btn green darken-2 updateBtn\"\r\n                    onClick={(event) => sendMessage(event)}\r\n                >\r\n                    <span>Send</span>\r\n                    <i className=\"material-icons right\">send</i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n        allUsers: state.users.users,\r\n        UserMessages : state.messages.Messages,\r\n        SelectedConversation : state.messages.SelectedConversation,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        replyMessage: (formData, conversationId) => dispatch(replyMessage(formData, conversationId)),    \r\n    }\r\n  }\r\n\r\n  export default connect(mapStateToProps, mapDispatchToProps)(Reply); \r\n\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Message.js",["335","336","337","338","339"],"import { React, useState, useEffect, useRef} from 'react';\r\nimport moment from \"moment\";\r\nimport { connect } from 'react-redux'\r\nimport {deleteMessage,changeMessageStatus } from \"../../store/actions/messagesActions\";\r\n\r\nconst Message = ({ message, userId, deleteMessage, changeMessageStatus, isLast, isScrollDone }) => {\r\n\r\n    const isSender = message.From == userId ? true: false;\r\n    const ref = useRef();    \r\n    const isVisible = useOnScreen(ref);    \r\n  \r\n\r\n    useEffect(() => {\r\n        if(!isSender && isScrollDone){\r\n            if(message.Status.toLowerCase().trim() == \"unread\" ){\r\n              //  console.log( message.MessageText);\r\n                changeMessageStatus(message.Id, \"read\");\r\n            }\r\n        }      \r\n    }, [isVisible])\r\n    \r\n   \r\n\r\n    const delMessage = (messageId) => {\r\n        if(window.confirm(\"Delete message forever?\")){\r\n            deleteMessage(messageId);\r\n        }\r\n    }\r\n\r\n    return (       \r\n           \r\n        <li className='message-li' ref={ref}>\r\n            {/* {isLast? <span ref={lastRef}> </span> : null} */}\r\n            <div className='message-time'><span title= {moment(message.Date).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(message.Date).fromNow() } </span></div>\r\n            <div className={ (message.Status ==\"Unread\" && !isSender? \"unread\" : \"\") + \" \" +(isSender ? \"message left\" : \"message right\")}>\r\n                <div className='message-text'>\r\n                {message.MessageText}\r\n                </div>\r\n                <i title=\"Delete Message\" onClick={()=> delMessage(message.Id)} className=\"delete-message-icon material-icons lighten-4\">highlight_off</i>\r\n            </div>\r\n        </li>       \r\n    )\r\n}\r\n\r\nfunction useOnScreen(refx) {\r\n\r\n    const [isIntersecting, setIntersecting] = useState(false);  \r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => setIntersecting(entry.isIntersecting)\r\n    )  \r\n    useEffect(() => {\r\n      observer.observe(refx.current);\r\n      // Remove the observer as soon as the component is unmounted\r\n      return () => { observer.disconnect() }\r\n    }, [])  \r\n    return isIntersecting\r\n  }\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n    }\r\n  }\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {      \r\n        deleteMessage: (MessageId) => dispatch(deleteMessage(MessageId)),\r\n        changeMessageStatus: (messageId, status) => dispatch(changeMessageStatus(messageId, status))        \r\n    }\r\n  }\r\n \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Message);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Conversation.js",["340","341","342","343","344"],"import { React, useState, useEffect, useRef} from 'react'\r\nimport moment from \"moment\";\r\nimport { connect } from 'react-redux'\r\nimport {selectConversation } from \"../../store/actions/messagesActions\";\r\n\r\nconst Conversation = ({ conversation, userId, getUserNameById,  SelectedConversation, selectConversation, setUserToggle})=> {\r\n    \r\n    const user = conversation.User1 == userId? conversation.User2 : conversation.User1;\r\n\r\n     console.log(\"conversation.UnReadCount\", conversation.UnReadCount);\r\n    // if( getUserNameById(user) == undefined)\r\n    //     console.log(user);\r\n   \r\n    const conversationSelected = () => {\r\n        console.log(\"User toogle value:\", setUserToggle)\r\n        if(setUserToggle!= null) // for small devices only for large device userToggle will always be null\r\n             setUserToggle(false);\r\n        selectConversation(conversation);\r\n    }\r\n    \r\n    const cssClass = SelectedConversation.Id == conversation.Id ? \"user-info selected\" : \"user-info\";\r\n\r\n    return (\r\n        <li >\r\n            <div className={cssClass} onClick={() => conversationSelected() }>\r\n                <div className='photo'>\r\n                    <button type=\"button\" title={\"Umar Shareef\"} className=\"btn-floating  pink darken-2 userWelcome\" >\r\n                         {/* {user ? getUserNameById(user).toUpperCase().split(/\\s/).reduce((response, word) => response += word.slice(0, 1), '') : \"Null\"}  */}\r\n                         <i className='material-icons circle blue darken-3'>person</i>\r\n                    </button>\r\n                </div>\r\n                <div className='name-message'>\r\n                    <div className='name-unread' >\r\n                        <span className='name indigo-text darken-4'>{getUserNameById(user)} </span>\r\n                        {conversation.UnReadCount < 1 ?\r\n                            null :\r\n                            (<span className='unread-count'> new</span>)\r\n                        }\r\n                    </div>\r\n                    <div className='last-message'>\r\n                        <span className='last-message-text'>{conversation.LastMessage.slice(0,20)}</span>\r\n                        <span className='date-time'><span title= {moment(conversation.LastMessageTime).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(conversation.LastMessageTime).fromNow() } </span></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <hr></hr>\r\n\r\n        </li>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n        SelectedConversation : state.messages.SelectedConversation,\r\n        allUsers: state.users.users,\r\n    }\r\n  }\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {      \r\n        selectConversation: (conversation) => dispatch(selectConversation(conversation)), \r\n    }\r\n  }\r\n \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Conversation);\r\n",{"ruleId":"345","replacedBy":"346"},{"ruleId":"347","replacedBy":"348"},{"ruleId":"349","severity":1,"message":"350","line":15,"column":8,"nodeType":"351","endLine":15,"endColumn":15,"suggestions":"352"},{"ruleId":"353","severity":1,"message":"354","line":33,"column":15,"nodeType":"355","endLine":33,"endColumn":33},{"ruleId":"356","severity":1,"message":"357","line":36,"column":11,"nodeType":"355","endLine":36,"endColumn":77},{"ruleId":"356","severity":1,"message":"358","line":68,"column":14,"nodeType":"355","endLine":68,"endColumn":17},{"ruleId":"356","severity":1,"message":"358","line":119,"column":15,"nodeType":"355","endLine":119,"endColumn":18},{"ruleId":"349","severity":1,"message":"359","line":27,"column":8,"nodeType":"351","endLine":27,"endColumn":38,"suggestions":"360"},{"ruleId":"353","severity":1,"message":"354","line":32,"column":16,"nodeType":"355","endLine":32,"endColumn":33},{"ruleId":"353","severity":1,"message":"354","line":40,"column":15,"nodeType":"355","endLine":40,"endColumn":68},{"ruleId":"361","severity":1,"message":"362","line":1,"column":17,"nodeType":"363","messageId":"364","endLine":1,"endColumn":23},{"ruleId":"361","severity":1,"message":"365","line":3,"column":8,"nodeType":"363","messageId":"364","endLine":3,"endColumn":9},{"ruleId":"349","severity":1,"message":"359","line":21,"column":8,"nodeType":"351","endLine":21,"endColumn":10,"suggestions":"366"},{"ruleId":"349","severity":1,"message":"359","line":37,"column":8,"nodeType":"351","endLine":37,"endColumn":38,"suggestions":"367"},{"ruleId":"368","severity":1,"message":"369","line":42,"column":45,"nodeType":"370","messageId":"371","endLine":42,"endColumn":47},{"ruleId":"349","severity":1,"message":"372","line":56,"column":8,"nodeType":"351","endLine":56,"endColumn":10,"suggestions":"373"},{"ruleId":"361","severity":1,"message":"374","line":28,"column":10,"nodeType":"363","messageId":"364","endLine":28,"endColumn":18},{"ruleId":"361","severity":1,"message":"375","line":36,"column":10,"nodeType":"363","messageId":"364","endLine":36,"endColumn":31},{"ruleId":"361","severity":1,"message":"376","line":36,"column":33,"nodeType":"363","messageId":"364","endLine":36,"endColumn":57},{"ruleId":"349","severity":1,"message":"377","line":52,"column":6,"nodeType":"351","endLine":52,"endColumn":23,"suggestions":"378"},{"ruleId":"349","severity":1,"message":"379","line":64,"column":6,"nodeType":"351","endLine":64,"endColumn":20,"suggestions":"380"},{"ruleId":"381","severity":1,"message":"382","line":89,"column":28,"nodeType":"370","messageId":"383","endLine":89,"endColumn":29},{"ruleId":"361","severity":1,"message":"384","line":8,"column":8,"nodeType":"363","messageId":"364","endLine":8,"endColumn":21},{"ruleId":"368","severity":1,"message":"385","line":74,"column":61,"nodeType":"370","messageId":"371","endLine":74,"endColumn":63},{"ruleId":"368","severity":1,"message":"369","line":85,"column":21,"nodeType":"370","messageId":"371","endLine":85,"endColumn":23},{"ruleId":"368","severity":1,"message":"369","line":94,"column":21,"nodeType":"370","messageId":"371","endLine":94,"endColumn":23},{"ruleId":"368","severity":1,"message":"385","line":110,"column":71,"nodeType":"370","messageId":"371","endLine":110,"endColumn":73},{"ruleId":"349","severity":1,"message":"386","line":32,"column":8,"nodeType":"351","endLine":32,"endColumn":10,"suggestions":"387"},{"ruleId":"349","severity":1,"message":"388","line":39,"column":8,"nodeType":"351","endLine":39,"endColumn":30,"suggestions":"389"},{"ruleId":"368","severity":1,"message":"385","line":44,"column":65,"nodeType":"370","messageId":"371","endLine":44,"endColumn":67},{"ruleId":"368","severity":1,"message":"369","line":45,"column":51,"nodeType":"370","messageId":"371","endLine":45,"endColumn":53},{"ruleId":"349","severity":1,"message":"390","line":48,"column":8,"nodeType":"351","endLine":48,"endColumn":37,"suggestions":"391"},{"ruleId":"368","severity":1,"message":"385","line":22,"column":23,"nodeType":"370","messageId":"371","endLine":22,"endColumn":25},{"ruleId":"368","severity":1,"message":"385","line":26,"column":43,"nodeType":"370","messageId":"371","endLine":26,"endColumn":45},{"ruleId":"349","severity":1,"message":"392","line":52,"column":8,"nodeType":"351","endLine":52,"endColumn":16,"suggestions":"393"},{"ruleId":"349","severity":1,"message":"394","line":56,"column":8,"nodeType":"351","endLine":56,"endColumn":48,"suggestions":"395"},{"ruleId":"356","severity":1,"message":"358","line":73,"column":15,"nodeType":"355","endLine":73,"endColumn":19},{"ruleId":"356","severity":1,"message":"358","line":109,"column":37,"nodeType":"355","endLine":109,"endColumn":40},{"ruleId":"356","severity":1,"message":"358","line":111,"column":33,"nodeType":"355","endLine":111,"endColumn":36},{"ruleId":"356","severity":1,"message":"358","line":18,"column":19,"nodeType":"355","endLine":18,"endColumn":53},{"ruleId":"356","severity":1,"message":"358","line":23,"column":19,"nodeType":"355","endLine":23,"endColumn":51},{"ruleId":"356","severity":1,"message":"358","line":28,"column":19,"nodeType":"355","endLine":28,"endColumn":52},{"ruleId":"361","severity":1,"message":"396","line":33,"column":9,"nodeType":"363","messageId":"364","endLine":33,"endColumn":23},{"ruleId":"368","severity":1,"message":"369","line":43,"column":86,"nodeType":"370","messageId":"371","endLine":43,"endColumn":88},{"ruleId":"368","severity":1,"message":"369","line":43,"column":112,"nodeType":"370","messageId":"371","endLine":43,"endColumn":114},{"ruleId":"349","severity":1,"message":"397","line":34,"column":7,"nodeType":"351","endLine":34,"endColumn":9,"suggestions":"398"},{"ruleId":"361","severity":1,"message":"399","line":2,"column":27,"nodeType":"363","messageId":"364","endLine":2,"endColumn":43},{"ruleId":"361","severity":1,"message":"400","line":1,"column":17,"nodeType":"363","messageId":"364","endLine":1,"endColumn":26},{"ruleId":"361","severity":1,"message":"401","line":2,"column":8,"nodeType":"363","messageId":"364","endLine":2,"endColumn":14},{"ruleId":"361","severity":1,"message":"402","line":19,"column":9,"nodeType":"363","messageId":"364","endLine":19,"endColumn":16},{"ruleId":"361","severity":1,"message":"403","line":1,"column":27,"nodeType":"363","messageId":"364","endLine":1,"endColumn":35},{"ruleId":"349","severity":1,"message":"404","line":11,"column":4,"nodeType":"351","endLine":11,"endColumn":6,"suggestions":"405"},{"ruleId":"356","severity":1,"message":"358","line":72,"column":11,"nodeType":"355","endLine":72,"endColumn":56},{"ruleId":"349","severity":1,"message":"406","line":12,"column":8,"nodeType":"351","endLine":12,"endColumn":10,"suggestions":"407"},{"ruleId":"361","severity":1,"message":"403","line":1,"column":27,"nodeType":"363","messageId":"364","endLine":1,"endColumn":35},{"ruleId":"349","severity":1,"message":"408","line":12,"column":4,"nodeType":"351","endLine":12,"endColumn":6,"suggestions":"409"},{"ruleId":"356","severity":1,"message":"358","line":74,"column":11,"nodeType":"355","endLine":74,"endColumn":56},{"ruleId":"349","severity":1,"message":"410","line":11,"column":6,"nodeType":"351","endLine":11,"endColumn":8,"suggestions":"411"},{"ruleId":"412","severity":1,"message":"413","line":77,"column":10,"nodeType":"414","messageId":"371","endLine":77,"endColumn":15},{"ruleId":"361","severity":1,"message":"403","line":1,"column":26,"nodeType":"363","messageId":"364","endLine":1,"endColumn":34},{"ruleId":"349","severity":1,"message":"415","line":12,"column":6,"nodeType":"351","endLine":12,"endColumn":8,"suggestions":"416"},{"ruleId":"361","severity":1,"message":"362","line":1,"column":38,"nodeType":"363","messageId":"364","endLine":1,"endColumn":44},{"ruleId":"361","severity":1,"message":"362","line":1,"column":38,"nodeType":"363","messageId":"364","endLine":1,"endColumn":44},{"ruleId":"356","severity":1,"message":"358","line":96,"column":15,"nodeType":"355","endLine":96,"endColumn":39},{"ruleId":"361","severity":1,"message":"417","line":46,"column":20,"nodeType":"363","messageId":"364","endLine":46,"endColumn":24},{"ruleId":"368","severity":1,"message":"369","line":25,"column":48,"nodeType":"370","messageId":"371","endLine":25,"endColumn":50},{"ruleId":"368","severity":1,"message":"369","line":46,"column":43,"nodeType":"370","messageId":"371","endLine":46,"endColumn":45},{"ruleId":"368","severity":1,"message":"369","line":88,"column":43,"nodeType":"370","messageId":"371","endLine":88,"endColumn":45},{"ruleId":"368","severity":1,"message":"369","line":108,"column":43,"nodeType":"370","messageId":"371","endLine":108,"endColumn":45},{"ruleId":"368","severity":1,"message":"369","line":129,"column":43,"nodeType":"370","messageId":"371","endLine":129,"endColumn":45},{"ruleId":"368","severity":1,"message":"369","line":149,"column":43,"nodeType":"370","messageId":"371","endLine":149,"endColumn":45},{"ruleId":"368","severity":1,"message":"369","line":177,"column":43,"nodeType":"370","messageId":"371","endLine":177,"endColumn":45},{"ruleId":"361","severity":1,"message":"418","line":2,"column":8,"nodeType":"363","messageId":"364","endLine":2,"endColumn":10},{"ruleId":"368","severity":1,"message":"369","line":23,"column":50,"nodeType":"370","messageId":"371","endLine":23,"endColumn":52},{"ruleId":"361","severity":1,"message":"417","line":25,"column":26,"nodeType":"363","messageId":"364","endLine":25,"endColumn":30},{"ruleId":"368","severity":1,"message":"369","line":47,"column":50,"nodeType":"370","messageId":"371","endLine":47,"endColumn":52},{"ruleId":"361","severity":1,"message":"417","line":49,"column":26,"nodeType":"363","messageId":"364","endLine":49,"endColumn":30},{"ruleId":"368","severity":1,"message":"369","line":72,"column":43,"nodeType":"370","messageId":"371","endLine":72,"endColumn":45},{"ruleId":"361","severity":1,"message":"417","line":75,"column":26,"nodeType":"363","messageId":"364","endLine":75,"endColumn":30},{"ruleId":"361","severity":1,"message":"417","line":88,"column":20,"nodeType":"363","messageId":"364","endLine":88,"endColumn":24},{"ruleId":"368","severity":1,"message":"369","line":96,"column":43,"nodeType":"370","messageId":"371","endLine":96,"endColumn":45},{"ruleId":"361","severity":1,"message":"417","line":132,"column":20,"nodeType":"363","messageId":"364","endLine":132,"endColumn":24},{"ruleId":"368","severity":1,"message":"369","line":137,"column":43,"nodeType":"370","messageId":"371","endLine":137,"endColumn":45},{"ruleId":"368","severity":1,"message":"369","line":164,"column":50,"nodeType":"370","messageId":"371","endLine":164,"endColumn":52},{"ruleId":"361","severity":1,"message":"417","line":166,"column":26,"nodeType":"363","messageId":"364","endLine":166,"endColumn":30},{"ruleId":"368","severity":1,"message":"369","line":192,"column":50,"nodeType":"370","messageId":"371","endLine":192,"endColumn":52},{"ruleId":"361","severity":1,"message":"417","line":194,"column":26,"nodeType":"363","messageId":"364","endLine":194,"endColumn":30},{"ruleId":"361","severity":1,"message":"417","line":212,"column":20,"nodeType":"363","messageId":"364","endLine":212,"endColumn":24},{"ruleId":"368","severity":1,"message":"369","line":218,"column":50,"nodeType":"370","messageId":"371","endLine":218,"endColumn":52},{"ruleId":"361","severity":1,"message":"417","line":220,"column":26,"nodeType":"363","messageId":"364","endLine":220,"endColumn":30},{"ruleId":"361","severity":1,"message":"400","line":1,"column":27,"nodeType":"363","messageId":"364","endLine":1,"endColumn":36},{"ruleId":"368","severity":1,"message":"369","line":16,"column":43,"nodeType":"370","messageId":"371","endLine":16,"endColumn":45},{"ruleId":"368","severity":1,"message":"369","line":36,"column":43,"nodeType":"370","messageId":"371","endLine":36,"endColumn":45},{"ruleId":"368","severity":1,"message":"369","line":55,"column":43,"nodeType":"370","messageId":"371","endLine":55,"endColumn":45},{"ruleId":"368","severity":1,"message":"369","line":75,"column":43,"nodeType":"370","messageId":"371","endLine":75,"endColumn":45},{"ruleId":"368","severity":1,"message":"369","line":94,"column":43,"nodeType":"370","messageId":"371","endLine":94,"endColumn":45},{"ruleId":"361","severity":1,"message":"400","line":1,"column":17,"nodeType":"363","messageId":"364","endLine":1,"endColumn":26},{"ruleId":"361","severity":1,"message":"362","line":1,"column":38,"nodeType":"363","messageId":"364","endLine":1,"endColumn":44},{"ruleId":"361","severity":1,"message":"419","line":19,"column":10,"nodeType":"363","messageId":"364","endLine":19,"endColumn":15},{"ruleId":"361","severity":1,"message":"420","line":19,"column":17,"nodeType":"363","messageId":"364","endLine":19,"endColumn":25},{"ruleId":"356","severity":1,"message":"358","line":82,"column":9,"nodeType":"355","endLine":82,"endColumn":33},{"ruleId":"361","severity":1,"message":"400","line":1,"column":27,"nodeType":"363","messageId":"364","endLine":1,"endColumn":36},{"ruleId":"368","severity":1,"message":"369","line":26,"column":31,"nodeType":"370","messageId":"371","endLine":26,"endColumn":33},{"ruleId":"361","severity":1,"message":"400","line":1,"column":27,"nodeType":"363","messageId":"364","endLine":1,"endColumn":36},{"ruleId":"368","severity":1,"message":"369","line":17,"column":46,"nodeType":"370","messageId":"371","endLine":17,"endColumn":48},{"ruleId":"361","severity":1,"message":"421","line":29,"column":11,"nodeType":"363","messageId":"364","endLine":29,"endColumn":34},{"ruleId":"368","severity":1,"message":"369","line":8,"column":35,"nodeType":"370","messageId":"371","endLine":8,"endColumn":37},{"ruleId":"368","severity":1,"message":"369","line":15,"column":52,"nodeType":"370","messageId":"371","endLine":15,"endColumn":54},{"ruleId":"349","severity":1,"message":"422","line":20,"column":8,"nodeType":"351","endLine":20,"endColumn":19,"suggestions":"423"},{"ruleId":"368","severity":1,"message":"369","line":35,"column":46,"nodeType":"370","messageId":"371","endLine":35,"endColumn":48},{"ruleId":"349","severity":1,"message":"424","line":55,"column":8,"nodeType":"351","endLine":55,"endColumn":10,"suggestions":"425"},{"ruleId":"361","severity":1,"message":"403","line":1,"column":17,"nodeType":"363","messageId":"364","endLine":1,"endColumn":25},{"ruleId":"361","severity":1,"message":"400","line":1,"column":27,"nodeType":"363","messageId":"364","endLine":1,"endColumn":36},{"ruleId":"361","severity":1,"message":"362","line":1,"column":38,"nodeType":"363","messageId":"364","endLine":1,"endColumn":44},{"ruleId":"368","severity":1,"message":"369","line":8,"column":37,"nodeType":"370","messageId":"371","endLine":8,"endColumn":39},{"ruleId":"368","severity":1,"message":"369","line":21,"column":46,"nodeType":"370","messageId":"371","endLine":21,"endColumn":48},"no-native-reassign",["426"],"no-negated-in-lhs",["427"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllUsers'. Either include it or remove the dependency array. If 'getAllUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["428"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["429"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'M' is defined but never used.",["430"],["431"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'Messages', 'commentRecieved', 'receiveConversation', 'receiveMessage', 'refreshNotifications', 'updateHubId', and 'userId'. Either include them or remove the dependency array. If 'updateHubId' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["432"],"'assignee' is assigned a value but never used.","'editAdditionalDetails' is assigned a value but never used.","'setEditAdditionalDetails' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getIncidentById'. Either include it or remove the dependency array. If 'getIncidentById' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["433"],"React Hook useEffect has a missing dependency: 'allAssignees'. Either include it or remove the dependency array.",["434"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'DayByDayCount' is defined but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'conversationsByUser' and 'userId'. Either include them or remove the dependency array. If 'conversationsByUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["435"],"React Hook useEffect has missing dependencies: 'Conversations' and 'selectConversation'. Either include them or remove the dependency array. If 'selectConversation' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["436"],"React Hook useEffect has missing dependencies: 'SelectedConversation', 'getUserNameById', 'messagesByConversations', and 'userId'. Either include them or remove the dependency array. If 'messagesByConversations' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["437"],"React Hook useEffect has missing dependencies: 'pageInformation' and 'setPageNumber'. Either include them or remove the dependency array. If 'setPageNumber' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["438"],"React Hook useEffect has a missing dependency: 'pageInformation'. Either include it or remove the dependency array.",["439"],"'dateDifference' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getNotifications' and 'userId'. Either include them or remove the dependency array. If 'getNotifications' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["440"],"'deleteAttachment' is defined but never used.","'useEffect' is defined but never used.","'moment' is defined but never used.","'history' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getOldest5UnresolvedIncidents'. Either include it or remove the dependency array. If 'getOldest5UnresolvedIncidents' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["441"],"React Hook useEffect has a missing dependency: 'getOverallWidgetData'. Either include it or remove the dependency array. If 'getOverallWidgetData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["442"],"React Hook useEffect has a missing dependency: 'getLast5IncidentsData'. Either include it or remove the dependency array. If 'getLast5IncidentsData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["443"],"React Hook useEffect has a missing dependency: 'getMostAssignedToUsers'. Either include it or remove the dependency array. If 'getMostAssignedToUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["444"],"no-dupe-keys","Duplicate key 'title'.","ObjectExpression","React Hook useEffect has missing dependencies: 'getKPIData' and 'userId'. Either include them or remove the dependency array. If 'getKPIData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["445"],"'data' is assigned a value but never used.","'qs' is defined but never used.","'files' is assigned a value but never used.","'setFiles' is assigned a value but never used.","'keyPressedOnMessageText' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'changeMessageStatus', 'isScrollDone', 'isSender', 'message.Id', and 'message.Status'. Either include them or remove the dependency array. If 'changeMessageStatus' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["446"],"React Hook useEffect has missing dependencies: 'observer' and 'refx'. Either include them or remove the dependency array.",["447"],"no-global-assign","no-unsafe-negation",{"desc":"448","fix":"449"},{"desc":"450","fix":"451"},{"desc":"452","fix":"453"},{"desc":"450","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},{"desc":"483","fix":"484"},{"desc":"485","fix":"486"},"Update the dependencies array to be: [getAllUsers, token]",{"range":"487","text":"488"},"Update the dependencies array to be: [PageNumber, PageSize, Search, props]",{"range":"489","text":"490"},"Update the dependencies array to be: [props]",{"range":"491","text":"492"},{"range":"493","text":"490"},"Update the dependencies array to be: [Messages, commentRecieved, receiveConversation, receiveMessage, refreshNotifications, updateHubId, userId]",{"range":"494","text":"495"},"Update the dependencies array to be: [getIncidentById, match.params.id]",{"range":"496","text":"497"},"Update the dependencies array to be: [allAssignees, incidentData]",{"range":"498","text":"499"},"Update the dependencies array to be: [conversationsByUser, userId]",{"range":"500","text":"501"},"Update the dependencies array to be: [Conversations, ConversationsChanged, selectConversation]",{"range":"502","text":"503"},"Update the dependencies array to be: [SelectedConversation, SelectedConversationChanged, getUserNameById, messagesByConversations, userId]",{"range":"504","text":"505"},"Update the dependencies array to be: [pageInformation, search, setPageNumber]",{"range":"506","text":"507"},"Update the dependencies array to be: [currentPage, currentSize, TotalRecords, pageInformation]",{"range":"508","text":"509"},"Update the dependencies array to be: [getNotifications, userId]",{"range":"510","text":"511"},"Update the dependencies array to be: [getOldest5UnresolvedIncidents]",{"range":"512","text":"513"},"Update the dependencies array to be: [getOverallWidgetData]",{"range":"514","text":"515"},"Update the dependencies array to be: [getLast5IncidentsData]",{"range":"516","text":"517"},"Update the dependencies array to be: [getMostAssignedToUsers]",{"range":"518","text":"519"},"Update the dependencies array to be: [getKPIData, userId]",{"range":"520","text":"521"},"Update the dependencies array to be: [changeMessageStatus, isScrollDone, isSender, isVisible, message.Id, message.Status]",{"range":"522","text":"523"},"Update the dependencies array to be: [observer, refx]",{"range":"524","text":"525"},[577,584],"[getAllUsers, token]",[807,837],"[PageNumber, PageSize, Search, props]",[758,760],"[props]",[1147,1177],[2322,2324],"[Messages, commentRecieved, receiveConversation, receiveMessage, refreshNotifications, updateHubId, userId]",[1671,1688],"[getIncidentById, match.params.id]",[2148,2162],"[allAssignees, incidentData]",[1141,1143],"[conversationsByUser, userId]",[1359,1381],"[Conversations, ConversationsChanged, selectConversation]",[1803,1832],"[SelectedConversation, SelectedConversationChanged, getUserNameById, messagesByConversations, userId]",[1498,1506],"[pageInformation, search, setPageNumber]",[1573,1613],"[currentPage, currentSize, TotalRecords, pageInformation]",[1075,1077],"[getNotifications, userId]",[423,425],"[getOldest5UnresolvedIncidents]",[454,456],"[getOverallWidgetData]",[384,386],"[getLast5IncidentsData]",[400,402],"[getMostAssignedToUsers]",[345,347],"[getKPIData, userId]",[747,758],"[changeMessageStatus, isScrollDone, isSender, isVisible, message.Id, message.Status]",[2097,2099],"[observer, refx]"]