[{"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\index.js":"1","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\App.js":"2","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\reportWebVitals.js":"3","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Login\\Login.js":"4","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\rootReducer.js":"5","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\userLoginReducer.js":"6","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\usersReducer.js":"7","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\incidentsReducer.js":"8","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\usersActions.js":"9","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\userLoginActions.js":"10","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\NavBar.js":"11","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\IncidentLisiting.js":"12","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\Incident.js":"13","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Pages.js":"14","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\PageActions.js":"15","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\incidentsActions.js":"16","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\AddNew.js":"17","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\UsersList.js":"18","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\User.js":"19","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\AddUser.js":"20","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\IncidentDetails.js":"21","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\Comments.js":"22","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\Comment.js":"23","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\api\\apiURLs.js":"24","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Notifications.js":"25","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\notificationsReducer.js":"26","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\notificationsActions.js":"27","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\signalR\\Receiver.js":"28","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\signalR\\sender.js":"29"},{"size":1122,"mtime":1608337289896,"results":"30","hashOfConfig":"31"},{"size":1422,"mtime":1610653728856,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":499162500000,"results":"33","hashOfConfig":"31"},{"size":2730,"mtime":1609696317922,"results":"34","hashOfConfig":"31"},{"size":475,"mtime":1610577481815,"results":"35","hashOfConfig":"31"},{"size":1112,"mtime":1610888211543,"results":"36","hashOfConfig":"31"},{"size":839,"mtime":1610888214670,"results":"37","hashOfConfig":"31"},{"size":4705,"mtime":1610891781625,"results":"38","hashOfConfig":"31"},{"size":1899,"mtime":1610653460414,"results":"39","hashOfConfig":"31"},{"size":3022,"mtime":1610888057784,"results":"40","hashOfConfig":"31"},{"size":3369,"mtime":1610889923417,"results":"41","hashOfConfig":"31"},{"size":4909,"mtime":1610891789183,"results":"42","hashOfConfig":"31"},{"size":2455,"mtime":1610057403559,"results":"43","hashOfConfig":"31"},{"size":3027,"mtime":1609884362954,"results":"44","hashOfConfig":"31"},{"size":1130,"mtime":1608419315181,"results":"45","hashOfConfig":"31"},{"size":6699,"mtime":1610897973272,"results":"46","hashOfConfig":"31"},{"size":13219,"mtime":1610566671730,"results":"47","hashOfConfig":"31"},{"size":3921,"mtime":1610406658281,"results":"48","hashOfConfig":"31"},{"size":263,"mtime":1608746276170,"results":"49","hashOfConfig":"31"},{"size":6483,"mtime":1608752688290,"results":"50","hashOfConfig":"31"},{"size":28038,"mtime":1610892366722,"results":"51","hashOfConfig":"31"},{"size":3689,"mtime":1610057717663,"results":"52","hashOfConfig":"31"},{"size":5393,"mtime":1610495459434,"results":"53","hashOfConfig":"31"},{"size":1222,"mtime":1610815908462,"results":"54","hashOfConfig":"31"},{"size":4428,"mtime":1610845485922,"results":"55","hashOfConfig":"31"},{"size":1171,"mtime":1610888268575,"results":"56","hashOfConfig":"31"},{"size":1946,"mtime":1610817918528,"results":"57","hashOfConfig":"31"},{"size":2127,"mtime":1610753476287,"results":"58","hashOfConfig":"31"},{"size":1577,"mtime":1610752997050,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"wm3clw",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"62"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\index.js",[],["130","131"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\App.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\reportWebVitals.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Login\\Login.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\rootReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\userLoginReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\usersReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\incidentsReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\usersActions.js",["132"],"import axios from 'axios';\r\nimport { usersUrls } from \"../../api/apiURLs\";\r\n\r\nexport const  allUsers = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.allUsersUrl\r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const users = response.data;\r\n              dispatch({ type: 'ALL_USERS', users });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n  export const userssWithPage = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.userssWithPageUrl +\r\n                    \"PageSize=\" + parameters.PageSize +\"&PageNumber=\" + parameters.PageNumber \r\n                    + \"&SortBy=q&SortDirection=q&Search=\" + parameters.Search;\r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const data = response.data;                   \r\n              dispatch({ type: 'USERS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n\r\n  export const addNewUser = (formData) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.addNewUserUrl \r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = response.data;\r\n            //  dispatch({ type: 'INCIDENTS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\userLoginActions.js",["133"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\NavBar.js",["134","135","136","137"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\IncidentLisiting.js",["138","139"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\Incident.js",["140"],"import React from 'react';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { removeIncidentData } from \"../../store/actions/incidentsActions\";\r\nimport { connect  } from 'react-redux';\r\nimport '../../styles/IncidentListing.css';\r\nimport moment from \"moment\";;\r\n\r\nfunction Incident({incident, dispatch, getUserNameById}) {\r\n\r\n  const history = useHistory();\r\n\r\n  const openIncident = (id) => {  \r\n    dispatch(removeIncidentData()); // So that user does not see old data that is stored in redux (and local storage)\r\n    let path = '/Incident/' + id;      \r\n      history.push(path);\r\n  }\r\n\r\n  const statusName = (status) => {\r\n    switch(status){\r\n      case \"N\":\r\n        return \"New\";\r\n      case \"C\":\r\n        return \"Close\";\r\n      case \"A\":\r\n        return \"Approved\";\r\n      case \"I\":\r\n        return \"In Progress\";\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  const dateDifference = (date1 , date2) =>{\r\n   \r\n      const diffTime = Math.abs(date2 - date1);\r\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \r\n     // console.log(diffTime + \" milliseconds\");\r\n     // console.log(diffDays + \" days\");\r\n     return diffDays;\r\n  }\r\n\r\n  let currentDate = new Date();\r\n  const dueDateClass = (new Date(incident.DueDate)) < currentDate ? \"red-text text-darken-2\" : \"green-text text-darken-2\";\r\n  \r\n    return (\r\n      <tr >\r\n        \r\n        <td\r\n          className=\"tbl-title\"\r\n          title={incident.Title}\r\n        >\r\n         <span className=\"indigo-text darken-4\" onClick = { () => openIncident(incident.Id) }>\r\n               {incident.Title.length > 50 ? incident.Title.slice(0,50) + \" ...\" : incident.Title }\r\n         </span>\r\n        </td>\r\n        <td\r\n          className=\"tbl-description\"\r\n          title={incident.Description}\r\n        >\r\n          {incident.Description.length > 30 ? incident.Description.slice(0,30) + \" ...\" : incident.Description }\r\n        </td>\r\n        <td>{getUserNameById(incident.AssignedTo)}</td>\r\n        <td>{getUserNameById(incident.CreatedBy)}</td>\r\n        <td><span title= {moment(incident.CreatedAT).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(incident.CreatedAT).fromNow() } </span></td>\r\n        <td><span className={dueDateClass} title= {moment(incident.DueDate).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(incident.DueDate).fromNow() } </span></td>\r\n        <td>{statusName(incident.Status)}</td>\r\n      </tr>\r\n    );\r\n}\r\n\r\nexport default connect()(Incident);","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Pages.js",["141","142"],"import {React, useState, useEffect, useRef} from 'react';\r\nimport M from 'materialize-css';\r\n\r\n\r\n\r\n\r\nexport default function Pages({TotalPages, PostsPerPage, setPageNumber, setPageSize , search }) {\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentSize, setCurrentSize] = useState(5);\r\n\r\n    const ddlRef = useRef();\r\n\r\n    let pages = [];\r\n    for(let i = 1; i <= Math.ceil(TotalPages / PostsPerPage) ; i++ )\r\n    {\r\n        pages.push(i);\r\n    }\r\n\r\n    const pageNumberClick = (p) =>{\r\n        if(p <1 || p > pages.length)\r\n            return;\r\n        setPageNumber(p);\r\n        setCurrentPage(p);\r\n    }\r\n\r\n    const pageSizeChanged = (pSize) => {\r\n        setPageSize(pSize);\r\n        setCurrentSize(pSize);\r\n        setCurrentPage(1);\r\n        setPageNumber(1);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setPageNumber(1);        \r\n        M.FormSelect.init(ddlRef.current); \r\n    }, [search])\r\n\r\n    pages = pages.map((p,index)=>{\r\n        let pclass = currentPage === p ? \"active\" : \"\";        \r\n        return (             \r\n            <li className={pclass} key={p}  onClick={() => pageNumberClick(p)}>              \r\n              <a > {p} </a>\r\n            </li>        \r\n        );\r\n    });\r\n  \r\n    return (\r\n        \r\n      <div className=\"row pagesRow\">\r\n        <div className=\"input-field col s12 m4 l4\">\r\n                            <select value={currentSize} onChange={(e) => pageSizeChanged(e.target.value)}\r\n                             ref={ddlRef}  >\t\t\t\t\t\t\r\n                                <option value=\"5\">5</option>\r\n                                <option value=\"10\">10</option>\r\n                                <option value=\"15\">15</option>\r\n                                <option value=\"20\">20</option>\r\n                                <option value=\"25\">25</option>\r\n                                <option value=\"30\">30</option>\r\n                                <option value=\"35\">35</option>\r\n                                <option value=\"40\">40</option>\r\n                                <option value=\"45\">45</option>\r\n                                <option value=\"50\">50</option>\r\n                            </select>\t\r\n                        <label>Page Size</label>\t\t\t\t\t\t\r\n        </div>\r\n        <div className=\"input-field col s12 m8 l8\">\r\n            <ul className=\"pagination right\">\r\n            <li\r\n                className={  currentPage === 1 ? \" disabled\" : \"\" } >\r\n                <a href=\"#!\" onClick={() => pageNumberClick(currentPage - 1)}>\r\n                <i className=\"material-icons\">chevron_left</i>\r\n                </a>\r\n            </li>\r\n            {pages}\r\n            <li\r\n                className={ currentPage === pages.length ? \" disabled\" : \"\" } >\r\n                <a href=\"#!\" onClick={() => pageNumberClick(currentPage + 1)}>\r\n                <i className=\"material-icons\">chevron_right</i>\r\n                </a>\r\n            </li>\r\n            </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\PageActions.js",["143","144","145"],"import React from 'react'\r\n\r\nexport default function PageActions(props) {\r\n    return (\r\n      <section className=\"container\">\r\n        <div className=\"row \">\r\n          <div className=\"col s12 l5\">\r\n            <div className=\"left\">\r\n              <h4 className=\"title\">{props.Title}</h4>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"col s7 l9 hide\">\r\n            <div className=\"right\">\r\n              <ul className=\"actionsBtns\">\r\n                <li>\r\n                  <a className=\"btn-floating green\">\r\n                    <i className=\"material-icons\">refresh</i>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"btn-floating red\">\r\n                    <i className=\"material-icons\">print</i>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"btn-floating blue\">\r\n                    <i className=\"material-icons\">file_download</i>\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n}\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\incidentsActions.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\AddNew.js",["146"],"import {React , useRef, useEffect, useState} from 'react';\r\nimport PageActions from \"../PageActions\";\r\nimport M from 'materialize-css';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { allUsers } from '../../store/actions/usersActions';\r\nimport { addNewIncident } from '../../store/actions/incidentsActions';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n function AddNew({getAllAssignees, allAssignees, userId, addNewIncident, addNewError, AddNewIncidentStatus}) {\r\n\r\n    const dueDateTimeRef= useRef();\r\n    const dueDateDateRef= useRef();\r\n    const startTimeTimeRef = useRef();\r\n    const startTimeDateRef = useRef();\r\n    const assigneeRef = useRef();   \r\n   \r\n\r\n    const history = useHistory();\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [additionalDetails, setAdditionalDetails] = useState(\"\");  \r\n    const [files , setFiles] = useState(null);\r\n    const [assignee, setAssignee] = useState(null);  \r\n    const [assigneeName, setAssigneeName] = useState(\"\");  \r\n    const [assigneeList, setAssigneeList] = useState(allAssignees);\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n      console.log(\"Set hook\");\r\n      setAssigneeList(allAssignees);\r\n    }, [allAssignees])\r\n\r\n    useEffect(() => {      \r\n        M.Datepicker.init(startTimeDateRef.current);\r\n        M.Timepicker.init(startTimeTimeRef.current);\r\n        M.Datepicker.init(dueDateDateRef.current);\r\n        M.Timepicker.init(dueDateTimeRef.current);\r\n        var options = {\r\n          closeOnClick : false\r\n        }\r\n        M.Dropdown.init(assigneeRef.current, options);\r\n        getAllAssignees();\r\n    }, []);\r\n\r\n   const onFileChange = (event) => {    \r\n     if (event.target.files.length > 3) {\r\n       //alert(\"You can only attach upto 3 files. All extra files will be ignored.\");\r\n     }     \r\n     setFiles(event.target.files);\r\n   };\r\n\r\n   const cancelClick = (event) => {\r\n     event.preventDefault();\r\n     history.goBack();\r\n     //console.log(history);\r\n   };\r\n\r\n\r\n   const assigneeSelected = (userId) => {       \r\n    let currentAssignee = allAssignees.find(assignee => {\r\n        return assignee.Id === userId\r\n    })\r\n    console.log(currentAssignee);\r\n    var assigneeDropdown = M.Dropdown.getInstance(assigneeRef.current);\r\n    assigneeDropdown.close();\r\n    setAssignee(userId);\r\n    setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);\r\n   }\r\n\r\n   const searchAssignee = (event) => {    \r\n     let newList = [];\r\n     if(event.target.value !== \"\")\r\n        newList = allAssignees.filter(assignee => {    \r\n        return assignee.FirstName.toUpperCase().startsWith(event.target.value.toUpperCase()) \r\n            || assignee.LastName.toUpperCase().startsWith(event.target.value.toUpperCase());\r\n      });\r\n    \r\n     if(newList !== undefined && newList.length !== 0){ //check if there is atlease one assignee       \r\n      newList = [].concat(newList); \r\n     }\r\n     else{//if search found nothing, show all assignees\r\n        newList = allAssignees.slice(0,allAssignees.length);       \r\n     } \r\n     setAssigneeList(newList);   \r\n   }\r\n\r\n   const validateForm = () => {\r\n\r\n    if(title === \"\" || description ===\"\" || dueDateDateRef.current.value === \"\" || dueDateTimeRef.current.value === \"\"\r\n        || startTimeDateRef.current.value === \"\" || startTimeTimeRef.current.value === \"\"  )\r\n        return false;\r\n    return true;\r\n\r\n   }\r\n\r\n   const saveClick = (event) => {\r\n    event.preventDefault();     \r\n    if(!validateForm()){\r\n      setFormError(\"Please complete required fields before saving.\")\r\n      return;\r\n    }\r\n    \r\n    setFormError(\"\");\r\n\r\n    let startTime  = new Date( startTimeDateRef.current.value + \" \" + startTimeTimeRef.current.value);\r\n    startTime = (startTime.getMonth() + 1) + \"/\" + startTime.getDate() + \"/\" +  startTime.getFullYear() \r\n                + \" \" + startTime.getHours() + \":\" + startTime.getMinutes() + \":\" + startTime.getSeconds(); \r\n\r\n    let dueDate  = new Date( dueDateDateRef.current.value + \" \" + dueDateTimeRef.current.value);\r\n    dueDate = (dueDate.getMonth() + 1) + \"/\" + dueDate.getDate() + \"/\" +  dueDate.getFullYear() \r\n                + \" \" + dueDate.getHours() + \":\" + dueDate.getMinutes() + \":\" + dueDate.getSeconds(); \r\n   \r\n    const formData = new FormData(); \r\n\r\n    if(files){\r\n        for(let i = 0; i < files.length ; i++){\r\n          formData.append( \r\n            \"Attachment\" + i+1, \r\n            files[i], \r\n            files[i].name \r\n          );\r\n        }\r\n    }   \r\n     formData.append(\"CreatedBy\", userId); \r\n     formData.append(\"AssignedTo\", assignee);\r\n     formData.append(\"Title\", title); \r\n     formData.append(\"Description\", description); \r\n     formData.append(\"AdditionalDeta\", additionalDetails); \r\n     formData.append(\"StartTime\", startTime ); \r\n     formData.append(\"DueDate\",  dueDate ); \r\n     formData.append(\"Status\", \"N\"); \r\n\r\n     \r\n     //setTitle(\"\");\r\n\r\n     addNewIncident(formData);\r\n    // setTitle(\"\");\r\n     //setDescription(\"\");     \r\n\r\n  }; \r\n\r\n  if(AddNewIncidentStatus){\r\n    return <Redirect to='/incidentListing' /> \r\n  }\r\n \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Add new Incident\"} />\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 l10 offset-l1\">\r\n                <form>\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 l6\">\r\n                      <div className=\"input-field \">\r\n                        <input\r\n                        className=\"validate\"\r\n                          required\r\n                          type=\"text\"\r\n                          id=\"title\"\r\n                          value={title}\r\n                          onChange={(e) => setTitle(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"title\">Title</label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s12 l6\">                    \r\n                      <input\r\n                        readOnly                    \r\n                        required\r\n                        type=\"text\"\r\n                        className=\"dropdown-trigger validate\"\r\n                        id=\"assignee\"\r\n                        data-target=\"dropdown1\"\r\n                        placeholder=\"\"\r\n                        ref={assigneeRef}\r\n                        value={assigneeName}\r\n                      />                    \r\n                      \r\n                       <label htmlFor=\"assignee\">Assignee </label> \r\n                    </div>\r\n                      <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <li>\r\n                          <input type=\"text\"  placeholder=\"Search Assignee\" onChange={searchAssignee}     />\r\n                        </li>\r\n                        {!assigneeList? null : assigneeList.map((user) => {\r\n                          return (\r\n                            <li  key={user.Id} onClick= {()=>assigneeSelected(user.Id)}>\r\n                              <a className=\"indigo-text\" href=\"#!\">  {user.FirstName + \" \" + user.LastName}    </a>\r\n                            </li>\r\n                          );\r\n                        })}\r\n                      </ul>                   \r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                    <textarea\r\n                      required\r\n                      value={description}\r\n                      id=\"description\"\r\n                      className=\"materialize-textarea validate\"\r\n                      onChange={(e) => setDescription(e.target.value)}\r\n                    ></textarea>\r\n                    <label htmlFor=\"description\" className=\"\">\r\n                      Description\r\n                    </label>\r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                    <textarea\r\n                      value={additionalDetails}\r\n                      id=\"additionalDetails\"\r\n                      className=\"materialize-textarea\"\r\n                      onChange={(e) => setAdditionalDetails(e.target.value)}\r\n                    ></textarea>\r\n                    <label htmlFor=\"additionalDetails\" className=\"\">\r\n                      Additional Details\r\n                    </label>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"startTimeDate\"\r\n                        className=\"datepicker validate\"\r\n                        ref={startTimeDateRef}\r\n                      />\r\n                      <label htmlFor=\"startTimeDate\" className=\"\">\r\n                        When the problem started (Pick Date)\r\n                      </label>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"startTimeTime\"\r\n                        className=\"timepicker validate\"\r\n                        ref={startTimeTimeRef}\r\n                      />\r\n                      <label htmlFor=\"startTimeime\" className=\"\">\r\n                        When the problem started (Pick Time)\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"dueDateDate\"\r\n                        className=\"datepicker validate\"\r\n                        ref={dueDateDateRef}\r\n                      />\r\n                      <label htmlFor=\"dueDateDate\" className=\"\">\r\n                        Due Date (Pick Date)\r\n                      </label>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"dueDateTime\"\r\n                        className=\"timepicker validate\" \r\n                        ref={dueDateTimeRef}\r\n                      />\r\n                      <label htmlFor=\"dueDateTime\" className=\"\">\r\n                        Due Date (Pick Time)\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"file-field input-field\">\r\n                    <div className=\"btn indigo darken-2\">\r\n                      <i className=\"material-icons \">attachment</i>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"attachment\"\r\n                        multiple\r\n                        onChange={onFileChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                      <input\r\n                        className=\"file-path validate\"\r\n                        type=\"text\"\r\n                        placeholder=\"Upload upto 3 files\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-field\">\r\n                      <p className=\"red-text center\">{formError ? formError : \"\" }</p>\r\n                      <p className=\"red-text center\">{addNewError}</p>\r\n                      \r\n                  </div>\r\n\r\n                  \r\n                  <div className=\"input-field \">\r\n                    <button\r\n                      className=\"btn green darken-2 left\"\r\n                      onClick={saveClick}\r\n                    >\r\n                      <span>Save</span>\r\n                      <i className=\"material-icons right\">save</i>\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn yellow darken-4 left\"\r\n                      onClick={cancelClick}\r\n                    >\r\n                      <span>Cancel</span>\r\n                      <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{\r\n        allAssignees : state.users.users,\r\n        user_Name :state.userLogin.user_Name, // Logged in User's name\r\n        userId :state.userLogin.userId,  // logged in User Id      \r\n        addNewError :state.incidents.AddNewIncidentError, \r\n        AddNewIncidentStatus :state.incidents.AddNewIncidentStatus \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getAllAssignees: () => dispatch(allUsers()),\r\n        addNewIncident : (formData) => dispatch(addNewIncident(formData))\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNew);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\UsersList.js",["147"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Pages from '../Pages'\r\nimport User from './User'\r\nimport PageActions from \"../PageActions\";\r\nimport { userssWithPage } from \"../../store/actions/usersActions\";\r\nimport {  useHistory  } from 'react-router-dom'\r\n\r\n function UsersList(props) {\r\n\r\n    const [PageNumber, setPageNumber] = useState(1);\r\n    const [PageSize, setPageSize] = useState(5);\r\n    const [Search, setSearch] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n    \r\n    useEffect(() => {\r\n        const parameters = {\r\n            PageNumber : PageNumber,\r\n            PageSize : PageSize,\r\n            Search : Search\r\n        }        \r\n        props.userssWithPage(parameters);\r\n        return () => {\r\n            \r\n        }\r\n    }, [PageNumber, PageSize, Search])\r\n\r\n    const searchTextChange =   (text) => {      \r\n            setSearch(text);\r\n            setPageNumber(1);\r\n    }\r\n\r\n    const addNewClick = ()=>{\r\n      let path = '/AddUser';      \r\n      history.push(path);\r\n    }\r\n    \r\n    if( !props.Users){\r\n      return (\r\n        <div class=\"preloader-wrapper container big active page-loader\">\r\n        <div class=\"spinner-layer spinner-blue-only\">\r\n          <div class=\"circle-clipper left\">\r\n            <div class=\"circle\"></div>\r\n          </div><div class=\"gap-patch\">\r\n            <div class=\"circle\"></div>\r\n          </div><div class=\"circle-clipper right\">\r\n            <div class=\"circle\"></div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n      )\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Users\"} /> \r\n\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n\r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">                \r\n                  <input type=\"text\"  value={Search}  onChange={(e) => searchTextChange(e.target.value)} />\r\n                  <label htmlFor=\"search\">Search</label>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">              \r\n                  <button className=\"btn green darken-4 right\" onClick={()=>addNewClick()} >\r\n                    <span>Add New</span>\r\n                    <i className=\"material-icons right\">create</i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col s12 l12\">\r\n                <table className=\"responsive-table highlight incidentsTbl\">\r\n                  <thead>\r\n                    <tr className=\"header\" data-target=\"blue\">\r\n                      <th>First Name</th>\r\n                      <th>Last Name</th>\r\n                      <th>Email</th>                      \r\n                      <th>Created Date</th>                     \r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  {\r\n                   !props.Users? null : props.Users.map(user=>{\r\n                          return (\r\n                            <User key={user.Id} user= {user} />                          )\r\n                      })\r\n                  }           \r\n                  </tbody>\r\n                </table>\r\n                <Pages  TotalPages={props.TotalUsers} PostsPerPage={PageSize} setPageNumber={setPageNumber} setPageSize={setPageSize} search={Search} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        Users : state.users.UsersList,\r\n        TotalUsers : state.users.TotalUsers     \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        userssWithPage: (parameters) => dispatch(userssWithPage(parameters))\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(UsersList);","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\User.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Users\\AddUser.js",["148","149"],"import {React , useRef, useEffect, useState} from 'react';\r\nimport PageActions from \"../PageActions\";\r\nimport M from 'materialize-css';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { addNewUser } from '../../store/actions/usersActions';\r\n\r\n\r\n function AddUser({addNewUser}){\r\n\r\n\r\n    const history = useHistory();\r\n\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [lastName, setLastName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");  \r\n    const [phone, setPhone] = useState(\"\");  \r\n    const [profilePic , setProfilePic] = useState(null);\r\n\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    useEffect(() => {     \r\n       \r\n      \r\n    }, []);\r\n\r\n   const onFileChange = (event) => {    \r\n     \r\n    setProfilePic(event.target.files);\r\n   };\r\n\r\n   const cancelClick = (event) => {\r\n     event.preventDefault();\r\n     history.goBack();\r\n     //console.log(history);\r\n   };\r\n\r\n   const validateForm = () => {\r\n\r\n    if(firstName === \"\" || lastName === \"\" || email === \"\"  || phone === \"\" )\r\n        return false;\r\n    return true;\r\n\r\n   }\r\n\r\n   const saveClick = (event) => {\r\n    event.preventDefault();     \r\n    if(!validateForm()){\r\n      setFormError(\"Please complete required fields before saving.\")\r\n      return;\r\n    }\r\n    \r\n    setFormError(\"\");\r\n   \r\n   \r\n    const formData = new FormData(); \r\n\r\n    if(profilePic){\r\n       \r\n          formData.append( \r\n            \"Attachment1\", \r\n            profilePic[0], \r\n            profilePic[0].name \r\n          );\r\n          }\r\n     formData.append(\"FirstName\", firstName); \r\n     formData.append(\"LastName\", lastName);\r\n     formData.append(\"Email\", email); \r\n     formData.append(\"Phone\", email); \r\n     addNewUser(formData);\r\n  }; \r\n\r\n \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Add new User\"} />\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 l10 offset-l1\">\r\n                <form>\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 l6\">\r\n                      <div className=\"input-field \">\r\n                        <input\r\n                         className=\"validate\"\r\n                          required\r\n                          type=\"text\"\r\n                          id=\"firstName\"\r\n                          value={firstName}\r\n                          onChange={(e) => setFirstName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s12 l6\">                    \r\n                        <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"lastName\"\r\n                            value={lastName}\r\n                            onChange={(e) => setLastName(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"lastName\">Last Name</label> \r\n                    </div>\r\n                                      \r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"email\">Email</label> \r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"phone\"\r\n                            value={phone}\r\n                            onChange={(e) => setPhone(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"phone\">Phone</label> \r\n                  </div>\r\n\r\n                  <div className=\"file-field input-field\">\r\n                    <div className=\"btn indigo darken-2\">\r\n                      <i className=\"material-icons \">attachment</i>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"attachment\"                        \r\n                        onChange={onFileChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                      <input\r\n                        className=\"file-path validate\"\r\n                        type=\"text\"\r\n                        placeholder=\"Upload profile picture\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-field\">\r\n                      <p className=\"red-text center\">{formError ? formError : \"\" }</p>\r\n                  </div>\r\n\r\n                  \r\n                  <div className=\"input-field \">\r\n                    <button\r\n                      className=\"btn green darken-2 left\"\r\n                      onClick={saveClick}\r\n                    >\r\n                      <span>Save</span>\r\n                      <i className=\"material-icons right\">save</i>\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn yellow darken-4 left\"\r\n                      onClick={cancelClick}\r\n                    >\r\n                      <span>Cancel</span>\r\n                      <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{\r\n        allAssignees : state.users.users,\r\n        user_Name :state.userLogin.user_Name, // Logged in User's name\r\n        userId :state.userLogin.userId,  // logged in User Id       \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {       \r\n        addNewUser : (formData) => dispatch(addNewUser(formData))\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUser);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\IncidentDetails.js",["150","151","152","153","154","155"],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\Comments.js",["156","157","158"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport moment from \"moment\";\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport Comment from \"./Comment\";\r\nimport { connect } from \"react-redux\";\r\nimport {  addNewComment } from \"../../store/actions/incidentsActions\";\r\n\r\nfunction Comments({\r\n  incidentId,\r\n  comments,\r\n  userId,\r\n  getNameById,\r\n  addNewComment\r\n}) {\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [newCommentFiles, setNewCommentFiles] = useState(null);\r\n\r\n  const newCommentFilesRef = useRef();\r\n  const history = useHistory();\r\n  //console.log(history);\r\n  const onFileChange = (event) => {\r\n    setNewCommentFiles(event.target.files);\r\n  };\r\n\r\n  const saveComment = () => {\r\n    if (newComment.trim() === \"\") {\r\n      alert(\"Please add comment first.\");\r\n      return;\r\n    }\r\n    const formData = new FormData();\r\n\r\n    if (newCommentFiles) {\r\n      for (let i = 0; i < newCommentFiles.length; i++) {\r\n        formData.append(\r\n          \"Attachment\" + i + 1,\r\n          newCommentFiles[i],\r\n          newCommentFiles[i].name\r\n        );\r\n      }\r\n    }\r\n    formData.append(\"CommentText\", newComment.trim());\r\n    formData.append(\"IncidentId\", incidentId);\r\n    formData.append(\"UserId\", userId);\r\n    addNewComment(formData);\r\n\r\n    setNewComment(\"\");\r\n    setNewCommentFiles(null);\r\n    newCommentFilesRef.current.value = \"\";\r\n    //history.push(history.location.pathname);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5 className=\"heading left-align\">Comments</h5>\r\n      <p className=\"all-comments-box\">\r\n        {!comments ? (\r\n          <h1>No Comments</h1>\r\n        ) : (\r\n          comments.map((comment) => {\r\n            return (\r\n              <Comment\r\n                key={comment.Id}\r\n                comment={comment}\r\n                getNameById={getNameById}\r\n                incidentId={incidentId}\r\n                userId={userId}               \r\n              />\r\n            );\r\n          })\r\n        )}{\" \"}\r\n        {/* end of comments loop */}\r\n      </p>\r\n\r\n      <h6 className=\"heading indigo-text darken-4 left-align\">Add Comment</h6>\r\n      <div className=\"input-field\">\r\n        <textarea\r\n          id=\"comment\"\r\n          className=\"materialize-textarea\"\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n        ></textarea>\r\n        <label for=\"comment\" className=\"\">\r\n          Comment\r\n        </label>\r\n      </div>\r\n      <div className=\"file-field input-field\">\r\n        <div className=\"btn indigo darken-2\">\r\n          <i className=\"material-icons \">attachment</i>\r\n          <input type=\"file\" id=\"attachment\" multiple onChange={onFileChange} />\r\n        </div>\r\n        <div className=\"file-path-wrapper\">\r\n          <input\r\n            className=\"file-path validate\"\r\n            ref={newCommentFilesRef}\r\n            type=\"text\"\r\n            placeholder=\"Upload upto 3 files\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"input-field center \">\r\n        <button\r\n          className=\"left btn green darken-2 updateBtn\"\r\n          onClick={saveComment}\r\n        >\r\n          <span>Add</span>\r\n          <i className=\"material-icons right\">save</i>\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id       \r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {    \r\n    addNewComment: (formData) => dispatch(addNewComment(formData))    \r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comments);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Incidents\\Comment.js",["159","160","161","162","163","164"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport moment from \"moment\";\r\nimport { deleteAttachment, updateComment , deleteComment } from \"../../store/actions/incidentsActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { incidentsUrls } from \"../../api/apiURLs\";\r\n\r\nfunction Comment({\r\n  comment,\r\n  getNameById,\r\n  incidentId,\r\n  userId,\r\n  deleteAttachment,\r\n  updateComment,\r\n  deleteComment\r\n}) {\r\n\r\n  const [editComment, setEditComment] = useState(false);\r\n  const [commentText, setCommentText] = useState(comment.CommentText);\r\n  const [files, setFiles] = useState(null);\r\n\r\n  const commentEditClick = () => {\r\n    setEditComment(!editComment);\r\n    setCommentText(comment.CommentText);\r\n  };\r\n  const commentEditCancel = () => {\r\n    setCommentText(comment.CommentText);\r\n    setEditComment(false);\r\n  };\r\n\r\n  const commentEditSave = () => {\r\n    let changedComment = {\r\n      Id : comment.Id,\r\n      IncidentId : incidentId,\r\n      UserId : userId,\r\n      CreateDate : new Date(),\r\n      CommentText : commentText,\r\n      attachments :[]\r\n    }\r\n    updateComment(changedComment);\r\n    setEditComment(false);\r\n  };\r\n\r\n  const downloadFile = (file) => {\r\n    window.open(\r\n      incidentsUrls.downloadFileUrl + \r\n      \"type=comment\" +\r\n        \"&commentId=\" +\r\n        file.CommentId +\r\n        \"&incidentId=\" +\r\n        incidentId +\r\n        \"&filename=\" +\r\n        file.FileName +\r\n        \"&contentType=\" +\r\n        file.ContentType\r\n    );\r\n  };\r\n\r\n  const deleteFile = (file) => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this attachment.\" + file.FileName\r\n      )\r\n    ) {\r\n      deleteAttachment(\"comment\", userId, incidentId, file);  \r\n    }\r\n  };\r\n\r\n  const deleteThisComment = () => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this comment.\"\r\n      )\r\n    ) {\r\n      deleteComment(comment.Id,incidentId, userId );  \r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <p className=\"commentHeader darkslategrayText\">\r\n        <a className=\"username\">{getNameById(comment.UserId)}</a> added a\r\n        comment. -{\" \"}\r\n        <span\r\n          title={moment(comment.CreateDate).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n        >\r\n          {moment(comment.CreateDate).fromNow()}{\" \"}\r\n        </span>\r\n        <span className=\"right\">\r\n          <i\r\n            title=\"Edit Comment\"\r\n            className=\"actions-icon material-icons indigo-text darken-4 inline-icon\"\r\n            onClick={commentEditClick}\r\n          >\r\n            edit\r\n          </i>\r\n          <i\r\n            title=\"Delete Comment\"\r\n            className=\"actions-icon material-icons red-text inline-icon\"\r\n            onClick = {deleteThisComment}\r\n          >\r\n            cancel\r\n          </i>\r\n        </span>\r\n      </p>\r\n      {!editComment ? (\r\n        <p className=\"darkslategrayText\">{comment.CommentText}</p>\r\n      ) : (\r\n        <p className=\"comment-edit-box\">\r\n          <textarea className=\"materialize-textarea\" onChange={(e) => setCommentText(e.target.value)}></textarea>\r\n\r\n          <i\r\n            className=\"right green-text actions-icon material-icons\"\r\n            title=\"Save\"\r\n            onClick={commentEditSave}\r\n          >\r\n            check\r\n          </i>\r\n          <i\r\n            className=\"right yellow-text text-darken-2 actions-icon material-icons\"\r\n            title=\"Cancel\"\r\n            onClick={commentEditCancel}\r\n          >\r\n            cancel\r\n          </i>\r\n        </p>\r\n      )}{\" \"}\r\n      {/* end of edit comment - if */}\r\n      <p>\r\n        <ul className=\"commentFiles\">\r\n          {!comment.attachments\r\n            ? null\r\n            : comment.attachments.map((file) => {\r\n                return (\r\n                  <li key={file.Id}>\r\n                    <a className=\"center indigo-text darken-4\">\r\n                      {!editComment ? null : (\r\n                        <i\r\n                          title=\"Remove\"\r\n                          className=\"actions-icon material-icons red-text inline-icon\"\r\n                          onClick={() => deleteFile(file)}\r\n                        >\r\n                          cancel\r\n                        </i>\r\n                      )}\r\n                      <span\r\n                        title={file.FileName}\r\n                        onClick={() => downloadFile(file)}\r\n                      >\r\n                        {file.FileName.length > 40\r\n                          ? file.FileName.slice(0, 40) + \"...\"\r\n                          : file.FileName}\r\n                      </span>\r\n                    </a>\r\n                  </li>\r\n                );\r\n              })}\r\n        </ul>\r\n      </p>\r\n      <hr></hr>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id       \r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {   \r\n    deleteAttachment : (type, userid, incidentId , file) => dispatch(deleteAttachment(type, userid, incidentId ,file)),\r\n    updateComment : (comment) => dispatch(updateComment(comment)),\r\n    deleteComment : (commentId, incidentId, userId) => dispatch(deleteComment(commentId, incidentId, userId))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);\r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\api\\apiURLs.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\components\\Notifications.js",["165"],"import {React, useRef, useEffect, useState} from 'react'\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport M from 'materialize-css';\r\nimport  '../styles/notifications.css'\r\nimport {getAllNotifications, setNotificationStatus} from '../store/actions/notificationsActions';\r\nimport { removeIncidentData } from \"../store/actions/incidentsActions\";\r\n\r\n\r\n function Notifications({getNotifications, userId, notifications, setNotificationStatus, removeIncidentData}) {\r\n\r\n    const ddlNotiRef = useRef(); \r\n    const history = useHistory();\r\n    \r\n    const [unReadCount, setUnReadCount] = useState(notifications.filter(notification => !notification.IsRead).length);\r\n\r\n    useEffect(() => {        \r\n      var options = {\r\n        closeOnClick : false\r\n      }\r\n      M.Dropdown.init(ddlNotiRef.current, options);\r\n    }, [])\r\n\r\n\r\n  \r\n\r\n    useEffect(() => {        \r\n      getNotifications(userId);\r\n  }, [])\r\n\r\n    useEffect(() => {        \r\n      setUnReadCount(notifications.filter(notification => !notification.IsRead).length);\r\n  }, [notifications])\r\n  \r\n  const setStatus = (id , status) =>{\r\n    setNotificationStatus(id,status);\r\n  }\r\n\r\n  const openIncident = (notification) => {\r\n    setStatus(notification.Id,true);\r\n    \r\n    let path = '/Incident/' + notification.IncidentId;         \r\n    if(history.location.pathname !== path) {// only change path if it is different      \r\n      M.Dropdown.getInstance(ddlNotiRef.current).close();\r\n      removeIncidentData(); // So that user does not see old data that is stored in redux (and local storage)    \r\n      \r\n    }\r\n    history.push(path);\r\n  }\r\n\r\n  \r\n\r\n    return (\r\n      <>\r\n       <li>\r\n        <a\r\n          ref={ddlNotiRef}\r\n          href=\"#dropdown1\"\r\n          className=\"btn-floating z-depth-0 indigo darken-4 dropdown-trigger\"\r\n          data-target=\"dropdownNotifications\"     \r\n        >\r\n          <i className=\"material-icons\">notifications</i>\r\n        </a>\r\n        <ul id=\"dropdownNotifications\" className=\"notifications dropdown-content\">\r\n          {notifications == null || notifications.length < 1 ? (\r\n            <li>\r\n              <div className=\"notification-box\">                \r\n                  <p className=\"\">No new notificaitons.</p>               \r\n              </div>\r\n            </li>\r\n          ) : (\r\n            notifications.map((notification) => {\r\n              let classes =  notification.IsRead ? \"notification-box read\" : \"notification-box unread\";\r\n              return (\r\n                <li key={notification.Id}>\r\n                  <div className={classes}>\r\n                    <div className=\"row\">\r\n                      <div className=\"col s2\">\r\n                      {notification.IsRead?  \r\n                          (  <i className=\"material-icons white-text readIcon\" title=\"Mark Unread\" onClick={()=>setStatus(notification.Id,false)}>\r\n                                radio_button_unchecked\r\n                            </i>)\r\n                        :\r\n                          ( <i className=\"material-icons white-text readIcon\" title=\"Mark Read\" onClick={()=>setStatus(notification.Id,true)}>\r\n                                radio_button_checked\r\n                            </i>)\r\n                      }\r\n                      </div>\r\n                      <div className=\"col s10 right\">\r\n                        <p onClick={()=>openIncident(notification)}> {notification.NotifyAbout}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </li>\r\n              );\r\n            })\r\n          )}\r\n        </ul>\r\n        </li>\r\n            <li>\r\n              {unReadCount > 0?  <span className=\"badge white-text new pink\">{unReadCount}</span> : null}\r\n             \r\n            </li>\r\n            </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{      \r\n        notifications :state.notifications.notifications,\r\n        userId :state.userLogin.userId  // logged in User Id   \r\n    }\r\n  }  \r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      getNotifications: (userid) => dispatch(getAllNotifications(userid)),\r\n      setNotificationStatus : (id, isRead) => dispatch(setNotificationStatus(id, isRead)),\r\n      removeIncidentData : () => dispatch(removeIncidentData())\r\n    };\r\n};\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Notifications);\r\n  ","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\reducers\\notificationsReducer.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\store\\actions\\notificationsActions.js",[],"C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\signalR\\Receiver.js",["166"],"import {React, useEffect} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {  JsonHubProtocol,   \r\n    HubConnectionBuilder,\r\n    LogLevel\r\n} from '@microsoft/signalr';\r\nimport { commentRecieved, getAllNotifications } from \"../store/actions/notificationsActions\";\r\nimport { updateHubId } from '../store/actions/userLoginActions'\r\n\r\n\r\n  function Receiver({commentRecieved, updateHubId, userId, refreshNotifications}) {\r\n\r\n    useEffect(() => {   \r\n        \r\n        const newConnection = new HubConnectionBuilder()\r\n        .withUrl('https://localhost:44310/hubs/notifications')\r\n        .withAutomaticReconnect()\r\n        .withHubProtocol(new JsonHubProtocol())\r\n        .configureLogging(LogLevel.Information)\r\n        .build();\r\n        console.log(\"newConnection\",newConnection);\r\n        newConnection.start()\r\n        .then(result => {\r\n            console.log('Connected!');\r\n            let hubId = newConnection.connectionId; \r\n            updateHubId(hubId, userId);\r\n            \r\n            newConnection.on('ReceiveMessage', (message) => {\r\n                console.log(message);\r\n                 commentRecieved(message);\r\n            });\r\n            newConnection.on('UpdateNotifications', (incidentId) => {\r\n              console.log(incidentId);\r\n              refreshNotifications(userId);\r\n          });\r\n\r\n        })\r\n        .catch(e => console.log('Connection failed: ', e));\r\n     \r\n    }, [])\r\n\r\n \r\n\r\n    return (\r\n        <>            \r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      allAssignees: state.users.users,\r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,  // logged in User Id       \r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        commentRecieved: (comment) => dispatch(commentRecieved(comment)),\r\n        updateHubId: (hubId, userId) => dispatch(updateHubId(hubId, userId)),\r\n        refreshNotifications : (userId) =>  dispatch(getAllNotifications(userId))\r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Receiver);\r\n  \r\n","C:\\Users\\umar\\Desktop\\Learning\\IM\\IM_React\\incidentmanager\\src\\signalR\\sender.js",[],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":46,"column":20,"nodeType":"173","messageId":"174","endLine":46,"endColumn":24},{"ruleId":"171","severity":1,"message":"175","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":10},{"ruleId":"176","severity":1,"message":"177","line":25,"column":11,"nodeType":"178","endLine":25,"endColumn":77},{"ruleId":"176","severity":1,"message":"179","line":48,"column":14,"nodeType":"178","endLine":48,"endColumn":17},{"ruleId":"176","severity":1,"message":"179","line":64,"column":18,"nodeType":"178","endLine":64,"endColumn":21},{"ruleId":"176","severity":1,"message":"177","line":68,"column":15,"nodeType":"178","endLine":68,"endColumn":50},{"ruleId":"180","severity":1,"message":"181","line":21,"column":8,"nodeType":"182","endLine":21,"endColumn":10,"suggestions":"183"},{"ruleId":"180","severity":1,"message":"181","line":37,"column":8,"nodeType":"182","endLine":37,"endColumn":38,"suggestions":"184"},{"ruleId":"171","severity":1,"message":"185","line":33,"column":9,"nodeType":"173","messageId":"174","endLine":33,"endColumn":23},{"ruleId":"180","severity":1,"message":"186","line":38,"column":8,"nodeType":"182","endLine":38,"endColumn":16,"suggestions":"187"},{"ruleId":"176","severity":1,"message":"179","line":44,"column":15,"nodeType":"178","endLine":44,"endColumn":19},{"ruleId":"176","severity":1,"message":"179","line":17,"column":19,"nodeType":"178","endLine":17,"endColumn":53},{"ruleId":"176","severity":1,"message":"179","line":22,"column":19,"nodeType":"178","endLine":22,"endColumn":51},{"ruleId":"176","severity":1,"message":"179","line":27,"column":19,"nodeType":"178","endLine":27,"endColumn":52},{"ruleId":"180","severity":1,"message":"188","line":45,"column":8,"nodeType":"182","endLine":45,"endColumn":10,"suggestions":"189"},{"ruleId":"180","severity":1,"message":"181","line":27,"column":8,"nodeType":"182","endLine":27,"endColumn":38,"suggestions":"190"},{"ruleId":"171","severity":1,"message":"191","line":1,"column":17,"nodeType":"173","messageId":"174","endLine":1,"endColumn":23},{"ruleId":"171","severity":1,"message":"192","line":3,"column":8,"nodeType":"173","messageId":"174","endLine":3,"endColumn":9},{"ruleId":"171","severity":1,"message":"193","line":28,"column":10,"nodeType":"173","messageId":"174","endLine":28,"endColumn":18},{"ruleId":"180","severity":1,"message":"194","line":60,"column":6,"nodeType":"182","endLine":60,"endColumn":23,"suggestions":"195"},{"ruleId":"180","severity":1,"message":"188","line":64,"column":6,"nodeType":"182","endLine":64,"endColumn":8,"suggestions":"196"},{"ruleId":"180","severity":1,"message":"197","line":79,"column":6,"nodeType":"182","endLine":79,"endColumn":20,"suggestions":"198"},{"ruleId":"199","severity":1,"message":"200","line":149,"column":28,"nodeType":"201","messageId":"202","endLine":149,"endColumn":29},{"ruleId":"176","severity":1,"message":"179","line":370,"column":34,"nodeType":"178","endLine":370,"endColumn":58},{"ruleId":"171","severity":1,"message":"203","line":1,"column":17,"nodeType":"173","messageId":"174","endLine":1,"endColumn":26},{"ruleId":"171","severity":1,"message":"204","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":14},{"ruleId":"171","severity":1,"message":"205","line":19,"column":9,"nodeType":"173","messageId":"174","endLine":19,"endColumn":16},{"ruleId":"171","severity":1,"message":"203","line":1,"column":17,"nodeType":"173","messageId":"174","endLine":1,"endColumn":26},{"ruleId":"171","severity":1,"message":"191","line":1,"column":38,"nodeType":"173","messageId":"174","endLine":1,"endColumn":44},{"ruleId":"171","severity":1,"message":"206","line":19,"column":10,"nodeType":"173","messageId":"174","endLine":19,"endColumn":15},{"ruleId":"171","severity":1,"message":"207","line":19,"column":17,"nodeType":"173","messageId":"174","endLine":19,"endColumn":25},{"ruleId":"176","severity":1,"message":"179","line":81,"column":9,"nodeType":"178","endLine":81,"endColumn":33},{"ruleId":"176","severity":1,"message":"179","line":135,"column":21,"nodeType":"178","endLine":135,"endColumn":64},{"ruleId":"180","severity":1,"message":"208","line":29,"column":6,"nodeType":"182","endLine":29,"endColumn":8,"suggestions":"209"},{"ruleId":"180","severity":1,"message":"210","line":40,"column":8,"nodeType":"182","endLine":40,"endColumn":10,"suggestions":"211"},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'qs' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["214"],["215"],"'dateDifference' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPageNumber'. Either include it or remove the dependency array. If 'setPageNumber' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["216"],"React Hook useEffect has a missing dependency: 'getAllAssignees'. Either include it or remove the dependency array. If 'getAllAssignees' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["217"],["218"],"'useRef' is defined but never used.","'M' is defined but never used.","'assignee' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllAssignees' and 'getIncidentById'. Either include them or remove the dependency array. If 'getIncidentById' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["219"],["220"],"React Hook useEffect has a missing dependency: 'allAssignees'. Either include it or remove the dependency array.",["221"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'useEffect' is defined but never used.","'moment' is defined but never used.","'history' is assigned a value but never used.","'files' is assigned a value but never used.","'setFiles' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getNotifications' and 'userId'. Either include them or remove the dependency array. If 'getNotifications' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["222"],"React Hook useEffect has missing dependencies: 'commentRecieved', 'refreshNotifications', 'updateHubId', and 'userId'. Either include them or remove the dependency array. If 'updateHubId' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["223"],"no-global-assign","no-unsafe-negation",{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"226","fix":"232"},{"desc":"233","fix":"234"},{"desc":"230","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},"Update the dependencies array to be: [props]",{"range":"242","text":"243"},"Update the dependencies array to be: [PageNumber, PageSize, Search, props]",{"range":"244","text":"245"},"Update the dependencies array to be: [search, setPageNumber]",{"range":"246","text":"247"},"Update the dependencies array to be: [getAllAssignees]",{"range":"248","text":"249"},{"range":"250","text":"245"},"Update the dependencies array to be: [getAllAssignees, getIncidentById, match.params.id]",{"range":"251","text":"252"},{"range":"253","text":"249"},"Update the dependencies array to be: [allAssignees, incidentData]",{"range":"254","text":"255"},"Update the dependencies array to be: [getNotifications, userId]",{"range":"256","text":"257"},"Update the dependencies array to be: [commentRecieved, refreshNotifications, updateHubId, userId]",{"range":"258","text":"259"},[746,748],"[props]",[1135,1165],"[PageNumber, PageSize, Search, props]",[944,952],"[search, setPageNumber]",[1738,1740],"[getAllAssignees]",[807,837],[1980,1997],"[getAllAssignees, getIncidentById, match.params.id]",[2091,2093],[2701,2715],"[allAssignees, incidentData]",[947,949],"[getNotifications, userId]",[1426,1428],"[commentRecieved, refreshNotifications, updateHubId, userId]"]