[{"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\index.js":"1","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\reportWebVitals.js":"2","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\App.js":"3","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\reducers\\rootReducer.js":"4","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Login\\Login.js":"5","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Users\\AddUser.js":"6","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Users\\UsersList.js":"7","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\NavBar.js":"8","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\IncidentLisiting.js":"9","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\AddNew.js":"10","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\signalR\\Receiver.js":"11","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDetails.js":"12","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\Dashboard.js":"13","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Messages\\Messages.js":"14","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\reducers\\notificationsReducer.js":"15","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\reducers\\userLoginReducer.js":"16","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\reducers\\incidentsReducer.js":"17","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\reducers\\dashboardReducer.js":"18","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\reducers\\messagesReducer.js":"19","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\reducers\\usersReducer.js":"20","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Pages.js":"21","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\PageActions.js":"22","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Notifications.js":"23","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Users\\User.js":"24","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\Incident.js":"25","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Messages\\Conversation.js":"26","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Messages\\Message.js":"27","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Messages\\ComposeMessage.js":"28","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Messages\\Reply.js":"29","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OldestOpen.js":"30","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\MostAssignedByUser.js":"31","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\LastFive.js":"32","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\KPIBar.js":"33","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OverallWidget.js":"34","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\DayByDayCount.js":"35","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\AssigneeDropdown.js":"36","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDescription.js":"37","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentTitle.js":"38","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comments.js":"39","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\actions\\userLoginActions.js":"40","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\actions\\usersActions.js":"41","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\actions\\notificationsActions.js":"42","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\actions\\incidentsActions.js":"43","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\actions\\messagesActions.js":"44","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\api\\apiURLs.js":"45","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\helpers\\common.js":"46","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\actions\\dashboardActions.js":"47","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comment.js":"48","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\signalR\\sender.js":"49"},{"size":1161,"mtime":1679236738273,"results":"50","hashOfConfig":"51"},{"size":375,"mtime":1679236738273,"results":"52","hashOfConfig":"51"},{"size":1975,"mtime":1680808608329,"results":"53","hashOfConfig":"51"},{"size":639,"mtime":1679236738277,"results":"54","hashOfConfig":"51"},{"size":4698,"mtime":1680959628148,"results":"55","hashOfConfig":"51"},{"size":6644,"mtime":1679236738269,"results":"56","hashOfConfig":"51"},{"size":4272,"mtime":1680299764845,"results":"57","hashOfConfig":"51"},{"size":5202,"mtime":1680808586604,"results":"58","hashOfConfig":"51"},{"size":5131,"mtime":1680977581042,"results":"59","hashOfConfig":"51"},{"size":13688,"mtime":1679236738259,"results":"60","hashOfConfig":"51"},{"size":3494,"mtime":1680646518440,"results":"61","hashOfConfig":"51"},{"size":18600,"mtime":1680978292233,"results":"62","hashOfConfig":"51"},{"size":923,"mtime":1679236738260,"results":"63","hashOfConfig":"51"},{"size":8422,"mtime":1679236738267,"results":"64","hashOfConfig":"51"},{"size":1171,"mtime":1679236738277,"results":"65","hashOfConfig":"51"},{"size":1276,"mtime":1679236738278,"results":"66","hashOfConfig":"51"},{"size":4705,"mtime":1679236738277,"results":"67","hashOfConfig":"51"},{"size":1213,"mtime":1679236738276,"results":"68","hashOfConfig":"51"},{"size":3576,"mtime":1679236738277,"results":"69","hashOfConfig":"51"},{"size":839,"mtime":1679236738278,"results":"70","hashOfConfig":"51"},{"size":4279,"mtime":1679236738269,"results":"71","hashOfConfig":"51"},{"size":1193,"mtime":1679236738269,"results":"72","hashOfConfig":"51"},{"size":5349,"mtime":1679236738268,"results":"73","hashOfConfig":"51"},{"size":636,"mtime":1680299732730,"results":"74","hashOfConfig":"51"},{"size":3037,"mtime":1679236738265,"results":"75","hashOfConfig":"51"},{"size":2938,"mtime":1679236738266,"results":"76","hashOfConfig":"51"},{"size":2582,"mtime":1679236738267,"results":"77","hashOfConfig":"51"},{"size":3538,"mtime":1679236738266,"results":"78","hashOfConfig":"51"},{"size":2360,"mtime":1679236738267,"results":"79","hashOfConfig":"51"},{"size":2734,"mtime":1679236738262,"results":"80","hashOfConfig":"51"},{"size":3416,"mtime":1680416550717,"results":"81","hashOfConfig":"51"},{"size":2605,"mtime":1679236738261,"results":"82","hashOfConfig":"51"},{"size":1802,"mtime":1679236738261,"results":"83","hashOfConfig":"51"},{"size":4702,"mtime":1679236738263,"results":"84","hashOfConfig":"51"},{"size":2089,"mtime":1679236738260,"results":"85","hashOfConfig":"51"},{"size":5266,"mtime":1679236738260,"results":"86","hashOfConfig":"51"},{"size":4232,"mtime":1679236738264,"results":"87","hashOfConfig":"51"},{"size":3415,"mtime":1680805749270,"results":"88","hashOfConfig":"51"},{"size":3764,"mtime":1679236738263,"results":"89","hashOfConfig":"51"},{"size":3138,"mtime":1679236738275,"results":"90","hashOfConfig":"51"},{"size":1899,"mtime":1679236738276,"results":"91","hashOfConfig":"51"},{"size":1946,"mtime":1679236738275,"results":"92","hashOfConfig":"51"},{"size":8235,"mtime":1680808764517,"results":"93","hashOfConfig":"51"},{"size":8906,"mtime":1679236738275,"results":"94","hashOfConfig":"51"},{"size":2549,"mtime":1680957794812,"results":"95","hashOfConfig":"51"},{"size":701,"mtime":1679236738270,"results":"96","hashOfConfig":"51"},{"size":3855,"mtime":1679236738274,"results":"97","hashOfConfig":"51"},{"size":6356,"mtime":1680805449572,"results":"98","hashOfConfig":"51"},{"size":2422,"mtime":1680895999449,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"12cb77i",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"102"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"102"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"102"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"102"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"102"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"102"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"102"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"102"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"102"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"102"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"102"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"102"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"102"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"102"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"102"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"102"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"102"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"102"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"102"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"102"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"102"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"102"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"102"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"102"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"102"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"102"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"102"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"102"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"102"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"102"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"102"},"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\index.js",[],["231","232"],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\reportWebVitals.js",[],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\App.js",[],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\reducers\\rootReducer.js",[],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Login\\Login.js",["233","234"],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Users\\AddUser.js",["235","236"],"import {React , useRef, useEffect, useState} from 'react';\r\nimport PageActions from \"../PageActions\";\r\nimport M from 'materialize-css';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { addNewUser } from '../../store/actions/usersActions';\r\n\r\n\r\n function AddUser({addNewUser}){\r\n\r\n\r\n    const history = useHistory();\r\n\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [lastName, setLastName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");  \r\n    const [phone, setPhone] = useState(\"\");  \r\n    const [profilePic , setProfilePic] = useState(null);\r\n\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    useEffect(() => {     \r\n       \r\n      \r\n    }, []);\r\n\r\n   const onFileChange = (event) => {    \r\n     \r\n    setProfilePic(event.target.files);\r\n   };\r\n\r\n   const cancelClick = (event) => {\r\n     event.preventDefault();\r\n     history.goBack();\r\n     //console.log(history);\r\n   };\r\n\r\n   const validateForm = () => {\r\n\r\n    if(firstName === \"\" || lastName === \"\" || email === \"\"  || phone === \"\" )\r\n        return false;\r\n    return true;\r\n\r\n   }\r\n\r\n   const saveClick = (event) => {\r\n    event.preventDefault();     \r\n    if(!validateForm()){\r\n      setFormError(\"Please complete required fields before saving.\")\r\n      return;\r\n    }\r\n    \r\n    setFormError(\"\");\r\n   \r\n   \r\n    const formData = new FormData(); \r\n\r\n    if(profilePic){\r\n       \r\n          formData.append( \r\n            \"Attachment1\", \r\n            profilePic[0], \r\n            profilePic[0].name \r\n          );\r\n          }\r\n     formData.append(\"FirstName\", firstName); \r\n     formData.append(\"LastName\", lastName);\r\n     formData.append(\"Email\", email); \r\n     formData.append(\"Phone\", email); \r\n     addNewUser(formData);\r\n  }; \r\n\r\n \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Add new User\"} />\r\n        <section>\r\n          <div className=\"container\">\r\n          <div className=\"card\">\r\n        <div className=\"card-content\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 l10 offset-l1\">\r\n                <form>\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 l6\">\r\n                      <div className=\"input-field \">\r\n                        <input\r\n                         className=\"validate\"\r\n                          required\r\n                          type=\"text\"\r\n                          id=\"firstName\"\r\n                          value={firstName}\r\n                          onChange={(e) => setFirstName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s12 l6\">                    \r\n                        <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"lastName\"\r\n                            value={lastName}\r\n                            onChange={(e) => setLastName(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"lastName\">Last Name</label> \r\n                    </div>\r\n                                      \r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"email\">Email</label> \r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"phone\"\r\n                            value={phone}\r\n                            onChange={(e) => setPhone(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"phone\">Phone</label> \r\n                  </div>\r\n\r\n                  <div className=\"file-field input-field\">\r\n                    <div className=\"btn indigo darken-2\">\r\n                      <i className=\"material-icons \">attachment</i>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"attachment\"                        \r\n                        onChange={onFileChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                      <input\r\n                        className=\"file-path validate\"\r\n                        type=\"text\"\r\n                        placeholder=\"Upload profile picture\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-field\">\r\n                      <p className=\"red-text center\">{formError ? formError : \"\" }</p>\r\n                  </div>\r\n\r\n                  \r\n                  <div className=\"input-field save-btns\">\r\n                    <button\r\n                      className=\"btn green darken-2 left\"\r\n                      onClick={saveClick}\r\n                    >\r\n                      <span>Save</span>\r\n                      <i className=\"material-icons right\">save</i>\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn yellow darken-4 left\"\r\n                      onClick={cancelClick}\r\n                    >\r\n                      <span>Cancel</span>\r\n                      <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n            <br /><br/>\r\n            </div>\r\n            </div>\r\n           \r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{\r\n        allAssignees : state.users.users,\r\n        user_Name :state.userLogin.user_Name, // Logged in User's name\r\n        userId :state.userLogin.userId,  // logged in User Id       \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {       \r\n        addNewUser : (formData) => dispatch(addNewUser(formData))\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUser);\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Users\\UsersList.js",["237"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Pages from '../Pages'\r\nimport User from './User'\r\nimport PageActions from \"../PageActions\";\r\nimport { userssWithPage } from \"../../store/actions/usersActions\";\r\nimport {  useHistory  } from 'react-router-dom'\r\n\r\n function UsersList(props) {\r\n\r\n    const [PageNumber, setPageNumber] = useState(1);\r\n    const [PageSize, setPageSize] = useState(5);\r\n    const [Search, setSearch] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n    \r\n    useEffect(() => {\r\n        const parameters = {\r\n            PageNumber : PageNumber,\r\n            PageSize : PageSize,\r\n            Search : Search\r\n        }        \r\n        props.userssWithPage(parameters);\r\n        return () => {\r\n            \r\n        }\r\n    }, [PageNumber, PageSize, Search])\r\n\r\n    const searchTextChange =   (text) => {      \r\n            setSearch(text);\r\n            setPageNumber(1);\r\n    }\r\n\r\n    const addNewClick = ()=>{\r\n      let path = '/AddUser';      \r\n      history.push(path);\r\n    }\r\n    \r\n    if( !props.Users){\r\n      return (\r\n        <div className=\"preloader-wrapper container big active page-loader\">\r\n        <div className=\"spinner-layer spinner-blue-only\">\r\n          <div className=\"circle-clipper left\">\r\n            <div className=\"circle\"></div>\r\n          </div><div className=\"gap-patch\">\r\n            <div className=\"circle\"></div>\r\n          </div><div className=\"circle-clipper right\">\r\n            <div className=\"circle\"></div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n      )\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Users\"} /> \r\n\r\n        <section>\r\n          <div className=\"container\">\r\n          <div className=\"card\">\r\n        <div className=\"card-content\">\r\n                <div className=\"row\">\r\n\r\n                  <div className=\"col s6 l6\">\r\n                    <div className=\"input-field\">                \r\n                      <input type=\"text\"  value={Search}  onChange={(e) => searchTextChange(e.target.value)} />\r\n                      <label htmlFor=\"search\">Search</label>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"col s6 l6\">\r\n                    <div className=\"input-field\">              \r\n                      <button className=\"btn green darken-4 right\" onClick={()=>addNewClick()} >\r\n                        <span>Add New</span>\r\n                        <i className=\"material-icons right\">create</i>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col s12 l12\">\r\n                    <table className=\"responsive-table highlight incidentsTbl\">\r\n                      <thead>\r\n                        <tr className=\"header\" data-target=\"blue\">\r\n                          <th>First Name</th>\r\n                          <th>Last Name</th>\r\n                          <th>Email</th>  \r\n                          <th>Phone</th>                      \r\n                          <th>Created Date</th>                     \r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                      {\r\n                      !props.Users? null : props.Users.map(user=>{\r\n                              return (\r\n                                <User key={user.Id} user= {user} />                          )\r\n                          })\r\n                      }           \r\n                      </tbody>\r\n                    </table>\r\n                    <Pages  TotalRecords={props.TotalUsers} PostsPerPage={PageSize} setPageNumber={setPageNumber} setPageSize={setPageSize} search={Search} />\r\n                  </div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        Users : state.users.UsersList,\r\n        TotalUsers : state.users.TotalUsers     \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        userssWithPage: (parameters) => dispatch(userssWithPage(parameters))\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(UsersList);","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\NavBar.js",["238","239","240","241","242"],"import {React, useEffect} from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/Navbar.css';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Notifications from './Notifications';\r\nimport { signOut } from \"../store/actions/userLoginActions\";\r\nimport logo from '../images/logo-white.png'\r\nimport { allUsers } from \"../store/actions/usersActions\";\r\n\r\nfunction NavBar({user_Name, loginError, token, signOut, getAllUsers, allUsers, UnreadConversations}) {\r\n\r\n  useEffect(() => {    \r\n     getAllUsers();\r\n    }, [token]);\r\n\r\n  if (!token){\r\n    //alert(\"Your session has been expired. Please login again.\")\r\n    return <Redirect to='/' /> \r\n  } \r\n\r\n  const logOut = () => {\r\n    signOut();   \r\n  }\r\n  // if (loginError) return <Redirect to='/' /> \r\n   \r\n    return (\r\n      <nav className=\"nav-wrapper \">\r\n        <div className=\"container\">\r\n          <div className=\"left\">\r\n\r\n            <NavLink to=\"/dashboard\" className=\"brand-logo\">             \r\n              <img src={logo} />\r\n            </NavLink>\r\n          </div>\r\n          <a href=\"#\" className=\"sidenav-trigger\" data-target=\"mobile-menu\">\r\n            <i className=\"material-icons\">menu</i>\r\n          </a>\r\n          <ul className=\"navbar-ul right hide-on-med-and-down\">\r\n            <li class=\"nav-link\">     \r\n              <NavLink to=\"/incidents\"  > \r\n              <i class=\"material-icons\">pest_control</i>            \r\n                 <span>Incidents </span>\r\n              </NavLink> \r\n            </li>\r\n            <li class=\"nav-link\">\r\n              <NavLink to=\"/UsersList\" >\r\n              <i class=\"material-icons\">people</i>            \r\n                 <span>Users </span>\r\n                </NavLink>              \r\n            </li> \r\n               \r\n            <li class=\"nav-link\">     \r\n              <NavLink to=\"/messages\" className=\"message-nav\" >     \r\n                 <i className=\"material-icons  \">message</i> \r\n                 <span>Messages </span>\r\n              \r\n              </NavLink> \r\n              \r\n            </li>    \r\n              <Notifications />\r\n            <li>\r\n                <button type=\"button\" title={user_Name} className=\"btn-floating  orange darken-3 userWelcome\" >\r\n                  {user_Name.split(/\\s/).reduce((response,word)=> response+=word.slice(0,1),'')} \r\n                 </button>\r\n            </li>\r\n            <li className=\" singout-btn\">\r\n             <a> <i className=\"material-icons red-text\" onClick={() => logOut()}>logout</i> </a>\r\n            </li>\r\n          </ul>\r\n          {/* for mobile */}\r\n          <ul className=\"sidenav indigo darken-4\" id=\"mobile-menu\">\r\n\r\n            <li>\r\n              <NavLink to=\"/Dashboard\" className=\"nav-link sidenav-close  white-text\">\r\n              <i class=\"material-icons white-text\">home</i>\r\n                <span>Dashboard</span>\r\n              </NavLink>\r\n            </li>\r\n\r\n            <li>\r\n              <NavLink to=\"/incidents\" className=\"nav-link sidenav-close  white-text\">\r\n              <i class=\"material-icons white-text\">pest_control</i>\r\n                <span>Incidents</span>\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/UsersList\" className=\"sidenav-close white-text\">\r\n              <i class=\"material-icons white-text\">people</i>\r\n                <span>Users</span>\r\n                \r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/Messages\" className=\"sidenav-close white-text\">\r\n                <i class=\"material-icons white-text\">message</i>\r\n                  <span>Messages</span>                \r\n              </NavLink>\r\n            </li>\r\n            {/* <Notifications /> */}\r\n\r\n            {/* <li>\r\n              <a href=\"\" className=\"white-text\">\r\n                <i className=\"material-icons white-text\">notifications</i>\r\n                <span className=\"Indigo-text\">5</span>\r\n              </a>\r\n\r\n            </li>\r\n            <li>\r\n              {UnreadConversations > 0? (\r\n                \r\n                <span className=\" badge white-text new  messages-badge\">{UnreadConversations}</span>\r\n              \r\n              )\r\n              : <></>}\r\n             </li>  */}\r\n\r\n            <li>\r\n              <a> <i className=\"material-icons red-text\" onClick={signOut}>settings_power</i> \r\n                <span className='red-text lighten-1'>Logout</span>\r\n              </a>\r\n            </li>\r\n\r\n            \r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{      \r\n      user_Name :state.userLogin.user_Name, // Logged in User's name\r\n      userId :state.userLogin.userId,  // logged in User Id      \r\n      loginError : state.userLogin.loginError,\r\n      token : state.userLogin.token,\r\n      allUser: state.users.users,   \r\n      UnreadConversations : state.messages.UnreadConversations\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    signOut: () => dispatch(signOut()),\r\n    getAllUsers: () => dispatch(allUsers()),\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\IncidentLisiting.js",["243","244"],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\AddNew.js",[],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\signalR\\Receiver.js",["245","246","247"],"import React, { useEffect} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {  JsonHubProtocol,   \r\n    HubConnectionBuilder,\r\n    LogLevel\r\n} from '@microsoft/signalr';\r\nimport { commentRecieved, getAllNotifications } from \"../store/actions/notificationsActions\";\r\nimport { updateHubId } from '../store/actions/userLoginActions';\r\nimport { conversationsByUser, messagesByConversations, receiveMessage, receiveConversation } from '../store/actions/messagesActions';\r\nimport { baseUrl,baseUrl2 } from \"../api/apiURLs\";\r\n\r\n  function Receiver({commentRecieved, updateHubId, userId, refreshNotifications, Conversations, conversationsByUser, Messages, messagesByConversations, receiveMessage, receiveConversation}) {\r\n\r\n    useEffect(() => {   \r\n        \r\n        const newConnection = new HubConnectionBuilder()\r\n        .withUrl(baseUrl2 +'hubs/notifications')\r\n        .withAutomaticReconnect()\r\n        .withHubProtocol(new JsonHubProtocol())\r\n        .configureLogging(LogLevel.Information)\r\n        .build();\r\n        console.log(\"newConnection\",newConnection);\r\n        newConnection.start()\r\n        .then(result => {\r\n            console.log('Connected!');\r\n            let hubId = newConnection.connectionId; \r\n            updateHubId(hubId, userId);\r\n            \r\n            newConnection.on('ReceiveMessage', (message) => {\r\n                console.log(message);\r\n                 commentRecieved(message);\r\n            });\r\n            newConnection.on('UpdateNotifications', (incidentId) => {\r\n              console.log(incidentId);\r\n              refreshNotifications(userId);\r\n          });\r\n\r\n          newConnection.on('ReceiveNewMessage', (newMessage) => {\r\n            console.log(\"newMessage\" , newMessage);          \r\n            \r\n              let coversationId = newMessage.ConversationId; \r\n              if(Messages[0].ConversationId == coversationId){ // if conversation is open, update messages \r\n                    receiveMessage(newMessage);\r\n              }\r\n               \r\n        });\r\n\r\n        newConnection.on('ReceiveNewConversation', (newMessage) => {          \r\n          console.log(\"newConversation\" , newMessage);        \r\n           receiveConversation(newMessage);         \r\n      });\r\n\r\n        })\r\n        .catch(e => console.log('Connection failed: ', e));\r\n     \r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <>  \r\n      \r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      allAssignees: state.users.users,\r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,  // logged in User Id\r\n      Conversations :  state.messages.Conversations,    \r\n      Messages: state.messages.Messages,  \r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        commentRecieved: (comment) => dispatch(commentRecieved(comment)),\r\n        updateHubId: (hubId, userId) => dispatch(updateHubId(hubId, userId)),\r\n        refreshNotifications : (userId) =>  dispatch(getAllNotifications(userId)),\r\n        conversationsByUser: (userId) => dispatch(conversationsByUser(userId)),   \r\n        messagesByConversations: (conversationId) => dispatch(messagesByConversations(conversationId)),\r\n        receiveMessage : (newMessage) => dispatch(receiveMessage(newMessage)),\r\n        receiveConversation : (newConversation) => dispatch(receiveConversation(newConversation))\r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Receiver);\r\n  \r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDetails.js",["248","249","250","251","252","253","254"],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\Dashboard.js",["255"],"import React from 'react'\r\nimport PageActions from '../../PageActions';\r\nimport KPIBar from './KPIBar';\r\nimport OverallWidget from './OverallWidget'\r\nimport LastFive from './LastFive';\r\nimport  '../../../styles/dashboard.css'\r\nimport MostAssignedByUser from './MostAssignedByUser';\r\nimport DayByDayCount from './DayByDayCount';\r\nimport FiveOldestOpenIncidents from './OldestOpen';\r\n\r\n function Dashboard() {\r\n \r\n\r\n    return (\r\n      <div>\r\n        <PageActions Title={\"Dashboard\"} />\r\n        \r\n        <div className=\"container\">     \r\n          <KPIBar />\r\n          <div className=\"row\">\r\n            <OverallWidget />\r\n            <MostAssignedByUser />\r\n            <LastFive />\r\n           <FiveOldestOpenIncidents />\r\n          </div>\r\n\r\n          {/* <div className=\"row\">          \r\n      \r\n           <DayByDayCount />\r\n          </div> */}\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Messages\\Messages.js",["256","257","258","259","260"],"import { React, useState, useEffect, useRef } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { messagesByUser, conversationsByUser, messagesByConversations, selectConversation, deleteConversation } from \"../../store/actions/messagesActions\";\r\nimport '../../styles/messages.css';\r\nimport ComposeMessage from './ComposeMessage';\r\nimport Reply from './Reply';\r\nimport Message from './Message'\r\nimport Conversation from './Conversation'\r\n\r\nfunction Messages({\r\n    userId,\r\n    allUsers,\r\n    UserMessages,\r\n    getMessagesByUser,\r\n    conversationsByUser,\r\n    messagesByConversations,\r\n    Conversations,\r\n    SelectedConversation,\r\n    selectConversation,\r\n    deleteConversation,\r\n    UserMessagesChanged, ConversationsChanged, SelectedConversationChanged\r\n}) {\r\n\r\n    const [userToggle, setUserToggle] = useState(false);\r\n    const [composeToggle, setComposeToggle] = useState(false);\r\n    const messagesRef = useRef();\r\n    const [conversationTitle, setConversationTitle] = useState('');\r\n    const [isScrollDone, setIsScrollDone] = useState(false);\r\n\r\n    useEffect(() => {\r\n        conversationsByUser(userId);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (Conversations != null && Conversations.length > 0) {\r\n            setIsScrollDone(false);\r\n            selectConversation(Conversations[0]);\r\n        }\r\n    }, [ConversationsChanged])\r\n\r\n    useEffect(() => {\r\n        setIsScrollDone(false);\r\n        messagesByConversations(SelectedConversation.Id);\r\n        if (SelectedConversation != null && SelectedConversation != {}) {\r\n            let user = SelectedConversation.User1 == userId ? getUserNameById(SelectedConversation.User2) : getUserNameById(SelectedConversation.User1);\r\n            setConversationTitle(user);\r\n        }\r\n\r\n    }, [SelectedConversationChanged]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            messagesRef.current.scrollTop = messagesRef.current.scrollHeight;\r\n            setIsScrollDone(true);\r\n        } catch (e) { }\r\n    }, [UserMessagesChanged])\r\n\r\n    const newConversationAdded = () => {\r\n        conversationsByUser(userId);\r\n    }\r\n\r\n    const delConversation = () => {\r\n        if (window.confirm(\"Delete conversation forever?\")) {\r\n            deleteConversation(SelectedConversation.Id);\r\n        }\r\n    }\r\n\r\n    const composeToggleClicked = () => {\r\n        setComposeToggle(!composeToggle);\r\n        setUserToggle(!userToggle);\r\n    }\r\n\r\n    const getUserNameById = (id) => {\r\n        let user = allUsers.find((assignee) => {\r\n            return assignee.Id === id;\r\n        });\r\n        if (!user) {\r\n            return id;\r\n        }\r\n        return user.FirstName + \" \" + user.LastName\r\n    }\r\n\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"container messages-window\">\r\n\r\n                <div className=\"row\">\r\n               \r\n                    {userToggle ? (\r\n                        <div className=\"col s12 m11 l3 users hide-on-large-only\">\r\n\r\n                            <div className=\"compose-message\" onClick={() => composeToggleClicked()}>\r\n                                <i className=\"material-icons indigo-text\">message</i>\r\n                                <span className='indigo-text'> Compose Message </span>\r\n                            </div>\r\n                            <ul className='conversation-list'>\r\n                                {Conversations.map(c => <Conversation key={c.Id + \"ll\"} conversation={c} getUserNameById={getUserNameById} setUserToggle={setUserToggle} />)}\r\n\r\n                            </ul>\r\n                        </div>\r\n                    ) : <></>}\r\n\r\n\r\n                    <div className=\"col s10 m9 l4 users hide-on-med-and-down\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-content\">\r\n                                <div className=\"compose-message\" onClick={() => setComposeToggle(!composeToggle)}>\r\n                                    <i className=\"material-icons indigo-text\">message</i>\r\n                                    <span className='indigo-text'> Compose Message </span>\r\n                                </div>\r\n                                <ul className='conversation-list'>\r\n                                    {(Conversations != null && Conversations.length > 0) ?\r\n                                        Conversations.map(c => <Conversation conversation={c} key={c.Id} getUserNameById={getUserNameById} setUserToggle={null} />)\r\n                                        :\r\n                                        <></>\r\n                                    }\r\n\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {composeToggle ? (\r\n                        <div className=\"col s12 m9 l8  \">\r\n                            <ComposeMessage setComposeToggle={setComposeToggle} newConversationAdded={newConversationAdded} />\r\n                        </div>\r\n                    )\r\n                        :\r\n                        (\r\n                            !userToggle ? (\r\n                                <div className=\"col s12 m9 l8 \">\r\n                                    <div className=\"card\">\r\n                                        <div className=\"card-content\">\r\n                                        <div className=\"user-toogle hide-on-large-only\" onClick={() => setUserToggle(!userToggle)}>\r\n                                            {/* <span>Users</span>\r\n                                            <br></br> */}\r\n                                            <i className=\"material-icons center\">arrow_back</i>\r\n                                            <span>Back to conversations</span>\r\n                                        </div>\r\n                                            <div className=\"converation-title\">\r\n                                                <h5 className=\"left indigo-text darken-4\"> {conversationTitle}\r\n                                                </h5>\r\n                                                <i title=\"Delete Conversation\" onClick={() => delConversation()} className=\"material-icons red-text lighten-4\">delete</i>\r\n                                            </div>\r\n                                            <div className=\"messages\" ref={messagesRef}>\r\n                                                <ul className=''>\r\n                                                    {\r\n                                                        UserMessages.map((m, index, allM) => (\r\n                                                            <Message key={m.Id} isLast={index + 1 === allM.length ? true : false} message={m} userId={userId} isScrollDone={isScrollDone} />\r\n                                                        ))\r\n                                                    }\r\n                                                </ul>\r\n                                            </div>\r\n                                            <Reply />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            ) : <></>\r\n                        )}\r\n\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        userId: state.userLogin.userId,\r\n        allUsers: state.users.users,\r\n        UserMessages: state.messages.Messages,\r\n        Conversations: state.messages.Conversations,\r\n        SelectedConversation: state.messages.SelectedConversation,\r\n        UserMessagesChanged: state.messages.MessagesChanged,\r\n        ConversationsChanged: state.messages.ConversationsChanged,\r\n        SelectedConversationChanged: state.messages.SelectedConversationChanged\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getMessagesByUser: (userId) => dispatch(messagesByUser(userId)),\r\n        conversationsByUser: (userId) => dispatch(conversationsByUser(userId)),\r\n        messagesByConversations: (conversationId) => dispatch(messagesByConversations(conversationId)),\r\n        selectConversation: (conversation) => dispatch(selectConversation(conversation)),\r\n        deleteConversation: (conversationId) => dispatch(deleteConversation(conversationId)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\reducers\\notificationsReducer.js",[],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\reducers\\userLoginReducer.js",[],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\reducers\\incidentsReducer.js",[],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\reducers\\dashboardReducer.js",[],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\reducers\\messagesReducer.js",["261","262","263","264"],"\r\nconst initState = {\r\n    Messages : [],\r\n    MessagesChanged:false,\r\n    Conversations : [],  \r\n    ConversationsChanged:false,\r\n    UnreadConversations: 0,\r\n    SelectedConversation: {},\r\n    SelectedConversationChanged:false,\r\n   }\r\n \r\n   let changedMessages;\r\n   let changedConversations;\r\n\r\n   const messagesReducer = (state = initState, action) => {\r\n\r\n     switch (action.type) {\r\n       case \"MESSAGES_BY_USER\":\r\n         //  console.log(action.data);\r\n         return {\r\n           ...state,\r\n           Messages: action.data\r\n         };\r\n         \r\n        case \"CONVERSATION_SELECTED\":\r\n         //  console.log(\"CONVERSATION_SELECTED\", action.data);\r\n         return {\r\n           ...state,\r\n           SelectedConversation: action.data,\r\n           SelectedConversationChanged : !state.SelectedConversationChanged,\r\n         };\r\n        case \"UNREAD_CONVERSATION\":\r\n        //  console.log(action.data);\r\n        return {\r\n          ...state,\r\n          UnreadConversations: action.data\r\n        };\r\n\r\n       case \"CONVERSATIONS_BY_USER\":\r\n         //  console.log(action.data);\r\n         return {\r\n           ...state,\r\n           Conversations: action.data,\r\n           ConversationsChanged: !state.ConversationsChanged,\r\n         };\r\n\r\n       case \"MESSAGES_BY_CONVERSATIONS\":\r\n         //  console.log(action.data);\r\n         return {\r\n           ...state,\r\n           Messages: action.data,\r\n           MessagesChanged: !state.MessagesChanged,\r\n         };\r\n        \r\n       case \"NEW_MESSAGE\":\r\n\r\n         changedMessages = [...state.Messages];\r\n         changedMessages.push(action.data);\r\n         return {\r\n           ...state,\r\n           Messages: changedMessages,\r\n           MessagesChanged: !state.MessagesChanged,\r\n         };\r\n\r\n       case \"NEW_CONVERSATION\":\r\n\r\n         return {\r\n           ...state,\r\n           Conversations: [action.data, ...state.Conversations]\r\n         };\r\n       case \"DELETE_MESSAGE\":\r\n         changedMessages = [...state.Messages];\r\n         let mId = action.data;\r\n         changedMessages = changedMessages.filter(m => m.Id != mId);\r\n\r\n         return {\r\n           ...state,\r\n           Messages: changedMessages\r\n         };\r\n\r\n       case \"CHANGE_MESSAGE_STATUS\":\r\n        \r\n         changedMessages = [...state.Messages];\r\n         changedMessages = changedMessages.map(m => {\r\n           if (m.Id == action.data.messageId){            \r\n             m.Status = action.data.status;\r\n           }   \r\n             return m;\r\n         }\r\n         );\r\n\r\n         changedConversations = [...state.Conversations];\r\n         changedConversations = changedConversations.map(c => {\r\n           if (c.Id == state.SelectedConversation.Id){\r\n            c.UnReadCount = c.UnReadCount - 1;\r\n           }          \r\n           return c;\r\n         });\r\n        \r\n         return {\r\n           ...state,\r\n           Messages: changedMessages,\r\n           Conversations: changedConversations\r\n         };\r\n\r\n       case \"DELETE_CONVERSATION\":\r\n         console.log(\"deleteConversation reducer 1\", action.data);\r\n         changedConversations = [...state.Conversations];\r\n         let cId = action.data;\r\n         changedConversations = changedConversations.filter(c => c.Id != cId);\r\n\r\n         return {\r\n           ...state,\r\n           Conversations: changedConversations,\r\n           SelectedConversation: changedConversations[0],\r\n           SelectedConversationChanged : !state.SelectedConversationChanged,\r\n         };\r\n  \r\n       default:\r\n         return state;\r\n     }\r\n   };\r\n   \r\n   export default messagesReducer;","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\reducers\\usersReducer.js",[],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Pages.js",["265","266","267","268","269","270","271"],"import {React, useState, useEffect, useRef} from 'react';\r\nimport M from 'materialize-css';\r\n\r\nexport default function Pages({TotalRecords, PostsPerPage, setPageNumber, setPageSize , search }) {\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentSize, setCurrentSize] = useState(5);\r\n    const [information, setInformation] = useState('');\r\n\r\n    let hidePreviousPages = false;\r\n    let hideNextPages = false;\r\n\r\n    const ddlRef = useRef();\r\n\r\n    let pageIndexes = [];\r\n    for(let i = 1; i <= Math.ceil(TotalRecords / PostsPerPage) ; i++ )\r\n    {\r\n        if(i > currentPage - 2 &&  i < currentPage + 2)\r\n        pageIndexes.push(i);        \r\n    }\r\n\r\n    if(pageIndexes[0] != 1){\r\n        hidePreviousPages = true;      \r\n    }\r\n\r\n    if(pageIndexes[pageIndexes.length -1] != Math.ceil(TotalRecords / PostsPerPage)){\r\n        hideNextPages = true;      \r\n    }\r\n\r\n    const pageNumberClick = (event, p) =>{\r\n        event.preventDefault();\r\n        if(p <1 || p > Math.ceil(TotalRecords / PostsPerPage))\r\n            return;\r\n            console.log(p);\r\n        setPageNumber(p);\r\n        setCurrentPage(p);       \r\n    }\r\n\r\n    const pageSizeChanged = (pSize) => {\r\n        setPageSize(pSize);\r\n        setCurrentSize(pSize);\r\n        setCurrentPage(1);\r\n        setPageNumber(1);\r\n       \r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setPageNumber(1);        \r\n        M.FormSelect.init(ddlRef.current); \r\n        pageInformation();\r\n    }, [search])\r\n\r\n    useEffect(() => {    \r\n        pageInformation();\r\n    }, [currentPage, currentSize, TotalRecords])\r\n        \r\n\r\n    const pageInformation = () => {\r\n        let end = currentPage * currentSize;\r\n        let start = end - currentSize + 1;\r\n        if(end > TotalRecords)\r\n            end = TotalRecords;\r\n        if(start > TotalRecords)\r\n            start = 0;\r\n        setInformation(\"Showing from \" + start + \" to \" + end + \" of \" + TotalRecords);\r\n    }\r\n\r\n    let pages = pageIndexes.map((p,index)=>{\r\n        let pclass = currentPage === p ? \"active\" : \"\";        \r\n        return (             \r\n            <li className={pclass} key={p}  onClick={(e) => pageNumberClick(e, p)}>              \r\n              <a > {p} </a>\r\n            </li>        \r\n        );\r\n    });\r\n\r\n    return (\r\n        \r\n      <div className=\"row pagesRow\">\r\n        <div className=\"col s12 m8 l6\">\r\n            <p className='left green-text darken-2'>{information}</p>\r\n        </div>\r\n        <div className=\"col s12 m4 l2 pageSize\">              \r\n                    <span>Page Size</span>\r\n                    <select value={currentSize} onChange={(e) => pageSizeChanged(e.target.value)}\r\n                        ref={ddlRef}  >\r\n                        <option value=\"5\">5</option>\r\n                        <option value=\"10\">10</option>\r\n                        <option value=\"15\">15</option>\r\n                        <option value=\"20\">20</option>\r\n                        <option value=\"25\">25</option>\r\n                        <option value=\"30\">30</option>\r\n                        <option value=\"35\">35</option>\r\n                        <option value=\"40\">40</option>\r\n                        <option value=\"45\">45</option>\r\n                        <option value=\"50\">50</option>\r\n                    </select>               \t\t\t\t\t\r\n        </div>\r\n      \r\n        <div className=\"input-field col s12 m12 l4\">\r\n            <ul className=\"pagination right\">\r\n            <li\r\n                className={  currentPage === 1 ? \" disabled\" : \"\" } >\r\n                <a href=\"#!\" onClick={(e) => pageNumberClick(e ,currentPage - 1)}>\r\n                <i className=\"material-icons\">chevron_left</i>               \r\n                </a>\r\n            </li>\r\n            {hidePreviousPages? <li><a>...</a></li> : null} \r\n            {pages}\r\n            {hideNextPages? <li><a>...</a></li> : null} \r\n            <li\r\n                className={ currentPage === Math.ceil(TotalRecords / PostsPerPage) ? \" disabled\" : \"\" } >\r\n                <a href=\"#!\" onClick={(e) => pageNumberClick(e, currentPage + 1)}>\r\n                <i className=\"material-icons\">chevron_right</i>\r\n                </a>\r\n            </li>\r\n            </ul>\r\n        </div>\r\n\r\n\r\n      </div>\r\n    );\r\n}\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\PageActions.js",["272","273","274"],"import React from 'react'\r\n//import '../styles/tooltip.css';\r\n\r\nexport default function PageActions(props) {\r\n    return (\r\n      <section className=\"container\">\r\n        <div className=\"row \">\r\n          <div className=\"col s12 l5\">\r\n            <div className=\"left\">\r\n              <h4 className=\"page-title\" data-tip={props.Title}>{props.Title}</h4>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"col s7 l9 hide\">\r\n            <div className=\"right\">\r\n              <ul className=\"actionsBtns\">\r\n                <li>\r\n                  <a className=\"btn-floating green\">\r\n                    <i className=\"material-icons\">refresh</i>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"btn-floating red\">\r\n                    <i className=\"material-icons\">print</i>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"btn-floating blue\">\r\n                    <i className=\"material-icons\">file_download</i>\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n}\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Notifications.js",["275"],"import {React, useRef, useEffect, useState} from 'react'\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport M from 'materialize-css';\r\nimport  '../styles/notifications.css'\r\nimport {getAllNotifications, setNotificationStatus} from '../store/actions/notificationsActions';\r\nimport { removeIncidentData, getIncidentById } from \"../store/actions/incidentsActions\";\r\nimport moment from \"moment\";\r\n\r\n function Notifications({\r\n   getNotifications,\r\n   userId,\r\n   notifications,\r\n   setNotificationStatus,\r\n   removeIncidentData,\r\n   getIncidentById\r\n }) {\r\n   const ddlNotiRef = useRef();\r\n   const history = useHistory();\r\n\r\n   const [unReadCount, setUnReadCount] = useState(    \r\n      notifications!=null && notifications.length >0 ? notifications.filter((notification) => !notification.IsRead).length : 0     \r\n   );\r\n\r\n   useEffect(() => {\r\n     var options = {\r\n       closeOnClick: false,\r\n     };\r\n     M.Dropdown.init(ddlNotiRef.current, options);\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n     getNotifications(userId);\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n     setUnReadCount(\r\n      notifications!=null && notifications.length >0 ? notifications.filter((notification) => !notification.IsRead).length : 0     \r\n     );\r\n   }, [notifications]);\r\n\r\n   const setStatus = (id, status) => {\r\n     setNotificationStatus(id, status);\r\n   };\r\n\r\n   const openIncident = (notification) => {\r\n     setStatus(notification.Id, true);\r\n\r\n     let path = \"/Incident/\" + notification.IncidentId;\r\n     if (history.location.pathname !== path) {\r\n       // only change path if it is different      \r\n       removeIncidentData(); // So that user does not see old data that is stored in redux (and local storage)\r\n     }\r\n     else{\r\n      M.Dropdown.getInstance(ddlNotiRef.current).close();\r\n      getIncidentById(notification.IncidentId); //if already on the same incident, just get new data and update page\r\n     }\r\n     history.push(path);\r\n   };\r\n\r\n   console.log(\"in Notifications\");\r\n\r\n   return (\r\n     <>\r\n       <li>\r\n         <a\r\n           ref={ddlNotiRef}\r\n           href=\"#dropdown1\"\r\n           className=\"btn-floating z-depth-0  dropdown-trigger badge-a\"\r\n           data-target=\"dropdownNotifications\"\r\n         >\r\n           <i className=\"material-icons\">notifications</i>\r\n         </a>\r\n         <ul\r\n           id=\"dropdownNotifications\"\r\n           className=\"notifications dropdown-content\"\r\n         >\r\n           {notifications == null || notifications.length < 1 ? (\r\n             <li>\r\n               <div className=\"notification-box\">\r\n                 <p className=\"\">No new notificaitons.</p>\r\n               </div>\r\n             </li>\r\n           ) : (\r\n             notifications.map((notification) => {\r\n               let classes = notification.IsRead\r\n                 ? \"notification-box read\"\r\n                 : \"notification-box unread\";\r\n               return (\r\n                 <li key={notification.Id}>\r\n                   <div className={classes}>\r\n                     <span className='icon'>\r\n                       {notification.IsRead ? (\r\n                         <i\r\n                           className=\"material-icons readIcon\"\r\n                           title=\"Mark Unread\"\r\n                           onClick={() => setStatus(notification.Id, false)}\r\n                         >\r\n                           drafts\r\n                         </i>\r\n                       ) : (\r\n                         <i\r\n                           className=\"material-icons readIcon\"\r\n                           title=\"Mark Read\"\r\n                           onClick={() => setStatus(notification.Id, true)}\r\n                         >\r\n                           email\r\n                         </i>\r\n                       )}\r\n                     </span>\r\n\r\n                     <p className='text indigo-text darken-4' onClick={() => openIncident(notification)}>\r\n                       {\" \"}\r\n                       {notification.NotifyAbout}\r\n                     </p>\r\n\r\n                     <p className='time'>\r\n                      <span title= {moment(notification.CreateDate).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(notification.CreateDate).fromNow() } </span>                      \r\n                     </p>\r\n                         \r\n                       \r\n                   </div>\r\n                 </li>\r\n               );\r\n             })\r\n           )}\r\n         </ul>\r\n       </li>\r\n       <li>\r\n         {unReadCount > 0 ? (\r\n           <span className=\"badge notification-badge white-text new pink\">{unReadCount}</span>\r\n         ) : null}\r\n       </li>\r\n     </>\r\n   );\r\n }\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{      \r\n        notifications :state.notifications.notifications,\r\n        userId :state.userLogin.userId  // logged in User Id   \r\n    }\r\n  }  \r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      getNotifications: (userid) => dispatch(getAllNotifications(userid)),\r\n      setNotificationStatus : (id, isRead) => dispatch(setNotificationStatus(id, isRead)),\r\n      removeIncidentData : () => dispatch(removeIncidentData()),\r\n      getIncidentById: (incidentId) => dispatch(getIncidentById(incidentId)), \r\n    };\r\n};\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Notifications);\r\n  ","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Users\\User.js",[],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\Incident.js",["276","277","278"],"import React from 'react';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { removeIncidentData } from \"../../../store/actions/incidentsActions\";\r\nimport { connect  } from 'react-redux';\r\nimport '../../../styles/IncidentListing.css';\r\nimport moment from \"moment\";;\r\n\r\nfunction Incident({incident, dispatch, getUserNameById}) {\r\n\r\n  const history = useHistory();\r\n\r\n  const openIncident = (id) => {  \r\n    dispatch(removeIncidentData()); // So that user does not see old data that is stored in redux (and local storage)\r\n    let path = '/Incident/' + id;      \r\n      history.push(path);\r\n  }\r\n\r\n  const statusName = (status) => {\r\n    switch(status){\r\n      case \"N\":\r\n        return \"New\";\r\n      case \"C\":\r\n        return \"Closed\";\r\n      case \"A\":\r\n        return \"Approved\";\r\n      case \"I\":\r\n        return \"In Progress\";\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  const dateDifference = (date1 , date2) =>{\r\n   \r\n      const diffTime = Math.abs(date2 - date1);\r\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \r\n     // console.log(diffTime + \" milliseconds\");\r\n     // console.log(diffDays + \" days\");\r\n     return diffDays;\r\n  }\r\n\r\n  let currentDate = new Date();\r\n  const dueDateClass = (new Date(incident.DueDate)) > currentDate || incident.Status == 'C' || incident.Status == 'A' ?  \"green-text text-darken-2\" : \"red-text text-darken-2\" ;\r\n  \r\n    return (\r\n      <tr >      \r\n        \r\n        <td\r\n          className=\"tbl-title\"        \r\n        >\r\n          <div className=\"custom-dropdown\">\r\n            <span className=\"indigo-text darken-4\" onClick={() => openIncident(incident.Id)} >\r\n              {incident.Title.length > 20 ? incident.Title.slice(0, 20) + \" ...\" : incident.Title}\r\n            </span>\r\n            <div className=\"custom-dropdown-content\">\r\n              <p> {incident.Title}</p>\r\n            </div>\r\n          </div>\r\n\r\n        </td>\r\n        \r\n        <td\r\n          className=\"tbl-description\"\r\n        >\r\n          <div className=\"custom-dropdown\">\r\n            <span >\r\n               {incident.Description.length > 20 ? incident.Description.slice(0,20) + \" ...\" : incident.Description }\r\n            </span>\r\n            <div className=\"custom-dropdown-content\">\r\n              <p> {incident.Description}</p>\r\n            </div>\r\n          </div>\r\n    \r\n        </td>\r\n        <td>{getUserNameById(incident.AssignedTo)}</td>\r\n        <td>{getUserNameById(incident.CreatedBy)}</td>\r\n        <td><span title= {moment(incident.CreatedAT).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(incident.CreatedAT).fromNow() } </span></td>\r\n        <td><span className={dueDateClass} title= {moment(incident.DueDate).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(incident.DueDate).fromNow() } </span></td>\r\n        <td >\r\n            <div className={\"status \" + statusName(incident.Status).replace(' ', '').toLowerCase() } >\r\n               {statusName(incident.Status)}\r\n            </div>\r\n        </td>\r\n      </tr>\r\n    );\r\n}\r\n\r\nexport default connect()(Incident);","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Messages\\Conversation.js",["279","280","281","282","283"],"import { React, useState, useEffect, useRef} from 'react'\r\nimport moment from \"moment\";\r\nimport { connect } from 'react-redux'\r\nimport {selectConversation } from \"../../store/actions/messagesActions\";\r\n\r\nconst Conversation = ({ conversation, userId, getUserNameById,  SelectedConversation, selectConversation, setUserToggle})=> {\r\n    \r\n    const user = conversation.User1 == userId? conversation.User2 : conversation.User1;\r\n\r\n     console.log(\"conversation.UnReadCount\", conversation.UnReadCount);\r\n    // if( getUserNameById(user) == undefined)\r\n    //     console.log(user);\r\n   \r\n    const conversationSelected = () => {\r\n        console.log(\"User toogle value:\", setUserToggle)\r\n        if(setUserToggle!= null) // for small devices only for large device userToggle will always be null\r\n             setUserToggle(false);\r\n        selectConversation(conversation);\r\n    }\r\n    \r\n    const cssClass = SelectedConversation.Id == conversation.Id ? \"user-info selected\" : \"user-info\";\r\n\r\n    return (\r\n        <li >\r\n            <div className={cssClass} onClick={() => conversationSelected() }>\r\n                <div className='photo'>\r\n                    <button type=\"button\" title={\"Umar Shareef\"} className=\"btn-floating  pink darken-2 userWelcome\" >\r\n                         {/* {user ? getUserNameById(user).toUpperCase().split(/\\s/).reduce((response, word) => response += word.slice(0, 1), '') : \"Null\"}  */}\r\n                         <i className='material-icons circle blue darken-3'>person</i>\r\n                    </button>\r\n                </div>\r\n                <div className='name-message'>\r\n                    <div className='name-unread' >\r\n                        <span className='name indigo-text darken-4'>{getUserNameById(user)} </span>\r\n                        {conversation.UnReadCount < 1 ?\r\n                            null :\r\n                            (<span className='unread-count'> new</span>)\r\n                        }\r\n                    </div>\r\n                    <div className='last-message'>\r\n                        <span className='last-message-text'>{conversation.LastMessage.slice(0,20)}</span>\r\n                        <span className='date-time'><span title= {moment(conversation.LastMessageTime).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(conversation.LastMessageTime).fromNow() } </span></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <hr></hr>\r\n\r\n        </li>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n        SelectedConversation : state.messages.SelectedConversation,\r\n        allUsers: state.users.users,\r\n    }\r\n  }\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {      \r\n        selectConversation: (conversation) => dispatch(selectConversation(conversation)), \r\n    }\r\n  }\r\n \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Conversation);\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Messages\\Message.js",["284","285","286","287","288"],"import { React, useState, useEffect, useRef} from 'react';\r\nimport moment from \"moment\";\r\nimport { connect } from 'react-redux'\r\nimport {deleteMessage,changeMessageStatus } from \"../../store/actions/messagesActions\";\r\n\r\nconst Message = ({ message, userId, deleteMessage, changeMessageStatus, isLast, isScrollDone }) => {\r\n\r\n    const isSender = message.From == userId ? true: false;\r\n    const ref = useRef();    \r\n    const isVisible = useOnScreen(ref);    \r\n  \r\n\r\n    useEffect(() => {\r\n        if(!isSender && isScrollDone){\r\n            if(message.Status.toLowerCase().trim() == \"unread\" ){\r\n              //  console.log( message.MessageText);\r\n                changeMessageStatus(message.Id, \"read\");\r\n            }\r\n        }      \r\n    }, [isVisible])\r\n    \r\n   \r\n\r\n    const delMessage = (messageId) => {\r\n        if(window.confirm(\"Delete message forever?\")){\r\n            deleteMessage(messageId);\r\n        }\r\n    }\r\n\r\n    return (       \r\n           \r\n        <li className='message-li' ref={ref}>\r\n            {/* {isLast? <span ref={lastRef}> </span> : null} */}\r\n            <div className='message-time'><span title= {moment(message.Date).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(message.Date).fromNow() } </span></div>\r\n            <div className={ (message.Status ==\"Unread\" && !isSender? \"unread\" : \"\") + \" \" +(isSender ? \"message left\" : \"message right\")}>\r\n                <div className='message-text'>\r\n                {message.MessageText}\r\n                </div>\r\n                <i title=\"Delete Message\" onClick={()=> delMessage(message.Id)} className=\"delete-message-icon material-icons lighten-4\">highlight_off</i>\r\n            </div>\r\n        </li>       \r\n    )\r\n}\r\n\r\nfunction useOnScreen(refx) {\r\n\r\n    const [isIntersecting, setIntersecting] = useState(false);  \r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => setIntersecting(entry.isIntersecting)\r\n    )  \r\n    useEffect(() => {\r\n      observer.observe(refx.current);\r\n      // Remove the observer as soon as the component is unmounted\r\n      return () => { observer.disconnect() }\r\n    }, [])  \r\n    return isIntersecting\r\n  }\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n    }\r\n  }\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {      \r\n        deleteMessage: (MessageId) => dispatch(deleteMessage(MessageId)),\r\n        changeMessageStatus: (messageId, status) => dispatch(changeMessageStatus(messageId, status))        \r\n    }\r\n  }\r\n \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Message);","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Messages\\ComposeMessage.js",["289","290"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { sendNewMessage, conversationsByUser } from \"../../store/actions/messagesActions\";\r\nimport  AssigneeDropdown  from \"../../components/Incidents/AssigneeDropdown\";\r\nimport '../../styles/composemessage.css'\r\n\r\nfunction ComposeMessage({\r\n    userId,\r\n    allUsers,\r\n    UserMessages,\r\n    sendNewMessage,\r\n    conversationsByUser,\r\n    setComposeToggle,\r\n    newConversationAdded\r\n}) {\r\n\r\n\r\n    const [receiver, setReceiver] = useState(null);\r\n    const [receivereName, setReceiverName] = useState(\"\");  \r\n    const [messageText, setMessageText] = useState(\"\");\r\n  \r\n    const sendMessage = (event) => {\r\n        \r\n        event.preventDefault();\r\n\r\n        if(messageText.trim() == \"\" || receiver == null){\r\n            alert(\"Please select a user and type message.\");\r\n            return;\r\n        }\r\n       \r\n        const formData = new FormData(); \r\n\r\n         formData.append(\"From\", userId); \r\n         formData.append(\"To\", receiver);\r\n         formData.append(\"MessageText\", messageText);     \r\n      \r\n        sendNewMessage(formData);\r\n\r\n        setMessageText(\"\");\r\n        setReceiverName(\"\");\r\n        setReceiver(null);\r\n        //conversationsByUser(userId);\r\n        setComposeToggle(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n        <div className=\"card-content\">\r\n        <div className=\"compose-message-container\">    \r\n            <h5>Compose New Message</h5>\r\n                    <form action=\"#\">\r\n                        <div className=\"field\">\r\n                            <AssigneeDropdown\r\n                                updateIncidentByField={null}\r\n                                setAssignee={setReceiver}\r\n                                assigneeName={receivereName}\r\n                                setAssigneeName={setReceiverName}\r\n                            />\r\n                        </div>\r\n                <div className=\"input-field\">\r\n                    <textarea className=\"materialize-textarea\" cols=\"30\" value={messageText} rows=\"10\" onChange={(e) => setMessageText(e.target.value)} placeholder=\"Write message here\" required></textarea>\r\n                </div>\r\n\r\n                <div>\r\n                    <button\r\n                        className=\" btn green darken-2 updateBtn\"\r\n                        onClick={(event) => sendMessage(event)}\r\n                    >\r\n                        <span>Send</span>\r\n                        <i className=\"material-icons right\">send</i>\r\n                    </button>\r\n\r\n                    <button\r\n                        className=\" btn yellow darken-2 updateBtn\"\r\n                        onClick={() => setComposeToggle(false)}\r\n                    >\r\n                        <span>Cancel</span>\r\n                        <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                </div>\r\n                    </form>\r\n        </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n        allUsers: state.users.users,\r\n        UserMessages : state.messages.Messages,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendNewMessage: (formData) => dispatch(sendNewMessage(formData)),   \r\n        conversationsByUser: (userId) => dispatch(conversationsByUser(userId)),  \r\n    }\r\n  }\r\n\r\n  export default connect(mapStateToProps, mapDispatchToProps)(ComposeMessage); \r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Messages\\Reply.js",["291","292","293"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { replyMessage } from \"../../store/actions/messagesActions\";\r\n\r\nconst Reply = ({\r\n    userId,      \r\n    replyMessage,\r\n    UserMessages,\r\n    SelectedConversation\r\n}) => {\r\n\r\n    const [messageText, setMessageText] = useState(\"\");\r\n  \r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n       \r\n        let To =  SelectedConversation.User1 == userId? SelectedConversation.User2 : SelectedConversation.User1;\r\n        let conversationId = SelectedConversation.Id;\r\n        const formData = new FormData(); \r\n\r\n         formData.append(\"From\", userId); \r\n         formData.append(\"To\", To);\r\n         formData.append(\"MessageText\", messageText);     \r\n        \r\n         replyMessage(formData, conversationId);\r\n        setMessageText(\"\");     \r\n    }\r\n    \r\n    const keyPressedOnMessageText = (e) =>{\r\n        console.log(e.keyCode);\r\n    }\r\n\r\n    return (\r\n        <div className=\"new-message-window\">\r\n            <div className=\"input-field\">\r\n                <textarea\r\n                    id=\"comment\"\r\n                    className=\"materialize-textarea\"\r\n                    placeholder='Write new message'\r\n                     value={messageText}\r\n                     onChange={(e) => setMessageText(e.target.value)}\r\n                    // onKeyDown={(e) => keyPressedOnMessageText(e)}\r\n                ></textarea>\r\n            </div>\r\n            <div>\r\n                <button\r\n                    className=\"left btn green darken-2 updateBtn\"\r\n                    onClick={(event) => sendMessage(event)}\r\n                >\r\n                    <span>Send</span>\r\n                    <i className=\"material-icons right\">send</i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n        allUsers: state.users.users,\r\n        UserMessages : state.messages.Messages,\r\n        SelectedConversation : state.messages.SelectedConversation,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        replyMessage: (formData, conversationId) => dispatch(replyMessage(formData, conversationId)),    \r\n    }\r\n  }\r\n\r\n  export default connect(mapStateToProps, mapDispatchToProps)(Reply); \r\n\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OldestOpen.js",["294","295","296"],"import React ,{useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { GetOldest5UnresolvedIncidents } from '../../../store/actions/dashboardActions';\r\nimport moment from \"moment\";\r\nimport {  useHistory  } from 'react-router-dom';\r\n\r\nfunction FiveOldestOpenIncidents({Oldest5UnresolvedIncidents, getOldest5UnresolvedIncidents}) {\r\n\r\n  useEffect(() => {\r\n    getOldest5UnresolvedIncidents();\r\n}, [])\r\n\r\nif(Oldest5UnresolvedIncidents == null || Oldest5UnresolvedIncidents.length===0 )\r\n return <h3>Loading...</h3>\r\n\r\n    return (\r\n      <div className=\"col s12 m12 l6\">\r\n        <div className=\"card\">\r\n          <div className=\"card-content\">\r\n            <h5> 5 Oldest Unresolved Incidents</h5>\r\n\r\n            {\r\n              Oldest5UnresolvedIncidents.map(incident => {\r\n                return (\r\n                  <Incident key={incident.Id} incident={incident} />\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst Incident = ({incident, dispatch}) => {\r\n\r\n  const statusName = (status) => {\r\n    switch(status){\r\n      case \"N\":\r\n        return \"New\";\r\n      case \"C\":\r\n        return \"Closed\";\r\n      case \"A\":\r\n        return \"Approved\";\r\n      case \"I\":\r\n        return \"In Progress\";\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  const history = useHistory();\r\n  const openIncident = (id) => {  \r\n  //  dispatch(removeIncidentData()); // So that user does not see old data that is stored in redux (and local storage)\r\n    let path = '/Incident/' + id;      \r\n      history.push(path);\r\n  }\r\n\r\n    return (\r\n      <div className=\"incident\">\r\n        <div className=\"time-status\">\r\n        <span className=\"timestamp\"\r\n          title={moment(incident.CreatedAT).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n        >\r\n          {moment(incident.CreatedAT).fromNow()}{\" \"}\r\n        </span>\r\n         \r\n          <span className={\"status \" + statusName(incident.Status).replaceAll(\" \", \"\").toLowerCase() }>\r\n            {statusName(incident.Status)}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"title\">\r\n          <a onClick={()=> openIncident(incident.Id)} >\r\n            {incident.Title}\r\n          </a>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      Oldest5UnresolvedIncidents: state.dashboard.Oldest5UnresolvedIncidentsData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getOldest5UnresolvedIncidents: () => dispatch(GetOldest5UnresolvedIncidents()),     \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FiveOldestOpenIncidents);\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\MostAssignedByUser.js",["297","298","299"],"import React, {useEffect, useState, useRef} from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport {GetMostAssignedToUsers} from '../../../store/actions/dashboardActions';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction MostAssignedByUser({MostAssignedIncidentsData, getMostAssignedToUsers}) {\r\n  const [chartOptions, setChartOptions] = useState({});\r\n  const isMounted = useRef(false);\r\n\r\n  useEffect(() => {\r\n    getMostAssignedToUsers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isMounted.current) {\r\n         drawChart();\r\n      } else {\r\n        isMounted.current = true;\r\n      }\r\n}, [MostAssignedIncidentsData])\r\n\r\n\r\n   if(MostAssignedIncidentsData.length ===0 || MostAssignedIncidentsData == null )\r\n   return (<h3>loading..</h3>);\r\n\r\n  let data = [];\r\n  let _color = {\r\n    linearGradient: [0, 0, 0, 300],\r\n    stops: [\r\n      [0, 'rgba(6,131,181,1)'],\r\n      [1, 'rgba(7,65,105,1)']\r\n    ]\r\n  }\r\n\r\n  try{\r\n    data =  [\r\n      { name: MostAssignedIncidentsData[0].Name, y: parseInt(MostAssignedIncidentsData[0].Count),  color: _color },\r\n      { name: MostAssignedIncidentsData[1].Name, y: parseInt(MostAssignedIncidentsData[1].Count),color: _color },\r\n      { name: MostAssignedIncidentsData[2].Name, y: parseInt(MostAssignedIncidentsData[2].Count), color: _color  },\r\n      { name: MostAssignedIncidentsData[3].Name, y: parseInt(MostAssignedIncidentsData[3].Count), color:_color },\r\n      { name: MostAssignedIncidentsData[4].Name, y: parseInt(MostAssignedIncidentsData[4].Count), color: _color }  \r\n  ];\r\n\r\n  }\r\n  catch(err){\r\n    console.log(\"error\", err);\r\n  }\r\n\r\n  const drawChart = () =>{\r\n    const options = {\r\n        title: {\r\n          text: 'My chart'\r\n        },\r\n        chart: {    \r\n          type: 'bar',\r\n          // height: (70) + '%',\r\n          //width: (100) + '%',\r\n         },\r\n         title:{\r\n            text:''\r\n        },\r\n        credits:\r\n        {\r\n            enabled: false\r\n        },\r\n        legend: {\r\n            enabled: false\r\n        },\r\n        yAxis: {\r\n            title: {\r\n                text: ''\r\n            }\r\n        },\r\n    \r\n        xAxis: {\r\n            type: 'category',\r\n            min: 0,\r\n            labels: {\r\n                animate: true\r\n            }\r\n        },\r\n      \r\n         series: [{\r\n          name: '',\r\n          dataSorting: {\r\n            enabled: true,\r\n            sortKey: 'y'\r\n        },\r\n          data: data\r\n      }]\r\n      }\r\n      setChartOptions(options);\r\n    }\r\n\r\n    return (\r\n      <div className=\"col s12 m12 l6\">\r\n        <div className=\"card\">\r\n          <div className=\"card-content\">\r\n            <h5> Most Assigned To Users</h5>\r\n            {isMounted.current ?\r\n\r\n              <HighchartsReact highcharts={Highcharts} options={chartOptions} />\r\n              : <></>\r\n            }\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      MostAssignedIncidentsData: state.dashboard.MostAssignedIncidentsData,\r\n      \r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getMostAssignedToUsers: () => dispatch(GetMostAssignedToUsers()),     \r\n  }\r\n}\r\n\r\n// create \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MostAssignedByUser);\r\n\r\n//please invert binary tree\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\LastFive.js",["300","301","302"],"import React ,{useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { GetLast5Incidents } from '../../../store/actions/dashboardActions';\r\nimport moment from \"moment\";\r\n\r\nimport {  useHistory  } from 'react-router-dom';\r\n\r\nfunction LastFive({Last5IncidentsData, getLast5IncidentsData, dispatch}) {\r\n\r\n  useEffect(() => {\r\n    getLast5IncidentsData();\r\n}, [])\r\n\r\n\r\nif(Last5IncidentsData == null || Last5IncidentsData.length===0 )\r\n return <h3>Loading...</h3>\r\n\r\n    return (\r\n      <div className=\"col s12 m12 l6\">\r\n        <div className=\"card\">\r\n          <div className=\"card-content\">\r\n            <h5> Last 5 Incidents</h5>\r\n\r\n            {\r\n              Last5IncidentsData.map(incident => {\r\n                return (\r\n                  <Incident key={incident.Id} incident={incident} />\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst Incident = ({incident, dispatch}) => {\r\n\r\n  const statusName = (status) => {\r\n    switch(status){\r\n      case \"N\":\r\n        return \"New\";\r\n      case \"C\":\r\n        return \"Closed\";\r\n      case \"A\":\r\n        return \"Approved\";\r\n      case \"I\":\r\n        return \"In Progress\";\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  const history = useHistory();\r\n  const openIncident = (id) => {  \r\n  //  dispatch(removeIncidentData()); // So that user does not see old data that is stored in redux (and local storage)\r\n    let path = '/Incident/' + id;      \r\n      history.push(path);\r\n  }\r\n\r\n    return (\r\n      <div className=\"incident\">\r\n        <div className=\"time-status\">\r\n        <span className=\"timestamp\"\r\n          title={moment(incident.CreatedAT).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n        >\r\n          {moment(incident.CreatedAT).fromNow()}{\" \"}\r\n        </span>\r\n         \r\n          <span className={\"status \" + statusName(incident.Status).replaceAll(\" \", \"\").toLowerCase() }>\r\n            {statusName(incident.Status)}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"title\">\r\n          <a onClick={()=> openIncident(incident.Id)} >\r\n            {incident.Title}\r\n          </a>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      Last5IncidentsData: state.dashboard.Last5IncidentsData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getLast5IncidentsData: () => dispatch(GetLast5Incidents()),     \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LastFive);\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\KPIBar.js",["303","304"],"import React,{useEffect, useState} from 'react'\r\nimport '../../../styles/kpibar.css'\r\nimport { GetKPI } from '../../../store/actions/dashboardActions';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction KPIBar({getKPIData, userId, kpiData}) {\r\n \r\n  //console.log(\"kpiData\",kpiData);\r\n  \r\n  useEffect(() => {    \r\n    getKPIData(userId); \r\n  }, [])\r\n\r\n \r\n    return (  \r\n      <div className=\"card\">\r\n        <div className=\"card-content\">\r\n          <div className=\"kpi-bar\">\r\n            <div className=\"kpi-group\">\r\n              <KPI value={kpiData.New} text=\"NEW\" color=\"new-color\" />\r\n              <KPI value={kpiData.InProgress} text=\"IN PROGRESS\" color=\"inprogress-color\" />\r\n            </div>\r\n            <div className=\"kpi-group\">\r\n              <KPI value={kpiData.Closed} text=\"CLOSED\" color=\"closed-color\" />\r\n              <KPI value={kpiData.Approved} text=\"APPROVED\" color=\"approved-color\" />\r\n            </div><div className=\"kpi-group\">\r\n              <KPI value={kpiData.Late} text=\"LATE\" color=\"late-color\" />\r\n              <KPI value={kpiData.AssignedToMe} text=\"ASSINGED TO YOU\" color=\"assignedToMe-color\" />\r\n            </div></div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction KPI({value, text, color}) {\r\n  return (   \r\n      <div className={\"kpi \" + color}  >\r\n        <div className=\"kpi-value\">{value}</div>\r\n        <div className=\"kpi-text\">{text}</div>\r\n      </div>   \r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      kpiData: state.dashboard.KPIData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      getKPIData : (userId) => dispatch(GetKPI(userId)),     \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(KPIBar);\r\n\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OverallWidget.js",["305","306"],"import React ,{useEffect, useState, useRef} from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport {GetOverallWidget} from '../../../store/actions/dashboardActions';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction OverallWidget({overallWidgetData, getOverallWidgetData}) {\r\n    const [chartOptions, setChartOptions] = useState({});\r\n    const isMounted = useRef(false);\r\n\r\n    useEffect(() => {\r\n        getOverallWidgetData();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n             drawChart();\r\n          } else {\r\n            isMounted.current = true;\r\n          }\r\n    }, [overallWidgetData])\r\n\r\n    const drawChart = () => {\r\n        const options = {\r\n            chart: {\r\n                type: 'pie',\r\n                // height: (80) + '%',\r\n            },\r\n            title: {\r\n                text: ''\r\n            },\r\n            credits:\r\n            {\r\n                enabled: false\r\n            },\r\n            tooltip: {\r\n                pointFormat: '{series.name}: <b>{point.y} ({point.percentage:.1f}%)</b>'\r\n            },\r\n            plotOptions: {\r\n                pie: {\r\n                    allowPointSelect: true,\r\n                    cursor: 'pointer',\r\n                    dataLabels: {\r\n                        enabled: false\r\n                    },\r\n                    showInLegend: true\r\n                }\r\n            },\r\n            series: [{\r\n                name: 'Share',\r\n                data: [\r\n                    //{ name: 'New', y: overallWidgetData.New, color: '#F57C00' },\r\n                    { name: 'New', y: overallWidgetData.New,   color: {\r\n                        radialGradient: [0, 0, 0, 300],\r\n                        stops: [\r\n                          [0, 'rgba(196,189,91,1)'],\r\n                          [1, 'rgba(199,190,52,1)']\r\n                        ]\r\n                    } },\r\n                    //{ name: 'In Progress', y: overallWidgetData.InProgress, color: '#1976D2' },\r\n                    { name: 'In Progress', y: overallWidgetData.InProgress, color: {\r\n                        radialGradient: [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(91,159,196,1)'],\r\n                            [1, 'rgba(52,142,199,1) 99%)']\r\n                        ]\r\n                    } },\r\n                    { name: 'Closed', y: overallWidgetData.Closed,  color: {\r\n                        radialGradient: [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(76,177,94,1)'],\r\n                            [1, 'rgba(78,200,94,1)']\r\n                        ]\r\n                    } },\r\n                   // { name: 'Closed', y: overallWidgetData.Closed, color: '#43A047' },\r\n                    { name: 'Approved', y: overallWidgetData.Approved,  color: {\r\n                        radialGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(58,131,68,1)'],\r\n                            [1, 'rgba(45,105,56,1)']\r\n                        ]\r\n                    } },\r\n                    { name: 'Late', y: overallWidgetData.Late,  color: {\r\n                        radialGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(199,69,65,1)'],\r\n                            [1, 'rgba(153,47,55,1)']\r\n                        ]\r\n                    } }\r\n\r\n                    //{ name: 'Approved', y: overallWidgetData.Approved, color: '#1B5E20' },\r\n                    //{ name: 'Late', y: overallWidgetData.Late, color: '#B71C1C' }\r\n                ]\r\n            }]\r\n        }\r\n        try{\r\n            setChartOptions(options);\r\n        }catch(e){}\r\n    \r\n    } \r\n\r\n    return (\r\n        <div className=\"col s12 m12 l6  chart-widget\">\r\n            <div className=\"card\">\r\n                <div className=\"card-content\">\r\n                    <h5> Overall</h5>\r\n                    {isMounted.current? \r\n                        <HighchartsReact  highcharts={Highcharts} options={chartOptions} />\r\n                        :\r\n                        <></>\r\n                    }\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{   \r\n        userId :state.userLogin.userId,  // logged in User Id  \r\n        overallWidgetData: state.dashboard.OverallWidgetData\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getOverallWidgetData: () => dispatch(GetOverallWidget()),     \r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(OverallWidget);\r\n\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\DayByDayCount.js",[],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\AssigneeDropdown.js",["307"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport {  updateIncident, deleteAttachment } from \"../../store/actions/incidentsActions\";\r\nimport M from \"materialize-css\";\r\nimport { connect } from \"react-redux\";\r\nimport { allUsers } from \"../../store/actions/usersActions\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction AssigneeDropdown({getAllAssignees, allAssignees, updateIncidentByField, setAssignee ,assigneeName, setAssigneeName }) {\r\n\r\n    const [assigneeList, setAssigneeList] = useState(allAssignees);\r\n    const [assgineeSearchText, setAssgineeSearchText] = useState(\"\");\r\n    const assigneeRef = useRef();\r\n\r\n    const dropDownId = \"dropdownAssginee\" + uuidv4();\r\n\r\n    useEffect(() => {       \r\n       // getAllAssignees();\r\n      }, []); // get assignee on first render only\r\n    \r\n    useEffect(() => {\r\n       console.log(\"Set hook edit\");\r\n        setAssigneeList(allAssignees);\r\n      }, [allAssignees]);\r\n\r\n      useEffect(() => {\r\n        setMaterializeCSS();\r\n      }, [allAssignees]);\r\n\r\n      \r\n  const setMaterializeCSS = () => {\r\n    var options = {\r\n      closeOnClick: false,\r\n    };\r\n    M.Dropdown.init(assigneeRef.current, options);   \r\n  }\r\n\r\n  const assigneeSelected = (event, userId) => {\r\n    event.preventDefault();\r\n    let currentAssignee = allAssignees.find((assignee) => {\r\n      return assignee.Id === userId;\r\n    });\r\n\r\n    setAssignee(userId);\r\n    setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);\r\n    if(updateIncidentByField)\r\n         updateIncidentByField(\"AssignedTo\" , userId); \r\n\r\n    var assigneeDropdown = M.Dropdown.getInstance(assigneeRef.current);\r\n    assigneeDropdown.close();\r\n  };\r\n\r\n  const searchAssignee = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"searching....\");\r\n    setAssgineeSearchText(event.target.value);\r\n    console.log(\"assgineeSearchText\", assgineeSearchText);\r\n    let newList = [];\r\n    if (event.target.value !== \"\")\r\n      newList = allAssignees.filter((assignee) => {\r\n        return (\r\n          assignee.FirstName.toUpperCase().startsWith(\r\n            event.target.value.toUpperCase()\r\n          ) ||\r\n          assignee.LastName.toUpperCase().startsWith(\r\n            event.target.value.toUpperCase()\r\n          )\r\n        );\r\n      });\r\n\r\n    if (newList !== undefined && newList.length !== 0) {\r\n      //check if there is atlease one assignee\r\n      newList = [].concat(newList);\r\n    } else {\r\n      //if search found nothing, show all assignees\r\n      newList = allAssignees.slice(0, allAssignees.length);\r\n    }\r\n    setAssigneeList(newList);\r\n  };\r\n\r\n\r\n  if (allAssignees && !assigneeList) {\r\n    setAssigneeList(allAssignees);\r\n  }\r\n\r\n\r\n    return (\r\n        <>\r\n             <input\r\n                            readOnly\r\n                            required\r\n                            type=\"text\"\r\n                            className=\"dropdown-trigger  align-right\"\r\n                            id=\"assignee\"\r\n                            data-target={dropDownId}\r\n                            placeholder=\"Select User\"\r\n                            ref={assigneeRef}\r\n                            value={assigneeName}\r\n                          \r\n                          />\r\n\r\n                          <ul id={dropDownId} className=\"dropdown-content\">\r\n                            <li className=\"search-assignee-box\">\r\n                              <input\r\n                              // onClick={()=> alert(\"clicker\")}\r\n                            //   onKeyDown={(e)=> console.log(e.target.value)}\r\n                               // value={assgineeSearchText}\r\n                                type=\"text\"\r\n                                placeholder=\"Search Assignee\"\r\n                                onChange={searchAssignee}\r\n                              />\r\n                            </li>\r\n                            {!assigneeList\r\n                              ? null\r\n                              : assigneeList.map((user) => {\r\n                                  return (\r\n                                    <li\r\n                                      key={user.Id}\r\n                                      onClick={(event) => assigneeSelected(event,user.Id)}\r\n                                    >\r\n                                      <a className=\"indigo-text\" href=\"#!\">\r\n                                        {user.FirstName + \" \" + user.LastName}\r\n                                      </a>\r\n                                    </li>\r\n                                  );\r\n                                })}\r\n                          </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      allAssignees: state.users.users,\r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      IncidentDetailError : state.incidents.IncidentDetailError     // if api ERROR\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      getAllAssignees: () => dispatch(allUsers()),    \r\n      updateIncident: (parameters) => dispatch(updateIncident(parameters)),   \r\n        \r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(AssigneeDropdown);","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDescription.js",["308"],"import { React, useEffect, useState, useRef } from \"react\";\r\n\r\nimport { updateIncident } from \"../../../store/actions/incidentsActions\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nfunction IncidentDescription({type, incidentData, updateIncident, userId}) {\r\n\r\n    const [description, setDescription] = useState(\"\");\r\n    const [editDescription, setEditDescription] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setDescription(type === \"description\"? incidentData.Description : incidentData.AdditionalData);       \r\n       }, [incidentData, type])\r\n\r\n    const updateIncidentByField = (field , value) => {    \r\n        let parameters = {\r\n          IncidentId : incidentData.Id,\r\n          Parameter : field,\r\n          Value : value,\r\n          UserId : userId\r\n        };\r\n        updateIncident(parameters); // Calling action here\r\n      }\r\n\r\n    const descriptionEditClick = () =>{\r\n        setEditDescription(!editDescription);\r\n        setDescription(type === \"description\"? incidentData.Description : incidentData.AdditionalData);\r\n       \r\n      }\r\n      const descriptionEditCancel = () =>{\r\n        setDescription(type === \"description\"? incidentData.Description : incidentData.AdditionalData);\r\n        setEditDescription(false);\r\n      }\r\n    \r\n      const descriptionEditSave = () =>{\r\n        if(description.trim() === \"\"){\r\n          alert(\"Description cannot be empty.\");\r\n          setDescription(incidentData.Description);\r\n          return;\r\n        }\r\n        type === \"description\"\r\n        ? updateIncidentByField(\"Description\", description.trim())\r\n        : updateIncidentByField(\"AdditionalData\", description.trim());\r\n       \r\n        setEditDescription(false);\r\n      }\r\n    return (\r\n        <>\r\n                 <p className=\"heading left-align indigo-text darken-4\">\r\n                    {\" \"}\r\n                    {/* Description  */}\r\n                    {type === \"description\" ? \"Description\" : \"Additional Details\"}\r\n                    <i\r\n                      className=\"inline-icon material-icons actions-icon\"\r\n                      onClick={descriptionEditClick}\r\n                    >\r\n                      edit\r\n                    </i>\r\n                  </p>\r\n                  {!editDescription ? (\r\n                    <>\r\n                      <div className=\"input-field\">\r\n                        <p className=\"darkslategrayText bigTextScroll\">\r\n                          {description}\r\n                        </p>\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <div className=\"input-field\">\r\n                        {\" \"}\r\n                        {/* Description Edit */}\r\n                        <textarea\r\n                          id=\"description\"\r\n                          className=\"materialize-textarea\"\r\n                          value={description}\r\n                          onChange={(e) => setDescription(e.target.value)}\r\n                        ></textarea>\r\n                        <button\r\n                          title=\"Save\"\r\n                          className=\"btn green darken-2 right updateBtn\"\r\n                          onClick={descriptionEditSave}\r\n                        >\r\n                          <i className=\"actions-icon material-icons\">check</i>\r\n                        </button>\r\n                        <button\r\n                          title=\"Cancel\"\r\n                          className=\"btn yellow darken-2 right updateBtn\"\r\n                          onClick={descriptionEditCancel}\r\n                        >\r\n                          <i className=\"actions-icon material-icons\">cancel</i>\r\n                        </button>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {     \r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,    \r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {     \r\n      updateIncident: (parameters) => dispatch(updateIncident(parameters)),  \r\n    };\r\n  };\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(IncidentDescription);\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentTitle.js",["309","310","311"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport { updateIncident } from \"../../../store/actions/incidentsActions\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport {setDateTime} from \"../../../helpers/common\"\r\n\r\nfunction IncidentTitle({\r\n  incidentData,\r\n  updateIncident,\r\n  userId,\r\n  getNameById,\r\n}) {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [editable, setEditable] = useState(false);\r\n\r\n  useEffect(() => {   \r\n    setTitle(incidentData.Title);  \r\n   }, [incidentData])\r\n   \r\n\r\n  const editClick = () => {\r\n    setEditable(!editable);\r\n    setTitle(incidentData.Title);\r\n  };\r\n  const editCancel = () => {\r\n    setTitle(incidentData.Title);\r\n    setEditable(false);\r\n  };\r\n\r\n  const editSave = () => {\r\n    if (title.trim() === \"\") {\r\n      alert(\"Title cannot be empty.\");\r\n      setTitle(incidentData.Title);\r\n      return;\r\n    }\r\n    updateIncidentByField(\"Title\", title.trim());\r\n    setEditable(false);\r\n  };\r\n\r\n  const updateIncidentByField = (field, value) => {\r\n    let parameters = {\r\n      IncidentId: incidentData.Id,\r\n      Parameter: field,\r\n      Value: value,\r\n      UserId: userId,\r\n    };\r\n    updateIncident(parameters); // Calling action here\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col s12\">\r\n        <div className=\"title-container\">\r\n        {!editable ? (\r\n          <span className=\"indigo-text darken-4\"> \r\n          <i className=\"material-icons actions-icon-title\" onClick={editClick}>\r\n              edit\r\n            </i>                    \r\n            {title}\r\n            \r\n          </span>\r\n        ) : (\r\n          <div className=\"input-field\">\r\n            {\" \"}\r\n            {/* Title Edit */}\r\n            <input\r\n              type=\"text\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n            />\r\n            <button\r\n              title=\"Save\"\r\n              className=\"btn green darken-2 right updateBtn\"\r\n              onClick={editSave}\r\n            >\r\n              <i className=\"actions-icon material-icons\">check</i>\r\n            </button>\r\n            <button\r\n              title=\"Cancel\"\r\n              className=\"btn yellow darken-2 right updateBtn\"\r\n              onClick={editCancel}\r\n            >\r\n              <i className=\"actions-icon material-icons\">cancel</i>\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n        <div className=\"incident-timestamp\">\r\n          \r\n            <span\r\n              className=\"im-createTime black-text \"\r\n              title={moment(incidentData.CreatedAT).format(\r\n                \"MMMM DD YYYY, h:mm:ss a\"\r\n              )}\r\n            >\r\n              Created by{\"\"}\r\n              <a className=\"username\"> {getNameById(incidentData.CreatedBy)} </a>\r\n               {moment(incidentData.CreatedAT).fromNow()}\r\n            </span>\r\n          \r\n        </div>\r\n\r\n      </div>     \r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {     \r\n      allAssignees: state.users.users,\r\n      userId :state.userLogin.userId, \r\n      incidentData: state.incidents.IncidentSelected,   \r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {     \r\n      updateIncident: (parameters) => dispatch(updateIncident(parameters)),  \r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(IncidentTitle);","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comments.js",["312","313","314"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport moment from \"moment\";\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport Comment from \"./Comment\";\r\nimport { connect } from \"react-redux\";\r\nimport {  addNewComment } from \"../../../store/actions/incidentsActions\";\r\n\r\nfunction Comments({\r\n  incidentId,\r\n  comments,\r\n  userId,\r\n  getNameById,\r\n  addNewComment\r\n}) {\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [newCommentFiles, setNewCommentFiles] = useState(null);\r\n\r\n  const newCommentFilesRef = useRef();\r\n  const history = useHistory();\r\n  //console.log(history);\r\n  const onFileChange = (event) => {\r\n    setNewCommentFiles(event.target.files);\r\n  };\r\n\r\n  const saveComment = () => {\r\n    if (newComment.trim() === \"\") {\r\n      alert(\"Please add comment first.\");\r\n      return;\r\n    }\r\n    const formData = new FormData();\r\n\r\n    if (newCommentFiles) {\r\n      for (let i = 0; i < newCommentFiles.length; i++) {\r\n        formData.append(\r\n          \"Attachment\" + i + 1,\r\n          newCommentFiles[i],\r\n          newCommentFiles[i].name\r\n        );\r\n      }\r\n    }\r\n    formData.append(\"CommentText\", newComment.trim());\r\n    formData.append(\"IncidentId\", incidentId);\r\n    formData.append(\"UserId\", userId);\r\n    addNewComment(formData);\r\n\r\n    setNewComment(\"\");\r\n    setNewCommentFiles(null);\r\n    newCommentFilesRef.current.value = \"\";\r\n    //history.push(history.location.pathname);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <p className=\"comment-title left-align\">Comments</p>\r\n      <p className=\"all-comments-box\">\r\n        {!comments ? (\r\n          <h1>No Comments</h1>\r\n        ) : (\r\n          comments.map((comment) => {\r\n            return (\r\n              <Comment\r\n                key={comment.Id}\r\n                comment={comment}\r\n                getNameById={getNameById}\r\n                incidentId={incidentId}\r\n                userId={userId}               \r\n              />\r\n            );\r\n          })\r\n        )}{\" \"}\r\n        {/* end of comments loop */}\r\n      </p>\r\n\r\n      <div className=\"new-comment-box\">\r\n        <h6 className=\"heading indigo-text darken-4 left-align\">Add Comment</h6>\r\n        <div className=\"input-field\">\r\n          <textarea\r\n            id=\"comment\"\r\n            className=\"materialize-textarea\"\r\n            value={newComment}\r\n            onChange={(e) => setNewComment(e.target.value)}\r\n          ></textarea>\r\n          <label htmlFor=\"comment\" className=\"\">\r\n            Comment\r\n          </label>\r\n        </div>\r\n        <div className=\"file-field \">\r\n          <div className=\"btn indigo darken-2\">\r\n            <i className=\"material-icons \">attachment</i>\r\n            <input type=\"file\" id=\"attachment\" multiple onChange={onFileChange} />\r\n          </div>\r\n          <div className=\"file-path-wrapper\">\r\n            <input\r\n              className=\"file-path validate\"\r\n              ref={newCommentFilesRef}\r\n              type=\"text\"\r\n              placeholder=\"Upload upto 3 files\"\r\n            />\r\n          </div>\r\n          \r\n        </div>\r\n        <button\r\n            className=\"btn green darken-2 updateBtn\"\r\n            onClick={saveComment}\r\n          >\r\n            <span>Add</span>\r\n            <i className=\"material-icons right\">save</i>\r\n          </button>\r\n        \r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id       \r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {    \r\n    addNewComment: (formData) => dispatch(addNewComment(formData))    \r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comments);\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\actions\\userLoginActions.js",["315"],"import axios from 'axios';\r\nimport qs from 'qs';\r\nimport { usersUrls } from \"../../api/apiURLs\";\r\n\r\n// export const logIn = (credentials) => {\r\n//     return (dispatch, getState) => {     \r\n//         axios({\r\n//             method: 'post',\r\n//             //url: baseUrl + 'applications/' + appName + '/dataexport/plantypes' + plan,\r\n//             url : usersUrls.tokenUrl,\r\n//             headers: {'Content-type': 'application/x-www-form-urlencoded'}, \r\n//             data: qs.stringify({\r\n//                 grant_type: 'password',\r\n//                 username: credentials.username,\r\n//                 password: credentials.password \r\n//             }),\r\n//           })\r\n//           .then((response)=>{              \r\n//               const loginData = {\r\n//                   token : response.data.access_token,\r\n//                   Name :  response.data.Name,\r\n//                   User_Id :  response.data.User_Id\r\n//               }\r\n//               dispatch({ type: 'LOGIN_PASS', loginData });\r\n//           })\r\n//           .catch((err)=>{\r\n//                    dispatch({ type: 'LOGIN_FAIL'});\r\n//                    console.log(err);\r\n//           });    \r\n//     }\r\n//   }\r\n\r\n  export const logIn = (credentials) => {\r\n    return (dispatch, getState) => {   \r\n         axios({\r\n            method: 'post',\r\n            //url: baseUrl + 'applications/' + appName + '/dataexport/plantypes' + plan,\r\n            url : usersUrls.authenticateUrl,\r\n            headers: {'Content-type': 'application/json'}, \r\n            data: {               \r\n                Username: credentials.username,\r\n                Password: credentials.password \r\n            },\r\n          })\r\n          .then((response)=>{              \r\n              const loginData = {\r\n                  token : response.data.Token,\r\n                  Name :  response.data.user.FirstName + \" \" +  response.data.user.LastName,\r\n                  User_Id :  response.data.user.Id\r\n              }\r\n              dispatch({ type: 'LOGIN_PASS', loginData });\r\n              dispatch({ type: 'UNREAD_CONVERSATION', data:  response.data.UnreadConversationCount });            \r\n          })\r\n          .catch((err)=>{\r\n                   dispatch({ type: 'LOGIN_FAIL'});\r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n  \r\n  \r\n  export const signOut = () => {\r\n    return (dispatch, getState) => {     \r\n      dispatch({ type: 'SIGN_OUT', data:null });\r\n    }\r\n  }\r\n  \r\n  export const signUp = (newUser) => {\r\n    return (dispatch, getState) => {     \r\n    }\r\n  }\r\n\r\n  export const updateHubId = (hubId, userId) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.updateHubIdUrl \r\n        axios.post(url, {\r\n          HubId : hubId,\r\n          UserId : userId\r\n        })\r\n          .then((response)=>{          \r\n          \r\n             dispatch({ type: 'UPDATE_HUB', hubId });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\actions\\usersActions.js",["316"],"import axios from 'axios';\r\nimport { usersUrls } from \"../../api/apiURLs\";\r\n\r\nexport const  allUsers = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.allUsersUrl\r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const users = response.data;\r\n              dispatch({ type: 'ALL_USERS', users });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n  export const userssWithPage = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.userssWithPageUrl +\r\n                    \"PageSize=\" + parameters.PageSize +\"&PageNumber=\" + parameters.PageNumber \r\n                    + \"&SortBy=q&SortDirection=q&Search=\" + parameters.Search;\r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const data = response.data;                   \r\n              dispatch({ type: 'USERS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n\r\n  export const addNewUser = (formData) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.addNewUserUrl \r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = response.data;\r\n            //  dispatch({ type: 'INCIDENTS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\actions\\notificationsActions.js",[],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\actions\\incidentsActions.js",["317","318","319","320","321","322","323"],"import axios from 'axios';\r\nimport { incidentsUrls } from \"../../api/apiURLs\";\r\nimport { incidentUpdatedSignalR } from \"../../signalR/sender\";\r\n\r\nexport var cancel;\r\n\r\nexport const incidentsWithPage = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.incidentsWithPageUrl +\r\n                    \"PageSize=\" + parameters.PageSize +\"&PageNumber=\" + parameters.PageNumber \r\n                    + \"&SortBy=q&SortDirection=q&Search=\" + parameters.Search;     \r\n        axios({\r\n          method: 'GET',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n              dispatch({ type: 'INCIDENTS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{    \r\n            try{\r\n              console.log(err);\r\n              if(err.message.toLowerCase()==\"request failed with status code 401\")\r\n                    dispatch({ type: 'SIGN_OUT', data:\"token invalid\" });\r\n\r\n              const data = err.message;\r\n              console.log(\"error:\", err)\r\n              dispatch({ type: 'INCIDENTS_WITH_PAGE_ERROR', data });\r\n            }\r\n            catch(e){\r\n\r\n            }\r\n                 \r\n          });    \r\n    }\r\n  }\r\n\r\n  export const addNewIncident = (formData) => {\r\n    return (dispatch, getState) => {      \r\n      //console.log(\"add new incident action\");\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.addNewIncidentUrl\r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = true;\r\n              dispatch({ type: 'NEW_INCIDENT_STATUS', data });\r\n          })\r\n          .catch((err)=>{  \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n           let data = err.message;\r\n              console.log(data);\r\n            dispatch({ type: 'NEW_INCIDENT_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const addNewComment = (formData) => {\r\n    return (dispatch, getState) => {      \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.addNewCommentUrl\r\n         axios.post(url, formData)\r\n           .then((response)=>{            \r\n             const comment = response.data;\r\n            // console.log(\"Comment\", comment);\r\n              dispatch({ type: 'ADD_NEW_COMMENT', data: comment });\r\n              incidentUpdatedSignalR(comment.IncidentId, comment.UserId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(\"err\", err);\r\n            const data = \"while adding comment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const deleteComment = (commentId, incidentId, userId) => {\r\n    return (dispatch, getState) => {      \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.deleteCommentUrl\r\n                    + \"commentId=\" + commentId\r\n                    + \"&incidentId=\" + incidentId\r\n                    + \"&userId=\" + userId\r\n        axios.get(url)\r\n          .then((response)=>{    \r\n              dispatch({ type: 'COMMENT_DELETED', data: commentId });\r\n              incidentUpdatedSignalR(incidentId, userId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n               dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while delteing comment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const updateIncident = (parameters) => {\r\n    return (dispatch, getState) => {      \r\n     // console.log(comment);\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.updateIncidentUrl\r\n        axios.post(url, parameters)\r\n          .then((response)=>{  \r\n              dispatch({ type: 'INCIDENTS_UPDATE', parameters });\r\n              incidentUpdatedSignalR(parameters.IncidentId, parameters.UserId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n               dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while updating incident: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const updateComment = (comment) => {\r\n    return (dispatch, getState) => {    \r\n       console.log(comment);\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.updateCommentUrl\r\n        axios.post(url, comment)\r\n          .then((response)=>{  \r\n          //  dispatch(getIncidentById(comment.IncidentId)); \r\n        //  dispatch({ type: 'COMMENT_UPDATE', data:comment });\r\n          incidentUpdatedSignalR(comment.IncidentId, comment.UserId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while updating comment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n\r\n  export const getIncidentById = (incidentId) => {\r\n    return (dispatch, getState) => {  \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.getIncidentByIdUrl + incidentId; \r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const data = response.data;                           \r\n              dispatch({ type: 'INCIDENTS_BY_ID', data });\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while getting data for incident: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const deleteAttachment = (type, userid, incidentId , file) => {\r\n    return (dispatch, getState) => {    \r\n           axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.deleteAttachmentUrl\r\n                + \"type=\" + type\r\n                + \"&commentId=\" + file.CommentId \r\n                + \"&incidentId=\" + incidentId\r\n                + \"&userId=\" + userid\r\n                + \"&fileId=\" + file.Id\r\n                + \"&filename=\" + file.FileName\r\n                + \"&contentType=\" + file.ContentType\r\n        axios.get(url)\r\n          .then((response)=>{      \r\n                if (type === \"comment\")\r\n                  dispatch({ type: \"COMMENT_ATTACHMENT_DELETED\", data: file });\r\n                else\r\n                dispatch({ type: \"INCIDENT_ATTACHMENT_DELETED\", data: file });\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while delteing attachment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const removeIncidentData = () => {       \r\n         return   { type: 'REMOVE_INCIDENT_DATA', data : null};\r\n         \r\n  }\r\n\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\actions\\messagesActions.js",["324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340"],"import axios from 'axios';\r\nimport { messagesUrls } from \"../../api/apiURLs\";\r\nimport { sendMessageSignalR } from \"../../signalR/sender\";\r\n\r\nexport var cancel;\r\n\r\nexport const messagesByUser = (userId) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.messagesByUserUrl + userId;                   \r\n        axios({\r\n          method: 'GET',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n              dispatch({ type: 'MESSAGES_BY_USER', data });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err.message);\r\n                   if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                       dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n\r\n  export const conversationsByUser = (userId) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.conversationsByUserUrl + userId;                   \r\n        axios({\r\n          method: 'GET',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n              dispatch({ type: 'CONVERSATIONS_BY_USER', data });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err.message);\r\n                   if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                      dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n\r\n  export const messagesByConversations = (conversationId) => {\r\n    \r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.messagesByConversationsUrl + conversationId;                   \r\n        axios({\r\n          method: 'GET',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n            // console.log(\"Messages Action\", data);\r\n              dispatch({ type: 'MESSAGES_BY_CONVERSATIONS', data });\r\n          })\r\n          .catch((err)=>{  \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });  \r\n                   console.log(err.message);\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n\r\n  export const replyMessage = (formData, conversationId) => {\r\n    return (dispatch, getState) => {      \r\n      //console.log(\"add new incident action\");\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.sendMessageUrl\r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = true;           \r\n             dispatch({ type: 'NEW_MESSAGE', data:response.data[0] });\r\n           //  dispatch(messagesByConversations(conversationId));\r\n             console.log(\"conversationId, response.data.To\");\r\n             sendMessageSignalR(conversationId, response.data[0].To, response.data[0], false);\r\n             // dispatch({ type: 'NEW_MESSAGE', data });\r\n          })\r\n          .catch((err)=>{  \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = err.message;\r\n            console.log(data);\r\n           \r\n          });   \r\n    }\r\n  }\r\n\r\n  \r\n  export const receiveMessage = (newMessage) => {\r\n    return (dispatch, getState) => {      \r\n     dispatch({ type: 'NEW_MESSAGE', data:newMessage });\r\n    }\r\n  }\r\n  export const receiveConversation = (newConversation) => {\r\n    console.log(\"newConversation\", newConversation);\r\n    return (dispatch, getState) => {      \r\n     dispatch({ type: 'NEW_CONVERSATION', data:newConversation });\r\n    }\r\n  }\r\n\r\n  export const selectConversation = (conversation) => {\r\n    return (dispatch, getState) => {      \r\n     dispatch({ type: 'CONVERSATION_SELECTED', data:{...conversation} });\r\n    }\r\n  }\r\n\r\n \r\n  export const sendNewMessage = (formData) => {\r\n    return (dispatch, getState) => {      \r\n      //console.log(\"add new incident action\");\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.sendMessageUrl\r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = true;\r\n             dispatch({ type: 'NEW_CONVERSATION', data:response.data[1] });\r\n             sendMessageSignalR(null, response.data[1].User2, response.data[1], true);\r\n          })\r\n          .catch((err)=>{  \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = err.message;\r\n            console.log(data);\r\n           \r\n          });   \r\n    }\r\n  }\r\n \r\n\r\n  export const deleteMessage = (messageId) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.deleteMessageUrl + messageId;                   \r\n        axios({\r\n          method: 'POST',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n             console.log(data);\r\n              dispatch({ type: 'DELETE_MESSAGE', data:messageId });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err);\r\n                   if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                      dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n\r\n  export const changeMessageStatus = (messageId, status) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n      //dispatch({ type: 'CHANGE_MESSAGE_STATUS', data:{messageId, status} });\r\n      //return;\r\n\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.changeMessageStatusUrl + messageId + \"&Status=\" + status;                   \r\n        axios({\r\n          method: 'POST',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n             console.log(data);\r\n             dispatch({ type: 'CHANGE_MESSAGE_STATUS', data:{messageId, status} });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err);\r\n                   if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                      dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n\r\n  \r\n  export const deleteConversation = (conversationId) => {\r\n    return (dispatch, getState) => {    \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = messagesUrls.deleteConversationUrl + conversationId;                   \r\n        axios({\r\n          method: 'POST',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n             //console.log(data);\r\n              dispatch({ type: 'DELETE_CONVERSATION', data:conversationId });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err);\r\n                   if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                      dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err);              \r\n          });    \r\n    }\r\n  } \r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\api\\apiURLs.js",[],"D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\helpers\\common.js",["341","342","343"],"import moment from \"moment\";\r\n\r\nexport const setDateTime = (date) => {\r\n   // return date;\r\n   Date.prototype.addHours = function(h) {\r\n    this.setTime(this.getTime() + (h*60*60*1000));\r\n    return this;\r\n  }\r\n    try{    \r\n        let timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n        let offset = new Date().getTimezoneOffset();   \r\n        let newDate = new Date(date).addHours((offset/60) * (-1));\r\n        // console.log(\"date\", date);    \r\n        // console.log(\"newDate\", newDate);   \r\n        // console.log(\"offset\", offset);\r\n\r\n        return newDate;\r\n    }\r\n    catch(err){\r\n            console.log(\"Error in dates\", err);\r\n            return date;\r\n    }\r\n   \r\n}\r\n\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\store\\actions\\dashboardActions.js",["344","345","346","347","348"],"import axios from 'axios';\r\nimport { dashboardUrls } from \"../../api/apiURLs\";\r\n\r\nexport const  GetKPI = (userId) => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.kpiUrl + userId;       \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n          \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'KPI', data });\r\n          })\r\n          .catch((err)=>{      \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                   dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });           \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n  export const  GetOverallWidget = () => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.overallWidgetUrl ;      \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n                \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'OVERALLWIDGET', data });\r\n          })\r\n          .catch((err)=>{     \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n             dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });            \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n\r\n  export const  GetLast5Incidents = () => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.last5IncidentsUrl ;      \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n          \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'LAST5INCIDENTS', data });\r\n          })\r\n          .catch((err)=>{     \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n               dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });            \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n \r\n\r\n  export const  GetOldest5UnresolvedIncidents = () => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.oldest5UnresolvedIncidentsUrl ;      \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n           \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'OLDEST5UNRESOLVEDINCIDENTS', data });\r\n          })\r\n          .catch((err)=>{        \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n               dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });         \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n \r\n  export const  GetMostAssignedToUsers = () => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.mostAssignedToUsersIncidentsUrl ;      \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n                 \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'MOSTASSIGNEDTOUSERS', data });\r\n          })\r\n          .catch((err)=>{    \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });             \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comment.js",["349","350","351","352","353","354","355"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport moment from \"moment\";\r\nimport { deleteAttachment, updateComment , deleteComment } from \"../../../store/actions/incidentsActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { incidentsUrls } from \"../../../api/apiURLs\";\r\nimport {setDateTime} from \"../../../helpers/common\"\r\n\r\nfunction Comment({\r\n  comment,\r\n  getNameById,\r\n  incidentId,\r\n  userId,\r\n  deleteAttachment,\r\n  updateComment,\r\n  deleteComment\r\n}) {\r\n\r\n  const [editComment, setEditComment] = useState(false);\r\n  const [commentText, setCommentText] = useState(comment.CommentText);\r\n  const [files, setFiles] = useState(null);\r\n\r\n  const commentEditClick = () => {\r\n    setEditComment(!editComment);\r\n    setCommentText(comment.CommentText);\r\n  };\r\n  const commentEditCancel = () => {\r\n    setCommentText(comment.CommentText);\r\n    setEditComment(false);\r\n  };\r\n\r\n  const commentEditSave = () => {\r\n    let changedComment = {\r\n      Id : comment.Id,\r\n      IncidentId : incidentId,\r\n      UserId : userId,\r\n      CreateDate : new Date(),\r\n      CommentText : commentText,\r\n      attachments :[]\r\n    }\r\n    updateComment(changedComment);\r\n    setEditComment(false);\r\n  };\r\n\r\n  const downloadFile = (file) => {\r\n    window.open(\r\n      incidentsUrls.downloadFileUrl + \r\n      \"type=comment\" +\r\n        \"&commentId=\" +\r\n        file.CommentId +\r\n        \"&incidentId=\" +\r\n        incidentId +\r\n        \"&filename=\" +\r\n        file.FileName +\r\n        \"&contentType=\" +\r\n        file.ContentType\r\n    );\r\n  };\r\n\r\n  const deleteFile = (file) => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this attachment.\" + file.FileName\r\n      )\r\n    ) {\r\n      deleteAttachment(\"comment\", userId, incidentId, file);  \r\n    }\r\n  };\r\n\r\n  const deleteThisComment = () => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this comment.\"\r\n      )\r\n    ) {\r\n      deleteComment(comment.Id,incidentId, userId );  \r\n    }\r\n  }\r\n\r\n  const setDate = (date) => {\r\n    var newDate = moment(date).format(\"YYYY-MM-DD h:mm:ss A\");\r\n    newDate = new Date(newDate + \" UTC\");    \r\n    return newDate.toString();\r\n  }\r\n\r\n  return (\r\n    <div className=\"comment-box\">\r\n      <div className=\"darkslategrayText comment-header\">\r\n        <div>\r\n        <a className=\"username\">{getNameById(comment.UserId)}</a> \r\n        <small> commented - </small>        \r\n        <span className=\"comment-timestamp\"\r\n          title={moment(comment.CreateDate).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n        >\r\n           {moment(comment.CreateDate).fromNow()}\r\n          {/* {moment(comment.CreateDate).fromNow()} */}\r\n        </span>\r\n        </div>\r\n        <span className=\"comment-actions\">\r\n          <i\r\n            title=\"Edit Comment\"\r\n            className=\"actions-icon material-icons darkslategrayText\"\r\n            onClick={commentEditClick}\r\n          >\r\n            edit\r\n          </i>\r\n          <i\r\n            title=\"Delete Comment\"\r\n            className=\"actions-icon material-icons red-text\"\r\n            onClick = {deleteThisComment}\r\n          >\r\n            delete_forever\r\n          </i>\r\n        </span>\r\n\r\n      </div>\r\n      {!editComment ? (\r\n        <p className=\"darkslategrayText comment-text\">{comment.CommentText}</p>\r\n      ) : (\r\n        <p className=\"comment-edit-box\">\r\n          <textarea className=\"materialize-textarea\" onChange={(e) => setCommentText(e.target.value)}></textarea>\r\n\r\n          <i\r\n            className=\"right green-text actions-icon material-icons\"\r\n            title=\"Save\"\r\n            onClick={commentEditSave}\r\n          >\r\n            check\r\n          </i>\r\n          <i\r\n            className=\"right yellow-text text-darken-2 actions-icon material-icons\"\r\n            title=\"Cancel\"\r\n            onClick={commentEditCancel}\r\n          >\r\n            cancel\r\n          </i>\r\n        </p>\r\n      )}{\" \"}\r\n      {/* end of edit comment - if */}\r\n      <div className=\"comment-file-container\">\r\n        \r\n          {!comment.attachments\r\n            ? null\r\n            : comment.attachments.map((file) => {\r\n                return (\r\n                  <div className=\"comment-file\" key={file.Id}>\r\n\r\n                    <div className=\"comment-file-text\">\r\n                      <span\r\n                        title={file.FileName}\r\n                        // onClick={() => downloadFile(file)}\r\n                      >\r\n                         <i className=\"actions-icon material-icons orange-text\">\r\n                                attachment\r\n                              </i>\r\n                        <span>\r\n                          {file.FileName.length > 20\r\n                            ? file.FileName.slice(0, 20) + \"...\"\r\n                            : file.FileName}\r\n                          </span>\r\n                      </span>\r\n                    </div>\r\n\r\n                    <div className=\"comment-file-actions\">\r\n                      <i\r\n                        title=\"Remove\"\r\n                        className=\"actions-icon material-icons indigo-text\"\r\n                        onClick={() => downloadFile(file)}\r\n                      >\r\n                        download\r\n                      </i>\r\n                      <i\r\n                        title=\"Remove\"\r\n                        className=\"actions-icon material-icons red-text \"\r\n                        onClick={() => deleteFile(file)}\r\n                      >\r\n                        delete_forever\r\n                      </i>\r\n                    </div>\r\n                 \r\n                  </div>\r\n                );\r\n              })}        \r\n      </div>\r\n      <hr></hr>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id       \r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {   \r\n    deleteAttachment : (type, userid, incidentId , file) => dispatch(deleteAttachment(type, userid, incidentId ,file)),\r\n    updateComment : (comment) => dispatch(updateComment(comment)),\r\n    deleteComment : (commentId, incidentId, userId) => dispatch(deleteComment(commentId, incidentId, userId))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);\r\n","D:\\GitHub\\_Mine\\_IM\\incidentmanager_React\\src\\signalR\\sender.js",["356"],"import {  JsonHubProtocol,   \r\n  HubConnectionBuilder,\r\n  LogLevel\r\n} from '@microsoft/signalr';  /*npm i --save @microsoft/signalr */\r\n\r\nimport { baseUrl, baseUrl2 } from \"../api/apiURLs\";\r\n\r\n\r\nexport   const incidentUpdatedSignalR =  (incidentId, userId) => {\r\nconst connection = new HubConnectionBuilder()\r\n//.withUrl('https://localhost:44310/hubs/notifications')\r\n.withUrl(baseUrl2 + 'hubs/notifications')\r\n.withAutomaticReconnect()\r\n.withHubProtocol(new JsonHubProtocol())\r\n.configureLogging(LogLevel.Information)\r\n.build();\r\n\r\nconnection.start().then(()=>{\r\n    console.log(connection.connectionStarted);\r\n    if (connection.connectionStarted) {\r\n        try {\r\n            connection.send(\"SendIncidentUpdate\", incidentId, userId);\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      } else {\r\n        alert(\"No connection to server yet.\");\r\n      }\r\n})      \r\n\r\n};\r\n\r\nexport   const sendMessageSignalR =  (conversationId, userId, newMessage, isNewConversation) => {\r\n  const connection = new HubConnectionBuilder()\r\n  //.withUrl('https://localhost:44310/hubs/notifications')\r\n  .withUrl(baseUrl2 + 'hubs/notifications')\r\n  .withAutomaticReconnect()\r\n  .withHubProtocol(new JsonHubProtocol())\r\n  .configureLogging(LogLevel.Information)\r\n  .build();\r\n  \r\n  connection.start().then(()=>{\r\n      console.log(connection.connectionStarted);\r\n      if (connection.connectionStarted) {\r\n          try {\r\n              connection.send(\"SendMessageAsync\", conversationId, userId, newMessage, isNewConversation);\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n        } else {\r\n          alert(\"No connection to server yet.\");\r\n        }\r\n  })      \r\n  \r\n  };\r\n  \r\n\r\n\r\nexport   const commentSent =  (message) => {\r\n      const connection = new HubConnectionBuilder()\r\n      .withUrl('https://localhost:44310/hubs/notifications')\r\n      .withAutomaticReconnect()\r\n      .withHubProtocol(new JsonHubProtocol())\r\n      .configureLogging(LogLevel.Information)\r\n      .build();\r\n\r\n      connection.start().then(()=>{\r\n          console.log(connection.connectionStarted);\r\n          if (connection.connectionStarted) {\r\n              try {\r\n                  connection.send(\"Send\", message);\r\n              } catch (e) {\r\n                console.log(e);\r\n              }\r\n            } else {\r\n              alert(\"No connection to server yet.\");\r\n            }\r\n      })      \r\n  \r\n  };\r\n\r\n\r\n",{"ruleId":"357","replacedBy":"358"},{"ruleId":"359","replacedBy":"360"},{"ruleId":"361","severity":1,"message":"362","line":6,"column":8,"nodeType":"363","messageId":"364","endLine":6,"endColumn":12},{"ruleId":"365","severity":1,"message":"366","line":79,"column":9,"nodeType":"367","endLine":79,"endColumn":57},{"ruleId":"361","severity":1,"message":"368","line":1,"column":17,"nodeType":"363","messageId":"364","endLine":1,"endColumn":23},{"ruleId":"361","severity":1,"message":"369","line":3,"column":8,"nodeType":"363","messageId":"364","endLine":3,"endColumn":9},{"ruleId":"370","severity":1,"message":"371","line":27,"column":8,"nodeType":"372","endLine":27,"endColumn":38,"suggestions":"373"},{"ruleId":"370","severity":1,"message":"374","line":15,"column":8,"nodeType":"372","endLine":15,"endColumn":15,"suggestions":"375"},{"ruleId":"365","severity":1,"message":"366","line":33,"column":15,"nodeType":"367","endLine":33,"endColumn":33},{"ruleId":"376","severity":1,"message":"377","line":36,"column":11,"nodeType":"367","endLine":36,"endColumn":77},{"ruleId":"376","severity":1,"message":"378","line":68,"column":14,"nodeType":"367","endLine":68,"endColumn":17},{"ruleId":"376","severity":1,"message":"378","line":119,"column":15,"nodeType":"367","endLine":119,"endColumn":18},{"ruleId":"370","severity":1,"message":"371","line":21,"column":8,"nodeType":"372","endLine":21,"endColumn":10,"suggestions":"379"},{"ruleId":"370","severity":1,"message":"371","line":37,"column":8,"nodeType":"372","endLine":37,"endColumn":38,"suggestions":"380"},{"ruleId":"361","severity":1,"message":"381","line":10,"column":10,"nodeType":"363","messageId":"364","endLine":10,"endColumn":17},{"ruleId":"382","severity":1,"message":"383","line":42,"column":45,"nodeType":"384","messageId":"385","endLine":42,"endColumn":47},{"ruleId":"370","severity":1,"message":"386","line":56,"column":8,"nodeType":"372","endLine":56,"endColumn":10,"suggestions":"387"},{"ruleId":"361","severity":1,"message":"388","line":14,"column":10,"nodeType":"363","messageId":"364","endLine":14,"endColumn":21},{"ruleId":"361","severity":1,"message":"389","line":29,"column":10,"nodeType":"363","messageId":"364","endLine":29,"endColumn":18},{"ruleId":"361","severity":1,"message":"390","line":37,"column":10,"nodeType":"363","messageId":"364","endLine":37,"endColumn":31},{"ruleId":"361","severity":1,"message":"391","line":37,"column":33,"nodeType":"363","messageId":"364","endLine":37,"endColumn":57},{"ruleId":"370","severity":1,"message":"392","line":53,"column":6,"nodeType":"372","endLine":53,"endColumn":23,"suggestions":"393"},{"ruleId":"370","severity":1,"message":"394","line":65,"column":6,"nodeType":"372","endLine":65,"endColumn":20,"suggestions":"395"},{"ruleId":"396","severity":1,"message":"397","line":90,"column":23,"nodeType":"384","messageId":"398","endLine":90,"endColumn":24},{"ruleId":"361","severity":1,"message":"399","line":8,"column":8,"nodeType":"363","messageId":"364","endLine":8,"endColumn":21},{"ruleId":"370","severity":1,"message":"400","line":32,"column":8,"nodeType":"372","endLine":32,"endColumn":10,"suggestions":"401"},{"ruleId":"370","severity":1,"message":"402","line":39,"column":8,"nodeType":"372","endLine":39,"endColumn":30,"suggestions":"403"},{"ruleId":"382","severity":1,"message":"404","line":44,"column":66,"nodeType":"384","messageId":"385","endLine":44,"endColumn":68},{"ruleId":"382","severity":1,"message":"383","line":45,"column":51,"nodeType":"384","messageId":"385","endLine":45,"endColumn":53},{"ruleId":"370","severity":1,"message":"405","line":49,"column":8,"nodeType":"372","endLine":49,"endColumn":37,"suggestions":"406"},{"ruleId":"382","severity":1,"message":"404","line":74,"column":61,"nodeType":"384","messageId":"385","endLine":74,"endColumn":63},{"ruleId":"382","severity":1,"message":"383","line":85,"column":21,"nodeType":"384","messageId":"385","endLine":85,"endColumn":23},{"ruleId":"382","severity":1,"message":"383","line":94,"column":21,"nodeType":"384","messageId":"385","endLine":94,"endColumn":23},{"ruleId":"382","severity":1,"message":"404","line":110,"column":71,"nodeType":"384","messageId":"385","endLine":110,"endColumn":73},{"ruleId":"382","severity":1,"message":"404","line":22,"column":23,"nodeType":"384","messageId":"385","endLine":22,"endColumn":25},{"ruleId":"382","severity":1,"message":"404","line":26,"column":43,"nodeType":"384","messageId":"385","endLine":26,"endColumn":45},{"ruleId":"370","severity":1,"message":"407","line":52,"column":8,"nodeType":"372","endLine":52,"endColumn":16,"suggestions":"408"},{"ruleId":"370","severity":1,"message":"409","line":56,"column":8,"nodeType":"372","endLine":56,"endColumn":48,"suggestions":"410"},{"ruleId":"376","severity":1,"message":"378","line":73,"column":15,"nodeType":"367","endLine":73,"endColumn":19},{"ruleId":"376","severity":1,"message":"378","line":109,"column":37,"nodeType":"367","endLine":109,"endColumn":40},{"ruleId":"376","severity":1,"message":"378","line":111,"column":33,"nodeType":"367","endLine":111,"endColumn":36},{"ruleId":"376","severity":1,"message":"378","line":18,"column":19,"nodeType":"367","endLine":18,"endColumn":53},{"ruleId":"376","severity":1,"message":"378","line":23,"column":19,"nodeType":"367","endLine":23,"endColumn":51},{"ruleId":"376","severity":1,"message":"378","line":28,"column":19,"nodeType":"367","endLine":28,"endColumn":52},{"ruleId":"370","severity":1,"message":"411","line":34,"column":7,"nodeType":"372","endLine":34,"endColumn":9,"suggestions":"412"},{"ruleId":"361","severity":1,"message":"413","line":33,"column":9,"nodeType":"363","messageId":"364","endLine":33,"endColumn":23},{"ruleId":"382","severity":1,"message":"383","line":43,"column":86,"nodeType":"384","messageId":"385","endLine":43,"endColumn":88},{"ruleId":"382","severity":1,"message":"383","line":43,"column":112,"nodeType":"384","messageId":"385","endLine":43,"endColumn":114},{"ruleId":"361","severity":1,"message":"414","line":1,"column":17,"nodeType":"363","messageId":"364","endLine":1,"endColumn":25},{"ruleId":"361","severity":1,"message":"415","line":1,"column":27,"nodeType":"363","messageId":"364","endLine":1,"endColumn":36},{"ruleId":"361","severity":1,"message":"368","line":1,"column":38,"nodeType":"363","messageId":"364","endLine":1,"endColumn":44},{"ruleId":"382","severity":1,"message":"383","line":8,"column":37,"nodeType":"384","messageId":"385","endLine":8,"endColumn":39},{"ruleId":"382","severity":1,"message":"383","line":21,"column":46,"nodeType":"384","messageId":"385","endLine":21,"endColumn":48},{"ruleId":"382","severity":1,"message":"383","line":8,"column":35,"nodeType":"384","messageId":"385","endLine":8,"endColumn":37},{"ruleId":"382","severity":1,"message":"383","line":15,"column":52,"nodeType":"384","messageId":"385","endLine":15,"endColumn":54},{"ruleId":"370","severity":1,"message":"416","line":20,"column":8,"nodeType":"372","endLine":20,"endColumn":19,"suggestions":"417"},{"ruleId":"382","severity":1,"message":"383","line":35,"column":46,"nodeType":"384","messageId":"385","endLine":35,"endColumn":48},{"ruleId":"370","severity":1,"message":"418","line":55,"column":8,"nodeType":"372","endLine":55,"endColumn":10,"suggestions":"419"},{"ruleId":"361","severity":1,"message":"415","line":1,"column":27,"nodeType":"363","messageId":"364","endLine":1,"endColumn":36},{"ruleId":"382","severity":1,"message":"383","line":26,"column":31,"nodeType":"384","messageId":"385","endLine":26,"endColumn":33},{"ruleId":"361","severity":1,"message":"415","line":1,"column":27,"nodeType":"363","messageId":"364","endLine":1,"endColumn":36},{"ruleId":"382","severity":1,"message":"383","line":17,"column":46,"nodeType":"384","messageId":"385","endLine":17,"endColumn":48},{"ruleId":"361","severity":1,"message":"420","line":29,"column":11,"nodeType":"363","messageId":"364","endLine":29,"endColumn":34},{"ruleId":"361","severity":1,"message":"414","line":1,"column":27,"nodeType":"363","messageId":"364","endLine":1,"endColumn":35},{"ruleId":"370","severity":1,"message":"421","line":11,"column":4,"nodeType":"372","endLine":11,"endColumn":6,"suggestions":"422"},{"ruleId":"376","severity":1,"message":"378","line":74,"column":11,"nodeType":"367","endLine":74,"endColumn":56},{"ruleId":"370","severity":1,"message":"423","line":13,"column":6,"nodeType":"372","endLine":13,"endColumn":8,"suggestions":"424"},{"ruleId":"370","severity":1,"message":"425","line":21,"column":4,"nodeType":"372","endLine":21,"endColumn":31,"suggestions":"426"},{"ruleId":"427","severity":1,"message":"428","line":60,"column":10,"nodeType":"429","messageId":"385","endLine":60,"endColumn":15},{"ruleId":"361","severity":1,"message":"414","line":1,"column":27,"nodeType":"363","messageId":"364","endLine":1,"endColumn":35},{"ruleId":"370","severity":1,"message":"430","line":12,"column":4,"nodeType":"372","endLine":12,"endColumn":6,"suggestions":"431"},{"ruleId":"376","severity":1,"message":"378","line":76,"column":11,"nodeType":"367","endLine":76,"endColumn":56},{"ruleId":"361","severity":1,"message":"414","line":1,"column":26,"nodeType":"363","messageId":"364","endLine":1,"endColumn":34},{"ruleId":"370","severity":1,"message":"432","line":12,"column":6,"nodeType":"372","endLine":12,"endColumn":8,"suggestions":"433"},{"ruleId":"370","severity":1,"message":"434","line":13,"column":8,"nodeType":"372","endLine":13,"endColumn":10,"suggestions":"435"},{"ruleId":"370","severity":1,"message":"425","line":21,"column":8,"nodeType":"372","endLine":21,"endColumn":27,"suggestions":"436"},{"ruleId":"361","severity":1,"message":"437","line":2,"column":27,"nodeType":"363","messageId":"364","endLine":2,"endColumn":43},{"ruleId":"361","severity":1,"message":"368","line":1,"column":38,"nodeType":"363","messageId":"364","endLine":1,"endColumn":44},{"ruleId":"361","severity":1,"message":"368","line":1,"column":38,"nodeType":"363","messageId":"364","endLine":1,"endColumn":44},{"ruleId":"361","severity":1,"message":"388","line":5,"column":9,"nodeType":"363","messageId":"364","endLine":5,"endColumn":20},{"ruleId":"376","severity":1,"message":"378","line":97,"column":15,"nodeType":"367","endLine":97,"endColumn":39},{"ruleId":"361","severity":1,"message":"415","line":1,"column":17,"nodeType":"363","messageId":"364","endLine":1,"endColumn":26},{"ruleId":"361","severity":1,"message":"438","line":2,"column":8,"nodeType":"363","messageId":"364","endLine":2,"endColumn":14},{"ruleId":"361","severity":1,"message":"439","line":19,"column":9,"nodeType":"363","messageId":"364","endLine":19,"endColumn":16},{"ruleId":"361","severity":1,"message":"440","line":2,"column":8,"nodeType":"363","messageId":"364","endLine":2,"endColumn":10},{"ruleId":"361","severity":1,"message":"441","line":46,"column":20,"nodeType":"363","messageId":"364","endLine":46,"endColumn":24},{"ruleId":"382","severity":1,"message":"383","line":26,"column":43,"nodeType":"384","messageId":"385","endLine":26,"endColumn":45},{"ruleId":"382","severity":1,"message":"383","line":52,"column":43,"nodeType":"384","messageId":"385","endLine":52,"endColumn":45},{"ruleId":"382","severity":1,"message":"383","line":94,"column":43,"nodeType":"384","messageId":"385","endLine":94,"endColumn":45},{"ruleId":"382","severity":1,"message":"383","line":114,"column":43,"nodeType":"384","messageId":"385","endLine":114,"endColumn":45},{"ruleId":"382","severity":1,"message":"383","line":135,"column":43,"nodeType":"384","messageId":"385","endLine":135,"endColumn":45},{"ruleId":"382","severity":1,"message":"383","line":155,"column":43,"nodeType":"384","messageId":"385","endLine":155,"endColumn":45},{"ruleId":"382","severity":1,"message":"383","line":183,"column":43,"nodeType":"384","messageId":"385","endLine":183,"endColumn":45},{"ruleId":"382","severity":1,"message":"383","line":23,"column":50,"nodeType":"384","messageId":"385","endLine":23,"endColumn":52},{"ruleId":"361","severity":1,"message":"441","line":25,"column":26,"nodeType":"363","messageId":"364","endLine":25,"endColumn":30},{"ruleId":"382","severity":1,"message":"383","line":47,"column":50,"nodeType":"384","messageId":"385","endLine":47,"endColumn":52},{"ruleId":"361","severity":1,"message":"441","line":49,"column":26,"nodeType":"363","messageId":"364","endLine":49,"endColumn":30},{"ruleId":"382","severity":1,"message":"383","line":72,"column":43,"nodeType":"384","messageId":"385","endLine":72,"endColumn":45},{"ruleId":"361","severity":1,"message":"441","line":75,"column":26,"nodeType":"363","messageId":"364","endLine":75,"endColumn":30},{"ruleId":"361","severity":1,"message":"441","line":88,"column":20,"nodeType":"363","messageId":"364","endLine":88,"endColumn":24},{"ruleId":"382","severity":1,"message":"383","line":96,"column":43,"nodeType":"384","messageId":"385","endLine":96,"endColumn":45},{"ruleId":"361","severity":1,"message":"441","line":132,"column":20,"nodeType":"363","messageId":"364","endLine":132,"endColumn":24},{"ruleId":"382","severity":1,"message":"383","line":137,"column":43,"nodeType":"384","messageId":"385","endLine":137,"endColumn":45},{"ruleId":"382","severity":1,"message":"383","line":164,"column":50,"nodeType":"384","messageId":"385","endLine":164,"endColumn":52},{"ruleId":"361","severity":1,"message":"441","line":166,"column":26,"nodeType":"363","messageId":"364","endLine":166,"endColumn":30},{"ruleId":"382","severity":1,"message":"383","line":192,"column":50,"nodeType":"384","messageId":"385","endLine":192,"endColumn":52},{"ruleId":"361","severity":1,"message":"441","line":194,"column":26,"nodeType":"363","messageId":"364","endLine":194,"endColumn":30},{"ruleId":"361","severity":1,"message":"441","line":212,"column":20,"nodeType":"363","messageId":"364","endLine":212,"endColumn":24},{"ruleId":"382","severity":1,"message":"383","line":218,"column":50,"nodeType":"384","messageId":"385","endLine":218,"endColumn":52},{"ruleId":"361","severity":1,"message":"441","line":220,"column":26,"nodeType":"363","messageId":"364","endLine":220,"endColumn":30},{"ruleId":"361","severity":1,"message":"438","line":1,"column":8,"nodeType":"363","messageId":"364","endLine":1,"endColumn":14},{"ruleId":"442","severity":1,"message":"443","line":5,"column":4,"nodeType":"444","messageId":"385","endLine":8,"endColumn":4},{"ruleId":"361","severity":1,"message":"445","line":10,"column":13,"nodeType":"363","messageId":"364","endLine":10,"endColumn":21},{"ruleId":"382","severity":1,"message":"383","line":16,"column":43,"nodeType":"384","messageId":"385","endLine":16,"endColumn":45},{"ruleId":"382","severity":1,"message":"383","line":36,"column":43,"nodeType":"384","messageId":"385","endLine":36,"endColumn":45},{"ruleId":"382","severity":1,"message":"383","line":55,"column":43,"nodeType":"384","messageId":"385","endLine":55,"endColumn":45},{"ruleId":"382","severity":1,"message":"383","line":75,"column":43,"nodeType":"384","messageId":"385","endLine":75,"endColumn":45},{"ruleId":"382","severity":1,"message":"383","line":94,"column":43,"nodeType":"384","messageId":"385","endLine":94,"endColumn":45},{"ruleId":"361","severity":1,"message":"415","line":1,"column":17,"nodeType":"363","messageId":"364","endLine":1,"endColumn":26},{"ruleId":"361","severity":1,"message":"368","line":1,"column":38,"nodeType":"363","messageId":"364","endLine":1,"endColumn":44},{"ruleId":"361","severity":1,"message":"388","line":6,"column":9,"nodeType":"363","messageId":"364","endLine":6,"endColumn":20},{"ruleId":"361","severity":1,"message":"446","line":20,"column":10,"nodeType":"363","messageId":"364","endLine":20,"endColumn":15},{"ruleId":"361","severity":1,"message":"447","line":20,"column":17,"nodeType":"363","messageId":"364","endLine":20,"endColumn":25},{"ruleId":"361","severity":1,"message":"448","line":79,"column":9,"nodeType":"363","messageId":"364","endLine":79,"endColumn":16},{"ruleId":"376","severity":1,"message":"378","line":89,"column":9,"nodeType":"367","endLine":89,"endColumn":33},{"ruleId":"361","severity":1,"message":"381","line":6,"column":10,"nodeType":"363","messageId":"364","endLine":6,"endColumn":17},"no-native-reassign",["449"],"no-negated-in-lhs",["450"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useRef' is defined but never used.","'M' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["451"],"React Hook useEffect has a missing dependency: 'getAllUsers'. Either include it or remove the dependency array. If 'getAllUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["452"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["453"],["454"],"'baseUrl' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'Messages', 'commentRecieved', 'receiveConversation', 'receiveMessage', 'refreshNotifications', 'updateHubId', and 'userId'. Either include them or remove the dependency array. If 'updateHubId' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["455"],"'setDateTime' is defined but never used.","'assignee' is assigned a value but never used.","'editAdditionalDetails' is assigned a value but never used.","'setEditAdditionalDetails' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getIncidentById'. Either include it or remove the dependency array. If 'getIncidentById' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["456"],"React Hook useEffect has a missing dependency: 'allAssignees'. Either include it or remove the dependency array.",["457"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'DayByDayCount' is defined but never used.","React Hook useEffect has missing dependencies: 'conversationsByUser' and 'userId'. Either include them or remove the dependency array. If 'conversationsByUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["458"],"React Hook useEffect has missing dependencies: 'Conversations' and 'selectConversation'. Either include them or remove the dependency array. If 'selectConversation' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["459"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'SelectedConversation', 'getUserNameById', 'messagesByConversations', and 'userId'. Either include them or remove the dependency array. If 'messagesByConversations' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["460"],"React Hook useEffect has missing dependencies: 'pageInformation' and 'setPageNumber'. Either include them or remove the dependency array. If 'setPageNumber' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["461"],"React Hook useEffect has a missing dependency: 'pageInformation'. Either include it or remove the dependency array.",["462"],"React Hook useEffect has missing dependencies: 'getNotifications' and 'userId'. Either include them or remove the dependency array. If 'getNotifications' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["463"],"'dateDifference' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'changeMessageStatus', 'isScrollDone', 'isSender', 'message.Id', and 'message.Status'. Either include them or remove the dependency array. If 'changeMessageStatus' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["464"],"React Hook useEffect has missing dependencies: 'observer' and 'refx'. Either include them or remove the dependency array.",["465"],"'keyPressedOnMessageText' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getOldest5UnresolvedIncidents'. Either include it or remove the dependency array. If 'getOldest5UnresolvedIncidents' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["466"],"React Hook useEffect has a missing dependency: 'getMostAssignedToUsers'. Either include it or remove the dependency array. If 'getMostAssignedToUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["467"],"React Hook useEffect has a missing dependency: 'drawChart'. Either include it or remove the dependency array.",["468"],"no-dupe-keys","Duplicate key 'title'.","ObjectExpression","React Hook useEffect has a missing dependency: 'getLast5IncidentsData'. Either include it or remove the dependency array. If 'getLast5IncidentsData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["469"],"React Hook useEffect has missing dependencies: 'getKPIData' and 'userId'. Either include them or remove the dependency array. If 'getKPIData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["470"],"React Hook useEffect has a missing dependency: 'getOverallWidgetData'. Either include it or remove the dependency array. If 'getOverallWidgetData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["471"],["472"],"'deleteAttachment' is defined but never used.","'moment' is defined but never used.","'history' is assigned a value but never used.","'qs' is defined but never used.","'data' is assigned a value but never used.","no-extend-native","Date prototype is read only, properties should not be added.","AssignmentExpression","'timeZone' is assigned a value but never used.","'files' is assigned a value but never used.","'setFiles' is assigned a value but never used.","'setDate' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},{"desc":"473","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"490","fix":"491"},{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"510","fix":"511"},{"desc":"512","fix":"513"},{"desc":"514","fix":"515"},"Update the dependencies array to be: [PageNumber, PageSize, Search, props]",{"range":"516","text":"517"},"Update the dependencies array to be: [getAllUsers, token]",{"range":"518","text":"519"},"Update the dependencies array to be: [props]",{"range":"520","text":"521"},{"range":"522","text":"517"},"Update the dependencies array to be: [Messages, commentRecieved, receiveConversation, receiveMessage, refreshNotifications, updateHubId, userId]",{"range":"523","text":"524"},"Update the dependencies array to be: [getIncidentById, match.params.id]",{"range":"525","text":"526"},"Update the dependencies array to be: [allAssignees, incidentData]",{"range":"527","text":"528"},"Update the dependencies array to be: [conversationsByUser, userId]",{"range":"529","text":"530"},"Update the dependencies array to be: [Conversations, ConversationsChanged, selectConversation]",{"range":"531","text":"532"},"Update the dependencies array to be: [SelectedConversation, SelectedConversationChanged, getUserNameById, messagesByConversations, userId]",{"range":"533","text":"534"},"Update the dependencies array to be: [pageInformation, search, setPageNumber]",{"range":"535","text":"536"},"Update the dependencies array to be: [currentPage, currentSize, TotalRecords, pageInformation]",{"range":"537","text":"538"},"Update the dependencies array to be: [getNotifications, userId]",{"range":"539","text":"540"},"Update the dependencies array to be: [changeMessageStatus, isScrollDone, isSender, isVisible, message.Id, message.Status]",{"range":"541","text":"542"},"Update the dependencies array to be: [observer, refx]",{"range":"543","text":"544"},"Update the dependencies array to be: [getOldest5UnresolvedIncidents]",{"range":"545","text":"546"},"Update the dependencies array to be: [getMostAssignedToUsers]",{"range":"547","text":"548"},"Update the dependencies array to be: [MostAssignedIncidentsData, drawChart]",{"range":"549","text":"550"},"Update the dependencies array to be: [getLast5IncidentsData]",{"range":"551","text":"552"},"Update the dependencies array to be: [getKPIData, userId]",{"range":"553","text":"554"},"Update the dependencies array to be: [getOverallWidgetData]",{"range":"555","text":"556"},"Update the dependencies array to be: [drawChart, overallWidgetData]",{"range":"557","text":"558"},[807,837],"[PageNumber, PageSize, Search, props]",[577,584],"[getAllUsers, token]",[758,760],"[props]",[1147,1177],[2332,2334],"[Messages, commentRecieved, receiveConversation, receiveMessage, refreshNotifications, updateHubId, userId]",[1710,1727],"[getIncidentById, match.params.id]",[2183,2197],"[allAssignees, incidentData]",[1136,1138],"[conversationsByUser, userId]",[1339,1361],"[Conversations, ConversationsChanged, selectConversation]",[1771,1800],"[SelectedConversation, SelectedConversationChanged, getUserNameById, messagesByConversations, userId]",[1498,1506],"[pageInformation, search, setPageNumber]",[1573,1613],"[currentPage, currentSize, TotalRecords, pageInformation]",[1075,1077],"[getNotifications, userId]",[747,758],"[changeMessageStatus, isScrollDone, isSender, isVisible, message.Id, message.Status]",[2097,2099],"[observer, refx]",[423,425],"[getOldest5UnresolvedIncidents]",[511,513],"[getMostAssignedToUsers]",[656,683],"[MostAssignedIncidentsData, drawChart]",[384,386],"[getLast5IncidentsData]",[345,347],"[getKPIData, userId]",[500,502],"[getOverallWidgetData]",[670,689],"[drawChart, overallWidgetData]"]