[{"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\index.js":"1","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\App.js":"2","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\reportWebVitals.js":"3","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\rootReducer.js":"4","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\NavBar.js":"5","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\UsersList.js":"6","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Login\\Login.js":"7","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\AddUser.js":"8","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\IncidentLisiting.js":"9","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\AddNew.js":"10","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\signalR\\Receiver.js":"11","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDetails.js":"12","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\Dashboard.js":"13","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\userLoginReducer.js":"14","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\usersReducer.js":"15","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\incidentsReducer.js":"16","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\notificationsReducer.js":"17","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\dashboardReducer.js":"18","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\messagesReducer.js":"19","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Messages.js":"20","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\User.js":"21","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Pages.js":"22","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\PageActions.js":"23","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\Incident.js":"24","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Notifications.js":"25","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\AssigneeDropdown.js":"26","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comments.js":"27","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OldestOpen.js":"28","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\DayByDayCount.js":"29","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OverallWidget.js":"30","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\LastFive.js":"31","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\MostAssignedByUser.js":"32","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\KPIBar.js":"33","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDescription.js":"34","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentTitle.js":"35","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\usersActions.js":"36","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\notificationsActions.js":"37","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\incidentsActions.js":"38","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\userLoginActions.js":"39","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\api\\apiURLs.js":"40","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\messagesActions.js":"41","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\SendMessage.js":"42","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\dashboardActions.js":"43","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comment.js":"44","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\signalR\\sender.js":"45","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\ComposeMessage.js":"46","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Reply.js":"47","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Message.js":"48","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Conversation.js":"49"},{"size":1161,"mtime":1636820537134,"results":"50","hashOfConfig":"51"},{"size":1980,"mtime":1644084377605,"results":"52","hashOfConfig":"51"},{"size":375,"mtime":1636820537134,"results":"53","hashOfConfig":"51"},{"size":639,"mtime":1638873118691,"results":"54","hashOfConfig":"51"},{"size":4264,"mtime":1645014767416,"results":"55","hashOfConfig":"51"},{"size":3955,"mtime":1642959935390,"results":"56","hashOfConfig":"51"},{"size":3142,"mtime":1643139629991,"results":"57","hashOfConfig":"51"},{"size":6483,"mtime":1636820537132,"results":"58","hashOfConfig":"51"},{"size":4923,"mtime":1642417449396,"results":"59","hashOfConfig":"51"},{"size":13235,"mtime":1639676203924,"results":"60","hashOfConfig":"51"},{"size":3139,"mtime":1645117005259,"results":"61","hashOfConfig":"51"},{"size":17723,"mtime":1642960494661,"results":"62","hashOfConfig":"51"},{"size":904,"mtime":1636820537127,"results":"63","hashOfConfig":"51"},{"size":1276,"mtime":1642959333756,"results":"64","hashOfConfig":"51"},{"size":839,"mtime":1636820537138,"results":"65","hashOfConfig":"51"},{"size":4705,"mtime":1636820537137,"results":"66","hashOfConfig":"51"},{"size":1171,"mtime":1636820537138,"results":"67","hashOfConfig":"51"},{"size":1213,"mtime":1636820537137,"results":"68","hashOfConfig":"51"},{"size":1232,"mtime":1645116965483,"results":"69","hashOfConfig":"51"},{"size":6886,"mtime":1645038757943,"results":"70","hashOfConfig":"51"},{"size":263,"mtime":1636820537132,"results":"71","hashOfConfig":"51"},{"size":4276,"mtime":1644065359485,"results":"72","hashOfConfig":"51"},{"size":1193,"mtime":1645009344614,"results":"73","hashOfConfig":"51"},{"size":2885,"mtime":1644085473470,"results":"74","hashOfConfig":"51"},{"size":5258,"mtime":1642439789065,"results":"75","hashOfConfig":"51"},{"size":5226,"mtime":1642960338082,"results":"76","hashOfConfig":"51"},{"size":3696,"mtime":1642960234798,"results":"77","hashOfConfig":"51"},{"size":2592,"mtime":1642960086151,"results":"78","hashOfConfig":"51"},{"size":2089,"mtime":1636820537127,"results":"79","hashOfConfig":"51"},{"size":4202,"mtime":1642959746727,"results":"80","hashOfConfig":"51"},{"size":2463,"mtime":1642960051069,"results":"81","hashOfConfig":"51"},{"size":4201,"mtime":1642413840919,"results":"82","hashOfConfig":"51"},{"size":1562,"mtime":1642959935391,"results":"83","hashOfConfig":"51"},{"size":4232,"mtime":1636820537129,"results":"84","hashOfConfig":"51"},{"size":3299,"mtime":1636820537130,"results":"85","hashOfConfig":"51"},{"size":1899,"mtime":1636820537137,"results":"86","hashOfConfig":"51"},{"size":1946,"mtime":1642958854181,"results":"87","hashOfConfig":"51"},{"size":8181,"mtime":1642959825263,"results":"88","hashOfConfig":"51"},{"size":3138,"mtime":1645014448716,"results":"89","hashOfConfig":"51"},{"size":2131,"mtime":1641668336982,"results":"90","hashOfConfig":"51"},{"size":5161,"mtime":1645117389266,"results":"91","hashOfConfig":"51"},{"size":3719,"mtime":1639738887015,"results":"92","hashOfConfig":"51"},{"size":3855,"mtime":1642959971898,"results":"93","hashOfConfig":"51"},{"size":5399,"mtime":1636820537128,"results":"94","hashOfConfig":"51"},{"size":2372,"mtime":1645113155934,"results":"95","hashOfConfig":"51"},{"size":3432,"mtime":1642442070330,"results":"96","hashOfConfig":"51"},{"size":2090,"mtime":1641923923365,"results":"97","hashOfConfig":"51"},{"size":611,"mtime":1641921696723,"results":"98","hashOfConfig":"51"},{"size":1943,"mtime":1642949534243,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"18lj646",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"102"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"102"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"102"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"102"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"102"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"102"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"102"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"102"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"102"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"102"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"102"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"102"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"102"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"102"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"102"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"102"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"102"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"102"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"102"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"102"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"102"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"102"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"102"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"102"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"102"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"102"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"102"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"102"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"102"},"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\index.js",[],["230","231"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\App.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\reportWebVitals.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\rootReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\NavBar.js",["232","233","234","235","236","237"],"import {React} from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/Navbar.css';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Notifications from './Notifications';\r\nimport { signOut } from \"../store/actions/userLoginActions\";\r\nimport logo from '../images/logo-white.png'\r\nimport { allUsers } from \"../store/actions/usersActions\";\r\n\r\nfunction NavBar({user_Name, loginError, token, signOut, getAllUsers, allUsers, UnreadConversations}) {\r\n\r\n  if (!token){\r\n    //alert(\"Your session has been expired. Please login again.\")\r\n    return <Redirect to='/' /> \r\n  } \r\n\r\n  if(allUsers == null || allUsers.length == 0)\r\n      getAllUsers();\r\n\r\n  const logOut = () => {\r\n    signOut();   \r\n  }\r\n  // if (loginError) return <Redirect to='/' /> \r\n   \r\n    return (\r\n      <nav className=\"nav-wrapper \">\r\n        <div className=\"container\">\r\n          <div className=\"left\">\r\n\r\n            <NavLink to=\"/dashboard\" className=\"brand-logo\">             \r\n              <img src={logo} />\r\n            </NavLink>\r\n          </div>\r\n          <a href=\"#\" className=\"sidenav-trigger\" data-target=\"mobile-menu\">\r\n            <i className=\"material-icons\">menu</i>\r\n          </a>\r\n          <ul className=\"right hide-on-med-and-down\">\r\n            <li>     \r\n              <NavLink to=\"/incidentListing\" >             \r\n                 Incidents\r\n              </NavLink> \r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/UsersList\" >             \r\n                   Users \r\n                </NavLink>              \r\n            </li> \r\n               \r\n            <li>     \r\n              <NavLink to=\"/messages\" className=\"message-nav \" >     \r\n                {/* <i className=\"material-icons  \">message</i> */}\r\n                Messages\r\n              \r\n              </NavLink> \r\n              \r\n            </li>    \r\n            {UnreadConversations > 0? (\r\n              <li>\r\n              <span className=\" badge white-text new  messages-badge\">{UnreadConversations}</span>\r\n            </li>  \r\n            )\r\n            : <></>}\r\n                       \r\n           \r\n              <Notifications />\r\n            <li>\r\n                <button type=\"button\" title={user_Name} className=\"btn-floating  orange darken-3 userWelcome\" >\r\n                  {user_Name.split(/\\s/).reduce((response,word)=> response+=word.slice(0,1),'')} \r\n                 </button>\r\n            </li>\r\n            <li className=\" singout-btn\">\r\n             <a> <i className=\"material-icons red-text\" onClick={() => logOut()}>logout</i> </a>\r\n            </li>\r\n          </ul>\r\n          {/* for mobile */}\r\n          <ul className=\"sidenav grey lighten-2\" id=\"mobile-menu\">\r\n            <li>\r\n              <NavLink to=\"/Messages\" className=\"sidenav-close\">\r\n                Messages\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/incidentListing\" className=\"sidenav-close\">\r\n                Incidents\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/UsersList\" className=\"sidenav-close\">\r\n                Users\r\n              </NavLink>\r\n            </li>\r\n\r\n            <li>\r\n              <a> <i className=\"material-icons\" onClick={signOut}>settings_power</i> </a>\r\n            </li>\r\n\r\n            <li>\r\n              <a href=\"\" className=\" white-text\">\r\n                <i className=\"material-icons\">notifications</i>\r\n                <span className=\"Indigo-text\">5</span>\r\n              </a>\r\n\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{      \r\n      user_Name :state.userLogin.user_Name, // Logged in User's name\r\n      userId :state.userLogin.userId,  // logged in User Id      \r\n      loginError : state.userLogin.loginError,\r\n      token : state.userLogin.token,\r\n      allUser: state.users.users,   \r\n      UnreadConversations : state.messages.UnreadConversations\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    signOut: () => dispatch(signOut()),\r\n    getAllUsers: () => dispatch(allUsers()),\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\UsersList.js",["238"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Pages from '../Pages'\r\nimport User from './User'\r\nimport PageActions from \"../PageActions\";\r\nimport { userssWithPage } from \"../../store/actions/usersActions\";\r\nimport {  useHistory  } from 'react-router-dom'\r\n\r\n function UsersList(props) {\r\n\r\n    const [PageNumber, setPageNumber] = useState(1);\r\n    const [PageSize, setPageSize] = useState(5);\r\n    const [Search, setSearch] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n    \r\n    useEffect(() => {\r\n        const parameters = {\r\n            PageNumber : PageNumber,\r\n            PageSize : PageSize,\r\n            Search : Search\r\n        }        \r\n        props.userssWithPage(parameters);\r\n        return () => {\r\n            \r\n        }\r\n    }, [PageNumber, PageSize, Search])\r\n\r\n    const searchTextChange =   (text) => {      \r\n            setSearch(text);\r\n            setPageNumber(1);\r\n    }\r\n\r\n    const addNewClick = ()=>{\r\n      let path = '/AddUser';      \r\n      history.push(path);\r\n    }\r\n    \r\n    if( !props.Users){\r\n      return (\r\n        <div className=\"preloader-wrapper container big active page-loader\">\r\n        <div className=\"spinner-layer spinner-blue-only\">\r\n          <div className=\"circle-clipper left\">\r\n            <div className=\"circle\"></div>\r\n          </div><div className=\"gap-patch\">\r\n            <div className=\"circle\"></div>\r\n          </div><div className=\"circle-clipper right\">\r\n            <div className=\"circle\"></div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n      )\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Users\"} /> \r\n\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n\r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">                \r\n                  <input type=\"text\"  value={Search}  onChange={(e) => searchTextChange(e.target.value)} />\r\n                  <label htmlFor=\"search\">Search</label>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">              \r\n                  <button className=\"btn green darken-4 right\" onClick={()=>addNewClick()} >\r\n                    <span>Add New</span>\r\n                    <i className=\"material-icons right\">create</i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col s12 l12\">\r\n                <table className=\"responsive-table highlight incidentsTbl\">\r\n                  <thead>\r\n                    <tr className=\"header\" data-target=\"blue\">\r\n                      <th>First Name</th>\r\n                      <th>Last Name</th>\r\n                      <th>Email</th>                      \r\n                      <th>Created Date</th>                     \r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  {\r\n                   !props.Users? null : props.Users.map(user=>{\r\n                          return (\r\n                            <User key={user.Id} user= {user} />                          )\r\n                      })\r\n                  }           \r\n                  </tbody>\r\n                </table>\r\n                <Pages  TotalRecords={props.TotalUsers} PostsPerPage={PageSize} setPageNumber={setPageNumber} setPageSize={setPageSize} search={Search} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        Users : state.users.UsersList,\r\n        TotalUsers : state.users.TotalUsers     \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        userssWithPage: (parameters) => dispatch(userssWithPage(parameters))\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(UsersList);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Login\\Login.js",["239","240"],"import {React, useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { logIn } from '../../store/actions/userLoginActions'\r\nimport { Redirect } from 'react-router-dom'\r\nimport '../../styles/loginStyles.css'\r\nimport logo from '../../images/logoBigWhite.png'\r\nimport logoSmall from '../../images/logoColored.png'\r\n\r\n\r\n function Login(props) {\r\n     const [username , setUsername] = useState('');\r\n     const [password , setPassword] = useState('');\r\n\r\n   function loginClick(e){\r\n        e.preventDefault();   \r\n        let credentials = {\r\n            username,\r\n            password\r\n        }  \r\n        props.logIn(credentials);       \r\n   }\r\n\r\n    if (props.token) return <Redirect to='/dashboard' /> \r\n     \r\n    return (\r\n      <div className=\"\">\r\n     \r\n        <div className=\"row \">\r\n        \r\n        <div className=\"col l6 hide-on-med-and-down \">\r\n          <div className=\"logo-Container\">\r\n               <img src={logo}/>\r\n          </div>          \r\n        </div> \r\n\r\n          <div className=\"col s12 m8 offset-m2 l6\">\r\n            <div className=\"form-container\">\r\n            {/* <h3> WELCOME!</h3>\r\n            <br /> */}\r\n              <img className='hide-on-large-only' src={logoSmall}/>\r\n            <h4>User Login</h4>\r\n            <br />\r\n            <form>\r\n              <div className=\"input-field\">\r\n                <i className=\"material-icons prefix\">person</i>\r\n                <input type=\"text\" id=\"username\" onChange={(e) => setUsername(e.target.value)} />\r\n                <label htmlFor=\"username\" >\r\n                  Your Username\r\n                </label>\r\n              </div>\r\n              <div className=\"input-field\">\r\n                <i className=\"material-icons prefix\">password</i>\r\n                <input type=\"password\" id=\"password\"  onChange={(e) => setPassword(e.target.value)} />\r\n                <label htmlFor=\"password\">Your Password</label>\r\n              </div>\r\n              <div className=\"input-field\">\r\n                <a href=\"/\"> Forgot password?</a>\r\n              </div>\r\n              <div className=\"input-field \">              \r\n                  <p className=\"red-text\">{props.loginError? \"Incorret username or password.\" : \"\" }</p>\r\n              </div>\r\n              <div className=\"input-field \">\r\n                <button className=\"btn indigo darken-2 right\" onClick={(e)=>loginClick(e)}>\r\n                  <span>Login</span>\r\n                  <i className=\"material-icons right\">send</i>\r\n                </button>\r\n              </div>             \r\n            </form>\r\n          </div>\r\n          </div>\r\n        </div>      \r\n      </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        user_Name :state.userLogin.user_Name,\r\n        userId :state.userLogin.userId,\r\n        userLogin : state.userLogin.userLogin,\r\n        loginError : state.userLogin.loginError,\r\n        token : state.userLogin.token  \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        logIn: (creds) => dispatch(logIn(creds))\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Login);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\AddUser.js",["241","242"],"import {React , useRef, useEffect, useState} from 'react';\r\nimport PageActions from \"../PageActions\";\r\nimport M from 'materialize-css';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { addNewUser } from '../../store/actions/usersActions';\r\n\r\n\r\n function AddUser({addNewUser}){\r\n\r\n\r\n    const history = useHistory();\r\n\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [lastName, setLastName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");  \r\n    const [phone, setPhone] = useState(\"\");  \r\n    const [profilePic , setProfilePic] = useState(null);\r\n\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    useEffect(() => {     \r\n       \r\n      \r\n    }, []);\r\n\r\n   const onFileChange = (event) => {    \r\n     \r\n    setProfilePic(event.target.files);\r\n   };\r\n\r\n   const cancelClick = (event) => {\r\n     event.preventDefault();\r\n     history.goBack();\r\n     //console.log(history);\r\n   };\r\n\r\n   const validateForm = () => {\r\n\r\n    if(firstName === \"\" || lastName === \"\" || email === \"\"  || phone === \"\" )\r\n        return false;\r\n    return true;\r\n\r\n   }\r\n\r\n   const saveClick = (event) => {\r\n    event.preventDefault();     \r\n    if(!validateForm()){\r\n      setFormError(\"Please complete required fields before saving.\")\r\n      return;\r\n    }\r\n    \r\n    setFormError(\"\");\r\n   \r\n   \r\n    const formData = new FormData(); \r\n\r\n    if(profilePic){\r\n       \r\n          formData.append( \r\n            \"Attachment1\", \r\n            profilePic[0], \r\n            profilePic[0].name \r\n          );\r\n          }\r\n     formData.append(\"FirstName\", firstName); \r\n     formData.append(\"LastName\", lastName);\r\n     formData.append(\"Email\", email); \r\n     formData.append(\"Phone\", email); \r\n     addNewUser(formData);\r\n  }; \r\n\r\n \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Add new User\"} />\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 l10 offset-l1\">\r\n                <form>\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 l6\">\r\n                      <div className=\"input-field \">\r\n                        <input\r\n                         className=\"validate\"\r\n                          required\r\n                          type=\"text\"\r\n                          id=\"firstName\"\r\n                          value={firstName}\r\n                          onChange={(e) => setFirstName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s12 l6\">                    \r\n                        <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"lastName\"\r\n                            value={lastName}\r\n                            onChange={(e) => setLastName(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"lastName\">Last Name</label> \r\n                    </div>\r\n                                      \r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"email\">Email</label> \r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                         <input\r\n                            className=\"validate\"\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"phone\"\r\n                            value={phone}\r\n                            onChange={(e) => setPhone(e.target.value)}\r\n                            />\r\n                            <label htmlFor=\"phone\">Phone</label> \r\n                  </div>\r\n\r\n                  <div className=\"file-field input-field\">\r\n                    <div className=\"btn indigo darken-2\">\r\n                      <i className=\"material-icons \">attachment</i>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"attachment\"                        \r\n                        onChange={onFileChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                      <input\r\n                        className=\"file-path validate\"\r\n                        type=\"text\"\r\n                        placeholder=\"Upload profile picture\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-field\">\r\n                      <p className=\"red-text center\">{formError ? formError : \"\" }</p>\r\n                  </div>\r\n\r\n                  \r\n                  <div className=\"input-field \">\r\n                    <button\r\n                      className=\"btn green darken-2 left\"\r\n                      onClick={saveClick}\r\n                    >\r\n                      <span>Save</span>\r\n                      <i className=\"material-icons right\">save</i>\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn yellow darken-4 left\"\r\n                      onClick={cancelClick}\r\n                    >\r\n                      <span>Cancel</span>\r\n                      <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{\r\n        allAssignees : state.users.users,\r\n        user_Name :state.userLogin.user_Name, // Logged in User's name\r\n        userId :state.userLogin.userId,  // logged in User Id       \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {       \r\n        addNewUser : (formData) => dispatch(addNewUser(formData))\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUser);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\IncidentLisiting.js",["243","244"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Pages from '../../Pages'\r\nimport Incident from './Incident'\r\nimport PageActions from \"../../PageActions\";\r\nimport { allUsers } from \"../../../store/actions/usersActions\";\r\nimport { incidentsWithPage, cancel } from \"../../../store/actions/incidentsActions\";\r\nimport {  useHistory  } from 'react-router-dom';\r\n\r\n\r\n function IncidentLisiting(props) {\r\n   \r\n    const [PageNumber, setPageNumber] = useState(1);\r\n    const [PageSize, setPageSize] = useState(5);\r\n    const [Search, setSearch] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n      props.getAllAssignees();      \r\n    }, []);\r\n\r\n\r\n   \r\n    useEffect(() => {\r\n        const parameters = {\r\n            PageNumber : PageNumber,\r\n            PageSize : PageSize,\r\n            Search : Search            \r\n        }        \r\n        setLoading(true);\r\n        props.incidentsWithPage(parameters);\r\n        setLoading(false);\r\n        return () => {\r\n          cancel();        // cancel axios  \r\n        }\r\n    }, [PageNumber, PageSize, Search])\r\n\r\n    const searchTextChange =   (text) => {      \r\n            setSearch(text);\r\n            setPageNumber(1);\r\n    }\r\n\r\n    const addNewClick = ()=>{\r\n      const data = false;\r\n      props.dispatch({ type: 'NEW_INCIDENT_STATUS', data });\r\n      let path = '/AddNew';      \r\n      history.push(path);\r\n    }\r\n\r\n    const getUserNameById = (id) => {   \r\n      let user = props.allAssignees.find((assignee) => {\r\n        return assignee.Id === id;\r\n      });   \r\n      if(!user){    \r\n        return id;\r\n      }\r\n      return user.FirstName + \" \" + user.LastName\r\n    }\r\n\r\n    if(props.Error!==\"\"){\r\n      return (\r\n        <div className=\"container\">\r\n          <h1 className=\"center red-text\">Error</h1>\r\n          <h5 className=\"center\">{props.Error}</h5>\r\n          <p className=\"center\">Please check your network and try loging back.</p>\r\n        </div>\r\n      )\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Incidents\"} /> \r\n        { loading? <h1>Loading</h1> : null}\r\n        { props.TotalIncidents === 0? <h1>Zero</h1> : null}\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n\r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">                \r\n                  <input type=\"text\" id=\"search\" value={Search}  onChange={(e) => searchTextChange(e.target.value)} />\r\n                  <label htmlFor=\"search\">Search</label>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"col s6 l6\">\r\n                <div className=\"input-field\">              \r\n                  <button className=\"btn green darken-4 right\" onClick={()=>addNewClick()} >\r\n                    <span>Add New</span>\r\n                    <i className=\"material-icons right\">create</i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col s12 l12\">\r\n                <table className=\"responsive-table highlight incidentsTbl\">\r\n                  <thead>\r\n                    <tr className=\"header\" data-target=\"blue\">\r\n                      <th>Title</th>\r\n                      <th>Description</th>\r\n                      <th>Assigned TO</th>\r\n                      <th>Created By</th>\r\n                      <th>Created Date</th>\r\n                      <th>Due Date</th>\r\n                      <th>Status</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  {\r\n                      props.Incidents.map(incident=>{\r\n                          return (\r\n                            <Incident key={incident.Id} incident= {incident} getUserNameById={getUserNameById} />                          )\r\n                      })\r\n                  }           \r\n                  </tbody>\r\n                </table>\r\n                <Pages  TotalRecords={props.TotalIncidents} PostsPerPage={PageSize} setPageNumber={setPageNumber} setPageSize={setPageSize} search={Search} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        allAssignees: state.users.users,\r\n        Incidents : state.incidents.Incidents,\r\n        TotalIncidents : state.incidents.TotalIncidents,\r\n        Error : state.incidents.IncidentsError   // if there is an error while getting data from API\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        incidentsWithPage: (parameters) => dispatch(incidentsWithPage(parameters)),\r\n        getAllAssignees: () => dispatch(allUsers()),\r\n        dispatch:dispatch\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(IncidentLisiting);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\AddNew.js",["245"],"import {React , useRef, useEffect, useState} from 'react';\r\nimport PageActions from \"../PageActions\";\r\nimport M from 'materialize-css';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { allUsers } from '../../store/actions/usersActions';\r\nimport { addNewIncident } from '../../store/actions/incidentsActions';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n function AddNew({getAllAssignees, allAssignees, userId, addNewIncident, addNewError, AddNewIncidentStatus}) {\r\n\r\n    const dueDateTimeRef= useRef();\r\n    const dueDateDateRef= useRef();\r\n    const startTimeTimeRef = useRef();\r\n    const startTimeDateRef = useRef();\r\n    const assigneeRef = useRef();   \r\n   \r\n\r\n    const history = useHistory();\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [additionalDetails, setAdditionalDetails] = useState(\"\");  \r\n    const [files , setFiles] = useState(null);\r\n    const [assignee, setAssignee] = useState(null);  \r\n    const [assigneeName, setAssigneeName] = useState(\"\");  \r\n    const [assigneeList, setAssigneeList] = useState(allAssignees);\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n      console.log(\"Set hook\");\r\n      setAssigneeList(allAssignees);\r\n    }, [allAssignees])\r\n\r\n    useEffect(() => {      \r\n        M.Datepicker.init(startTimeDateRef.current);\r\n        M.Timepicker.init(startTimeTimeRef.current);\r\n        M.Datepicker.init(dueDateDateRef.current);\r\n        M.Timepicker.init(dueDateTimeRef.current);\r\n        var options = {\r\n          closeOnClick : false\r\n        }\r\n        M.Dropdown.init(assigneeRef.current, options);\r\n        getAllAssignees();\r\n    }, []);\r\n\r\n   const onFileChange = (event) => {    \r\n     if (event.target.files.length > 3) {\r\n       //alert(\"You can only attach upto 3 files. All extra files will be ignored.\");\r\n     }     \r\n     setFiles(event.target.files);\r\n   };\r\n\r\n   const cancelClick = (event) => {\r\n     event.preventDefault();\r\n     history.goBack();\r\n     //console.log(history);\r\n   };\r\n\r\n\r\n   const assigneeSelected = (event, userId) => {    \r\n    event.preventDefault();   \r\n    let currentAssignee = allAssignees.find(assignee => {\r\n        return assignee.Id === userId\r\n    })\r\n    console.log(currentAssignee);\r\n    var assigneeDropdown = M.Dropdown.getInstance(assigneeRef.current);\r\n    assigneeDropdown.close();\r\n    setAssignee(userId);\r\n    setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);\r\n   }\r\n\r\n   const searchAssignee = (event) => {    \r\n     let newList = [];\r\n     if(event.target.value !== \"\")\r\n        newList = allAssignees.filter(assignee => {    \r\n        return assignee.FirstName.toUpperCase().startsWith(event.target.value.toUpperCase()) \r\n            || assignee.LastName.toUpperCase().startsWith(event.target.value.toUpperCase());\r\n      });\r\n    \r\n     if(newList !== undefined && newList.length !== 0){ //check if there is atlease one assignee       \r\n      newList = [].concat(newList); \r\n     }\r\n     else{//if search found nothing, show all assignees\r\n        newList = allAssignees.slice(0,allAssignees.length);       \r\n     } \r\n     setAssigneeList(newList);   \r\n   }\r\n\r\n   const validateForm = () => {\r\n\r\n    if(title === \"\" || description ===\"\" || dueDateDateRef.current.value === \"\" || dueDateTimeRef.current.value === \"\"\r\n        || startTimeDateRef.current.value === \"\" || startTimeTimeRef.current.value === \"\"  )\r\n        return false;\r\n    return true;\r\n\r\n   }\r\n\r\n   const saveClick = (event) => {\r\n    event.preventDefault();     \r\n    if(!validateForm()){\r\n      setFormError(\"Please complete required fields before saving.\")\r\n      return;\r\n    }\r\n    \r\n    setFormError(\"\");\r\n\r\n    let startTime  = new Date( startTimeDateRef.current.value + \" \" + startTimeTimeRef.current.value);\r\n    startTime = (startTime.getMonth() + 1) + \"/\" + startTime.getDate() + \"/\" +  startTime.getFullYear() \r\n                + \" \" + startTime.getHours() + \":\" + startTime.getMinutes() + \":\" + startTime.getSeconds(); \r\n\r\n    let dueDate  = new Date( dueDateDateRef.current.value + \" \" + dueDateTimeRef.current.value);\r\n    dueDate = (dueDate.getMonth() + 1) + \"/\" + dueDate.getDate() + \"/\" +  dueDate.getFullYear() \r\n                + \" \" + dueDate.getHours() + \":\" + dueDate.getMinutes() + \":\" + dueDate.getSeconds(); \r\n   \r\n    const formData = new FormData(); \r\n\r\n    if(files){\r\n        for(let i = 0; i < files.length ; i++){\r\n          formData.append( \r\n            \"Attachment\" + i+1, \r\n            files[i], \r\n            files[i].name \r\n          );\r\n        }\r\n    }   \r\n     formData.append(\"CreatedBy\", userId); \r\n     formData.append(\"AssignedTo\", assignee);\r\n     formData.append(\"Title\", title); \r\n     formData.append(\"Description\", description); \r\n     formData.append(\"AdditionalDeta\", additionalDetails); \r\n     formData.append(\"StartTime\", startTime ); \r\n     formData.append(\"DueDate\",  dueDate ); \r\n     formData.append(\"Status\", \"N\"); \r\n\r\n     \r\n     //setTitle(\"\");\r\n\r\n     addNewIncident(formData);\r\n    // setTitle(\"\");\r\n     //setDescription(\"\");     \r\n\r\n  }; \r\n\r\n  if(AddNewIncidentStatus){\r\n    return <Redirect to='/incidentListing' /> \r\n  }\r\n \r\n    return (\r\n      <>\r\n        <PageActions Title={\"Add new Incident\"} />\r\n        <section>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col s12 l10 offset-l1\">\r\n                <form>\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 l6\">\r\n                      <div className=\"input-field \">\r\n                        <input\r\n                        className=\"validate\"\r\n                          required\r\n                          type=\"text\"\r\n                          id=\"title\"\r\n                          value={title}\r\n                          onChange={(e) => setTitle(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"title\">Title</label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s12 l6\">                    \r\n                      <input\r\n                        readOnly                    \r\n                        required\r\n                        type=\"text\"\r\n                        className=\"dropdown-trigger validate\"\r\n                        id=\"assignee\"\r\n                        data-target=\"dropdown1\"\r\n                        placeholder=\"\"\r\n                        ref={assigneeRef}\r\n                        value={assigneeName}\r\n                      />                    \r\n                      \r\n                       <label htmlFor=\"assignee\">Assignee </label> \r\n                    </div>\r\n                      <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <li>\r\n                          <input type=\"text\"  placeholder=\"Search Assignee\" onChange={searchAssignee}     />\r\n                        </li>\r\n                        {!assigneeList? null : assigneeList.map((user) => {\r\n                          return (\r\n                            <li  key={user.Id} onClick= {(event)=>assigneeSelected(event,user.Id)}>\r\n                              <a className=\"indigo-text\" href=\"#!\">  {user.FirstName + \" \" + user.LastName}    </a>\r\n                            </li>\r\n                          );\r\n                        })}\r\n                      </ul>                   \r\n                  </div>\r\n                  <div className=\"input-field\">\r\n                    <textarea\r\n                      required\r\n                      value={description}\r\n                      id=\"description\"\r\n                      className=\"materialize-textarea validate\"\r\n                      onChange={(e) => setDescription(e.target.value)}\r\n                    ></textarea>\r\n                    <label htmlFor=\"description\" className=\"\">\r\n                      Description\r\n                    </label>\r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                    <textarea\r\n                      value={additionalDetails}\r\n                      id=\"additionalDetails\"\r\n                      className=\"materialize-textarea\"\r\n                      onChange={(e) => setAdditionalDetails(e.target.value)}\r\n                    ></textarea>\r\n                    <label htmlFor=\"additionalDetails\" className=\"\">\r\n                      Additional Details\r\n                    </label>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"startTimeDate\"\r\n                        className=\"datepicker validate\"\r\n                        ref={startTimeDateRef}\r\n                      />\r\n                      <label htmlFor=\"startTimeDate\" className=\"\">\r\n                      Start Time (Pick Date)\r\n                      </label>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"startTimeTime\"\r\n                        className=\"timepicker validate\"\r\n                        ref={startTimeTimeRef}\r\n                      />\r\n                      <label htmlFor=\"startTimeime\" className=\"\">\r\n                       Start Time (Pick Time)\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"dueDateDate\"\r\n                        className=\"datepicker validate\"\r\n                        ref={dueDateDateRef}\r\n                      />\r\n                      <label htmlFor=\"dueDateDate\" className=\"\">\r\n                        Due Date (Pick Date)\r\n                      </label>\r\n                    </div>\r\n\r\n                    <div className=\"input-field col s6\">\r\n                      <input\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"dueDateTime\"\r\n                        className=\"timepicker validate\" \r\n                        ref={dueDateTimeRef}\r\n                      />\r\n                      <label htmlFor=\"dueDateTime\" className=\"\">\r\n                        Due Date (Pick Time)\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"file-field input-field\">\r\n                    <div className=\"btn indigo darken-2\">\r\n                      <i className=\"material-icons \">attachment</i>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"attachment\"\r\n                        multiple\r\n                        onChange={onFileChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                      <input\r\n                        className=\"file-path validate\"\r\n                        type=\"text\"\r\n                        placeholder=\"Upload upto 3 files\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-field\">\r\n                      <p className=\"red-text center\">{formError ? formError : \"\" }</p>\r\n                      <p className=\"red-text center\">{addNewError}</p>\r\n                      \r\n                  </div>\r\n\r\n                  \r\n                  <div className=\"input-field \">\r\n                    <button\r\n                      className=\"btn green darken-2 left\"\r\n                      onClick={saveClick}\r\n                    >\r\n                      <span>Save</span>\r\n                      <i className=\"material-icons right\">save</i>\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"btn yellow darken-4 left\"\r\n                      onClick={cancelClick}\r\n                    >\r\n                      <span>Cancel</span>\r\n                      <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{\r\n        allAssignees : state.users.users,\r\n        user_Name :state.userLogin.user_Name, // Logged in User's name\r\n        userId :state.userLogin.userId,  // logged in User Id      \r\n        addNewError :state.incidents.AddNewIncidentError, \r\n        AddNewIncidentStatus :state.incidents.AddNewIncidentStatus \r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getAllAssignees: () => dispatch(allUsers()),\r\n        addNewIncident : (formData) => dispatch(addNewIncident(formData))\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNew);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\signalR\\Receiver.js",["246","247"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDetails.js",["248","249","250","251","252","253"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport PageActions from \"../../PageActions\";\r\nimport M from \"materialize-css\";\r\nimport { connect } from \"react-redux\";\r\nimport { allUsers } from \"../../../store/actions/usersActions\";\r\nimport { getIncidentById, updateIncident, deleteAttachment } from \"../../../store/actions/incidentsActions\";\r\nimport Comments from \"./Comments\";\r\nimport  AssigneeDropdown  from \"../AssigneeDropdown\";\r\nimport \"../../../styles/incidentDetails.css\";\r\nimport moment from \"moment\";\r\nimport { incidentsUrls } from \"../../../api/apiURLs\";\r\nimport IncidentTitle from \"./IncidentTitle\";\r\nimport IncidentDescription from \"./IncidentDescription\";\r\n\r\nfunction IncidentDetails({\r\n  match,\r\n  incidentData,\r\n  getIncidentById,\r\n  allAssignees,\r\n  getAllAssignees,\r\n  userId,\r\n  updateIncident,\r\n  deleteAttachment,\r\n  IncidentDetailError\r\n  \r\n}) { \r\n\r\n  const [assignee, setAssignee] = useState(null);\r\n  const [status, setStatus] = useState('N');\r\n  const [dueDate, setDueDate] = useState('');\r\n  const [startTime, setStartTime] = useState('');\r\n  \r\n  const [assigneeName, setAssigneeName] = useState(\"\");  \r\n\r\n\r\n  const [editAdditionalDetails, setEditAdditionalDetails] = useState(false);\r\n  const [editDueDate, setEditDueDate] = useState(false);\r\n  const [editStartDate, setEditStartDate] = useState(false);\r\n  \r\n  const statusRef = useRef();\r\n  const dueDateTimeRef= useRef();\r\n  const dueDateDateRef= useRef();\r\n  const startTimeTimeRef = useRef();\r\n  const startTimeDateRef = useRef();\r\n\r\n  useEffect(() => {\r\n    setMaterializeCSS();\r\n  }, [incidentData]);\r\n\r\n  useEffect(() => {    \r\n    getIncidentById(match.params.id);   \r\n  }, [match.params.id]); // whenever Id changes get new\r\n\r\n  useEffect(() => {  // To update Fields\r\n    if(incidentData){   \r\n      let currentAssignee =  allAssignees.find((assignee) => {\r\n        return assignee.Id === incidentData.AssignedTo;\r\n      });\r\n      setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);  \r\n      setStatus(incidentData.Status);\r\n      setDueDate(incidentData.DueDate);\r\n      setStartTime(incidentData.StartTime);\r\n    }\r\n  }, [incidentData]);\r\n\r\n  const setMaterializeCSS = () => { \r\n    M.FormSelect.init(statusRef.current);\r\n    M.Datepicker.init(startTimeDateRef.current);\r\n    M.Timepicker.init(startTimeTimeRef.current);\r\n    M.Datepicker.init(dueDateDateRef.current);\r\n    M.Timepicker.init(dueDateTimeRef.current);\r\n  }\r\n\r\n  const getNameById = (id) => {   \r\n    let user = allAssignees.find((assignee) => {\r\n      return assignee.Id === id;\r\n    });   \r\n    if(!user){    \r\n      return id;\r\n    }\r\n    return user.FirstName + \" \" + user.LastName\r\n  }\r\n \r\n  const downloadFile = (file) => {\r\n    console.log(file);\r\n    window.open(\r\n          incidentsUrls.downloadFileUrl\r\n           + \"type=incident\"\r\n           + \"&commentId=\" + \"\" \r\n           + \"&incidentId=\" + incidentData.Id\r\n           + \"&filename=\" + file.FileName\r\n           + \"&contentType=\" + file.ContentType\r\n    ); \r\n  }\r\n  \r\n  const dueDateEditClick = () =>{\r\n    setEditDueDate(!editDueDate);\r\n    setMaterializeCSS();\r\n  }\r\n  const dueDateEditCancel = () =>{\r\n    setEditDueDate(false);\r\n  }\r\n\r\n  const dueDateEditSave = () =>{    \r\n    if ( dueDateDateRef.current.value === \"\" ||  dueDateTimeRef.current.value === \"\" ) {\r\n      alert(\"Please select date and time.\");\r\n      setEditDueDate(false);\r\n      return;\r\n    } \r\n\r\n    let dueDateTemp  = new Date( dueDateDateRef.current.value + \" \" + dueDateTimeRef.current.value);\r\n    dueDateTemp = (dueDateTemp.getMonth() + 1) + \"/\" + dueDateTemp.getDate() + \"/\" +  dueDateTemp.getFullYear() \r\n                + \" \" + dueDateTemp.getHours() + \":\" + dueDateTemp.getMinutes() + \":\" + dueDateTemp.getSeconds(); \r\n      updateIncidentByField(\"DueDate\" , dueDateTemp);     \r\n      setEditDueDate(false);\r\n      setDueDate(dueDateTemp);\r\n   }\r\n\r\n  const startDateEditClick = () =>{\r\n    setEditStartDate(!editStartDate);\r\n    setMaterializeCSS();\r\n  }\r\n  const startDateEditCancel = () =>{\r\n    setEditStartDate(false);\r\n  }\r\n\r\n  const startDateEditSave = () =>{\r\n  \r\n   if ( startTimeDateRef.current.value === \"\" ||  startTimeTimeRef.current.value === \"\" ) {\r\n    alert(\"Please select date and time.\");\r\n    setEditStartDate(false);\r\n    return;\r\n  } \r\n\r\n  let startTimeTemp  = new Date( startTimeDateRef.current.value + \" \" + startTimeTimeRef.current.value);\r\n  startTimeTemp = (startTimeTemp.getMonth() + 1) + \"/\" + startTimeTemp.getDate() + \"/\" +  startTimeTemp.getFullYear() \r\n                + \" \" + startTimeTemp.getHours() + \":\" + startTimeTemp.getMinutes() + \":\" + startTimeTemp.getSeconds();  \r\n    updateIncidentByField(\"StartTime\" , startTimeTemp);   \r\n    setEditStartDate(false); \r\n    setStartTime(startTimeTemp);  \r\n  }\r\n\r\n  const updateIncidentByField = (field , value) => {    \r\n    let parameters = {\r\n      IncidentId : incidentData.Id,\r\n      Parameter : field,\r\n      Value : value,\r\n      UserId : userId\r\n    };\r\n    updateIncident(parameters); // Calling action here\r\n  }\r\n\r\n  const statusChanged = (e) => {\r\n    setStatus(e.target.value);\r\n    updateIncidentByField(\"Status\" , e.target.value);\r\n  }\r\n\r\n  const deleteIncidentAttachment = (file) => {        \r\n    if(window.confirm(\"Are you sure you want to delete this attachment.\" + file.FileName)){\r\n      deleteAttachment(\"incicent\" , userId, incidentData.Id , file);\r\n    }      \r\n   }\r\n\r\n   if(IncidentDetailError !== \"\"){\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"center red-text\">Error</h1>\r\n        <h5 className=\"center\">{IncidentDetailError}</h5>\r\n        <p className=\"center\">Please check your network and try loging back.</p>\r\n      </div>\r\n    )\r\n   }\r\n\r\n  if (!incidentData || !allAssignees) {    \r\n    return  ( \r\n     \r\n              <div className=\"preloader-wrapper container big active page-loader\">\r\n                <div className=\"spinner-layer spinner-blue-only\">\r\n                  <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                  </div><div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                  </div><div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n          );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <link rel=\"stylesheet\" href=\"./Styles/incidentDetails.css\"></link>\r\n      <PageActions Title={\"Incident Details\"} />\r\n      <section>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col s12 l12 \">\r\n            <IncidentTitle getNameById={getNameById} />\r\n             <div className=\"row\">\r\n                <div className=\"col s12 l6\">\r\n              <IncidentDescription type=\"description\" />\r\n              <IncidentDescription type=\"additionaldata\" />\r\n                  \r\n                  <p className=\"heading left-align indigo-text darken-4\">\r\n                    {\" \"}\r\n                    {/*  Attachments */}\r\n                    <i className=\"material-icons inline-icon\">attachment</i>\r\n                    Attachments:\r\n                  </p>\r\n\r\n                  <div className=\"input-field\">\r\n                    <ul className=\"input-field incidentFiles\">\r\n                      {!incidentData.Attachments\r\n                        ? null\r\n                        : incidentData.Attachments.map((file) => {\r\n                            return (\r\n                              <li\r\n                                key={file.Id}\r\n                                className=\"center indigo-text darken-4\"\r\n                              >\r\n                                <i\r\n                                  title=\"Remove\"\r\n                                  className=\"actions-icon material-icons red-text inline-icon\"\r\n                                  onClick={() => deleteIncidentAttachment(file)}\r\n                                >\r\n                                  cancel\r\n                                </i>\r\n                                <span\r\n                                  title={file.FileName}\r\n                                  onClick={() => downloadFile(file)}\r\n                                >\r\n                                  {file.FileName.length > 35\r\n                                    ? file.FileName.slice(0, 35) + \"...\"\r\n                                    : file.FileName}\r\n                                </span>\r\n                              </li>\r\n                            );\r\n                          })}\r\n                    </ul>\r\n                  </div>\r\n\r\n                  <Comments\r\n                    userId={userId}\r\n                    incidentId={incidentData.Id}\r\n                    comments={incidentData.Comments}\r\n                    getNameById={getNameById}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col s12 l5 offset-l1  ID-dropdowns\">\r\n                  <table>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Assignee\r\n                          </p>\r\n                        </td>\r\n                        <td>                         \r\n                          <AssigneeDropdown\r\n                            updateIncidentByField={updateIncidentByField}\r\n                            setAssignee={setAssignee}\r\n                            assigneeName = {assigneeName}\r\n                            setAssigneeName = {setAssigneeName}\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Status{\" \"}\r\n                          </p>\r\n                        </td>\r\n                        <td>\r\n                          <select\r\n                            ref={statusRef}\r\n                            value={status}\r\n                            onChange={statusChanged}\r\n                          >\r\n                            <option value=\"N\" disabled >\r\n                              New\r\n                            </option>\r\n                            <option value=\"I\">In Progress</option>\r\n                            <option value=\"C\">Closed</option>\r\n                            <option value=\"A\">Approved</option>\r\n                          </select>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Due Date\r\n                            <i\r\n                              className=\"actions-icon inline-icon material-icons\"\r\n                              onClick={dueDateEditClick}\r\n                            >\r\n                              edit\r\n                            </i>\r\n                          </p>\r\n                        </td>\r\n                        <td>\r\n                          {!editDueDate ? (\r\n                            <p\r\n                              title={moment(dueDate).format(\r\n                                \"MMMM DD YYYY, h:mm a\"\r\n                              )}\r\n                            >\r\n                              {moment(dueDate).fromNow()}\r\n                            </p>\r\n                          ) : null}\r\n                          <div className={editDueDate ? \"\" : \"hide\"}>\r\n                            <div className=\"input-field \">\r\n                              <input\r\n                                type=\"text\"\r\n                                id=\"dueDateDate\"\r\n                                className=\"datepicker\"\r\n                                ref={dueDateDateRef}\r\n                              />\r\n                              <label htmlFor=\"dueDateDate\" className=\"\">\r\n                                Pick Date\r\n                              </label>\r\n                            </div>\r\n                            <div className=\"input-field \">\r\n                              <input\r\n                                type=\"text\"\r\n                                id=\"dueDateTime\"\r\n                                className=\"timepicker\"\r\n                                ref={dueDateTimeRef}\r\n                              />\r\n                              <label htmlFor=\"dueDateTime\" className=\"\">\r\n                                Pick Time\r\n                              </label>\r\n                            </div>\r\n                            <button\r\n                              title=\"Save\"\r\n                              className=\"btn green darken-2 right updateBtn\"\r\n                              onClick={dueDateEditSave}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                check\r\n                              </i>\r\n                            </button>\r\n                            <button\r\n                              title=\"Cancel\"\r\n                              className=\"btn yellow darken-2 right updateBtn\"\r\n                              onClick={dueDateEditCancel}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                cancel\r\n                              </i>\r\n                            </button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <p className=\"heading left indigo-text darken-4\">\r\n                            Start Time\r\n                            <i\r\n                              className=\"actions-icon inline-icon material-icons\"\r\n                              onClick={startDateEditClick}\r\n                            >\r\n                              edit\r\n                            </i>\r\n                          </p>\r\n                        </td>\r\n                        <td>\r\n                          {!editStartDate ? (\r\n                            <p\r\n                              title={moment(startTime).format(\r\n                                \"MMMM DD YYYY, h:mm a\"\r\n                              )}\r\n                            >\r\n                              {moment(startTime).fromNow()}\r\n                            </p>\r\n                          ) : null}\r\n                          <div className={editStartDate ? \"\" : \"hide\"}>\r\n                            <div className=\"input-field\">\r\n                              <input\r\n                                type=\"text\"\r\n                                id=\"startTimeDate\"\r\n                                className=\"datepicker\"\r\n                                ref={startTimeDateRef}\r\n                              />\r\n                              <label htmlFor=\"startTimeDate\" className=\"\">\r\n                                Pick Date\r\n                              </label>\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                              <input\r\n                                readOnly\r\n                                type=\"text\"\r\n                                id=\"startTimeTime\"\r\n                                className=\"timepicker\"\r\n                                ref={startTimeTimeRef}\r\n                              />\r\n                              <label htmlFor=\"startTimeime\" className=\"\">\r\n                                Pick Time\r\n                              </label>\r\n                            </div>\r\n                            <button\r\n                              title=\"Save\"\r\n                              className=\"btn green darken-2 right updateBtn\"\r\n                              onClick={startDateEditSave}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                check\r\n                              </i>\r\n                            </button>\r\n                            <button\r\n                              title=\"Cancel\"\r\n                              className=\"btn yellow darken-2 right updateBtn\"\r\n                              onClick={startDateEditCancel}\r\n                            >\r\n                              <i className=\"actions-icon material-icons\">\r\n                                cancel\r\n                              </i>\r\n                            </button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id  \r\n    IncidentDetailError : state.incidents.IncidentDetailError     // if api ERROR\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllAssignees: () => dispatch(allUsers()),\r\n    getIncidentById: (incidentId) => dispatch(getIncidentById(incidentId)), \r\n    updateIncident: (parameters) => dispatch(updateIncident(parameters)),   \r\n    deleteAttachment : (type, userid, incidentId , file) => dispatch(deleteAttachment(type, userid, incidentId ,file))    \r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IncidentDetails);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\Dashboard.js",["254"],"import React from 'react'\r\nimport PageActions from '../../PageActions';\r\nimport KPIBar from './KPIBar';\r\nimport OverallWidget from './OverallWidget'\r\nimport LastFive from './LastFive';\r\nimport  '../../../styles/dashboard.css'\r\nimport MostAssignedByUser from './MostAssignedByUser';\r\nimport DayByDayCount from './DayByDayCount';\r\nimport FiveOldestOpenIncidents from './OldestOpen';\r\n\r\n function Dashboard() {\r\n \r\n\r\n    return (\r\n      <div>\r\n        <PageActions Title={\"Dashboard\"} />\r\n        \r\n        <div className=\"container\">     \r\n          <KPIBar />\r\n          <div className=\"row\">\r\n            <OverallWidget />\r\n            <LastFive />\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n           <MostAssignedByUser />\r\n           <FiveOldestOpenIncidents />\r\n           {/* <DayByDayCount /> */}\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\userLoginReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\usersReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\incidentsReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\notificationsReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\dashboardReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\reducers\\messagesReducer.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Messages.js",["255","256","257","258","259","260","261"],"import { React, useState, useEffect, useRef} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { messagesByUser, conversationsByUser, messagesByConversations } from \"../../store/actions/messagesActions\";\r\nimport '../../styles/messages.css';\r\nimport ComposeMessage from './ComposeMessage';\r\nimport Reply from './Reply';\r\nimport Message from './Message'\r\nimport Conversation from './Conversation'\r\n\r\nfunction Messages({\r\n    userId,\r\n\r\n    allUsers,\r\n    UserMessages,\r\n    getMessagesByUser,\r\n    conversationsByUser,\r\n    messagesByConversations,\r\n    Conversations,\r\n    MessagesByConversations,\r\n}) {\r\n\r\n    const [userToggle, setUserToggle] = useState(false);\r\n    const [composeToggle, setComposeToggle] = useState(false);\r\n    const messagesRef = useRef();   \r\n    const [usersInfo, setUsersInfo] = useState([]);\r\n    const [selectedConversation, setSelectedConversation] = useState('');\r\n    const [conversationTitle, setConversationTitle] = useState('');\r\n\r\n    useEffect(() => {\r\n        conversationsByUser(userId);     \r\n          \r\n    }, []);\r\n\r\n    useEffect(() => {        \r\n        if(selectedConversation == \"\" && Conversations != null && Conversations.length > 0){\r\n            //messagesByConversations(Conversations[0].Id);\r\n           // setSelectedConversation(Conversations[0].Id);\r\n        }         \r\n\r\n    }, [Conversations])\r\n\r\n    \r\n    useEffect(() => {        \r\n      \r\n        if(UserMessages != null && UserMessages.length > 0){\r\n            let user = UserMessages[0].From == userId? getUserNameById(UserMessages[0].To) : getUserNameById(UserMessages[0].From);\r\n           setConversationTitle(user);\r\n        }       \r\n        try{\r\n            messagesRef.current.scrollTop = messagesRef.current.scrollHeight;     \r\n        }  catch(e){}\r\n     \r\n    }, [UserMessages])\r\n\r\n    const newConversationAdded = () =>{\r\n        conversationsByUser(userId);  \r\n    }\r\n\r\n    const getUserNameById = (id) => {   \r\n        let user = allUsers.find((assignee) => {\r\n          return assignee.Id === id;\r\n        });   \r\n        if(!user){    \r\n          return id;\r\n        }\r\n        return user.FirstName + \" \" + user.LastName\r\n      }\r\n      \r\n\r\n      const conversationClicked = (id) => {\r\n        setSelectedConversation(id);\r\n        messagesByConversations(id);\r\n        if(userToggle)\r\n            setUserToggle(false);\r\n      }\r\n\r\n   \r\n    \r\n        \r\n    return (\r\n        <section>\r\n            <div className=\"container messages-window\">     \r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col s2 m3 hide-on-large-only\">\r\n                        <div className=\"user-toogle\" onClick={()=>setUserToggle(!userToggle)}>\r\n                            <span>Users</span>\r\n                            <i className=\"material-icons center\">send</i>\r\n                        </div> \r\n                    </div>\r\n                    {userToggle? (\r\n                         <div className=\"col s10 m9 l3 users hide-on-large-only\">\r\n                              <div className=\"compose-message\" onClick={()=> setComposeToggle(!composeToggle)}>\r\n                                     <i className=\"material-icons indigo-text\">message</i>\r\n                                    <span className='indigo-text'> Compose Message </span>\r\n                                </div>  \r\n                         <ul className='conversation-list'>                         \r\n                                {Conversations.map(c => <Conversation key={c.Id} conversation={c} allUsers={allUsers} userId={userId} getUserNameById={getUserNameById} conversationClicked={conversationClicked} selectedConversation={selectedConversation} />)}\r\n\r\n                         </ul>\r\n                     </div>\r\n                    ) : <></>}\r\n                   \r\n\r\n                    <div className=\"col s10 m9 l3 users hide-on-med-and-down\">                        \r\n                        <div className=\"compose-message\" onClick={()=> setComposeToggle(!composeToggle)}>\r\n                            <i className=\"material-icons indigo-text\">message</i>\r\n                            <span className='indigo-text'> Compose Message </span>\r\n                        </div>   \r\n                        <ul className='conversation-list'> \r\n                            {(Conversations != null && Conversations.length > 0)? \r\n                                Conversations.map(c => <Conversation conversation={c} key={c.Id} allUsers={allUsers} userId={userId} getUserNameById={getUserNameById} conversationClicked={conversationClicked} selectedConversation={selectedConversation} />)\r\n                                :\r\n                                <></>\r\n                            }\r\n\r\n                        </ul>\r\n                    </div>\r\n                    {composeToggle ? (\r\n                        <div className=\"col s10 m9 l9  \">\r\n                            <ComposeMessage setComposeToggle={setComposeToggle} newConversationAdded={newConversationAdded} />\r\n                        </div>\r\n                    )\r\n                        :\r\n                        (\r\n                            !userToggle ? (\r\n                                <div className=\"col s10 m9 l9 \">\r\n                                    <h5 className=\"left indigo-text darken-4\"> {conversationTitle} </h5>\r\n                                    <div className=\"messages\" ref={messagesRef}>\r\n                                        <ul className=''>\r\n                                            {\r\n                                                UserMessages.map(m => (\r\n                                                    <Message key={m.Id} message={m} userId={userId} />\r\n                                                ))\r\n                                            }\r\n                                        </ul>\r\n                                    </div>\r\n                                    <Reply />\r\n                                </div>\r\n\r\n                            ) : <></>\r\n                        )}\r\n\r\n                   \r\n\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n        allUsers: state.users.users,\r\n        UserMessages : state.messages.Messages,\r\n        Conversations :  state.messages.Conversations,\r\n        MessagesByConversations: state.messages.MessagesByConversations,\r\n    }\r\n  }\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getMessagesByUser: (userId) => dispatch(messagesByUser(userId)),   \r\n        conversationsByUser: (userId) => dispatch(conversationsByUser(userId)),   \r\n        messagesByConversations: (conversationId) => dispatch(messagesByConversations(conversationId))    \r\n    }\r\n  }\r\n \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Messages);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Users\\User.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Pages.js",["262","263","264","265","266","267","268"],"import {React, useState, useEffect, useRef} from 'react';\r\nimport M from 'materialize-css';\r\n\r\nexport default function Pages({TotalRecords, PostsPerPage, setPageNumber, setPageSize , search }) {\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentSize, setCurrentSize] = useState(5);\r\n    const [information, setInformation] = useState('');\r\n\r\n    let hidePreviousPages = false;\r\n    let hideNextPages = false;\r\n\r\n    const ddlRef = useRef();\r\n\r\n    let pageIndexes = [];\r\n    for(let i = 1; i <= Math.ceil(TotalRecords / PostsPerPage) ; i++ )\r\n    {\r\n        if(i > currentPage - 3 &&  i < currentPage + 3)\r\n        pageIndexes.push(i);        \r\n    }\r\n\r\n    if(pageIndexes[0] != 1){\r\n        hidePreviousPages = true;      \r\n    }\r\n\r\n    if(pageIndexes[pageIndexes.length -1] != Math.ceil(TotalRecords / PostsPerPage)){\r\n        hideNextPages = true;      \r\n    }\r\n\r\n    const pageNumberClick = (event, p) =>{\r\n        event.preventDefault();\r\n        if(p <1 || p > Math.ceil(TotalRecords / PostsPerPage))\r\n            return;\r\n            console.log(p);\r\n        setPageNumber(p);\r\n        setCurrentPage(p);       \r\n    }\r\n\r\n    const pageSizeChanged = (pSize) => {\r\n        setPageSize(pSize);\r\n        setCurrentSize(pSize);\r\n        setCurrentPage(1);\r\n        setPageNumber(1);\r\n       \r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n        setPageNumber(1);        \r\n        M.FormSelect.init(ddlRef.current); \r\n        pageInformation();\r\n    }, [search])\r\n\r\n    useEffect(() => {    \r\n        pageInformation();\r\n    }, [currentPage, currentSize, TotalRecords])\r\n        \r\n\r\n    const pageInformation = () => {\r\n        let end = currentPage * currentSize;\r\n        let start = end - currentSize + 1;\r\n        if(end > TotalRecords)\r\n            end = TotalRecords;\r\n        if(start > TotalRecords)\r\n            start = 0;\r\n        setInformation(\"Showing from \" + start + \" to \" + end + \" of \" + TotalRecords);\r\n    }\r\n\r\n    let pages = pageIndexes.map((p,index)=>{\r\n        let pclass = currentPage === p ? \"active\" : \"\";        \r\n        return (             \r\n            <li className={pclass} key={p}  onClick={(e) => pageNumberClick(e, p)}>              \r\n              <a > {p} </a>\r\n            </li>        \r\n        );\r\n    });\r\n\r\n    return (\r\n        \r\n      <div className=\"row pagesRow\">\r\n        <div className=\"col s12 m8 l6\">\r\n            <p className='left green-text darken-2'>{information}</p>\r\n        </div>\r\n        <div className=\"col s3 m6 l2 pageSize\">              \r\n                    <span>Page Size</span>\r\n                    <select value={currentSize} onChange={(e) => pageSizeChanged(e.target.value)}\r\n                        ref={ddlRef}  >\r\n                        <option value=\"5\">5</option>\r\n                        <option value=\"10\">10</option>\r\n                        <option value=\"15\">15</option>\r\n                        <option value=\"20\">20</option>\r\n                        <option value=\"25\">25</option>\r\n                        <option value=\"30\">30</option>\r\n                        <option value=\"35\">35</option>\r\n                        <option value=\"40\">40</option>\r\n                        <option value=\"45\">45</option>\r\n                        <option value=\"50\">50</option>\r\n                    </select>               \t\t\t\t\t\r\n        </div>\r\n      \r\n        <div className=\"input-field col s9 m6 l4\">\r\n            <ul className=\"pagination right\">\r\n            <li\r\n                className={  currentPage === 1 ? \" disabled\" : \"\" } >\r\n                <a href=\"#!\" onClick={(e) => pageNumberClick(e ,currentPage - 1)}>\r\n                <i className=\"material-icons\">chevron_left</i>               \r\n                </a>\r\n            </li>\r\n            {hidePreviousPages? <li><a>...</a></li> : null} \r\n            {pages}\r\n            {hideNextPages? <li><a>...</a></li> : null} \r\n            <li\r\n                className={ currentPage === Math.ceil(TotalRecords / PostsPerPage) ? \" disabled\" : \"\" } >\r\n                <a href=\"#!\" onClick={(e) => pageNumberClick(e, currentPage + 1)}>\r\n                <i className=\"material-icons\">chevron_right</i>\r\n                </a>\r\n            </li>\r\n            </ul>\r\n        </div>\r\n\r\n\r\n      </div>\r\n    );\r\n}\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\PageActions.js",["269","270","271"],"import React from 'react'\r\n//import '../styles/tooltip.css';\r\n\r\nexport default function PageActions(props) {\r\n    return (\r\n      <section className=\"container\">\r\n        <div className=\"row \">\r\n          <div className=\"col s12 l5\">\r\n            <div className=\"left\">\r\n              <h4 className=\"page-title\" data-tip={props.Title}>{props.Title}</h4>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"col s7 l9 hide\">\r\n            <div className=\"right\">\r\n              <ul className=\"actionsBtns\">\r\n                <li>\r\n                  <a className=\"btn-floating green\">\r\n                    <i className=\"material-icons\">refresh</i>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"btn-floating red\">\r\n                    <i className=\"material-icons\">print</i>\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"btn-floating blue\">\r\n                    <i className=\"material-icons\">file_download</i>\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n}\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentListing\\Incident.js",["272","273","274"],"import React from 'react';\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { removeIncidentData } from \"../../../store/actions/incidentsActions\";\r\nimport { connect  } from 'react-redux';\r\nimport '../../../styles/IncidentListing.css';\r\nimport moment from \"moment\";;\r\n\r\nfunction Incident({incident, dispatch, getUserNameById}) {\r\n\r\n  const history = useHistory();\r\n\r\n  const openIncident = (id) => {  \r\n    dispatch(removeIncidentData()); // So that user does not see old data that is stored in redux (and local storage)\r\n    let path = '/Incident/' + id;      \r\n      history.push(path);\r\n  }\r\n\r\n  const statusName = (status) => {\r\n    switch(status){\r\n      case \"N\":\r\n        return \"New\";\r\n      case \"C\":\r\n        return \"Closed\";\r\n      case \"A\":\r\n        return \"Approved\";\r\n      case \"I\":\r\n        return \"In Progress\";\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  const dateDifference = (date1 , date2) =>{\r\n   \r\n      const diffTime = Math.abs(date2 - date1);\r\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \r\n     // console.log(diffTime + \" milliseconds\");\r\n     // console.log(diffDays + \" days\");\r\n     return diffDays;\r\n  }\r\n\r\n  let currentDate = new Date();\r\n  const dueDateClass = (new Date(incident.DueDate)) > currentDate || incident.Status == 'C' || incident.Status == 'A' ?  \"green-text text-darken-2\" : \"red-text text-darken-2\" ;\r\n  \r\n    return (\r\n      <tr >      \r\n        \r\n        <td\r\n          className=\"tbl-title\"        \r\n        >\r\n          <div className=\"custom-dropdown\">\r\n            <span className=\"indigo-text darken-4\" onClick={() => openIncident(incident.Id)} >\r\n              {incident.Title.length > 50 ? incident.Title.slice(0, 50) + \" ...\" : incident.Title}\r\n            </span>\r\n            <div className=\"custom-dropdown-content\">\r\n              <p> {incident.Title}</p>\r\n            </div>\r\n          </div>\r\n\r\n        </td>\r\n        \r\n        <td\r\n          className=\"tbl-description\"\r\n        >\r\n          <div className=\"custom-dropdown\">\r\n            <span >\r\n               {incident.Description.length > 30 ? incident.Description.slice(0,30) + \" ...\" : incident.Description }\r\n            </span>\r\n            <div className=\"custom-dropdown-content\">\r\n              <p> {incident.Description}</p>\r\n            </div>\r\n          </div>\r\n    \r\n        </td>\r\n        <td>{getUserNameById(incident.AssignedTo)}</td>\r\n        <td>{getUserNameById(incident.CreatedBy)}</td>\r\n        <td><span title= {moment(incident.CreatedAT).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(incident.CreatedAT).fromNow() } </span></td>\r\n        <td><span className={dueDateClass} title= {moment(incident.DueDate).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(incident.DueDate).fromNow() } </span></td>\r\n        <td>{statusName(incident.Status)}</td>\r\n      </tr>\r\n    );\r\n}\r\n\r\nexport default connect()(Incident);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Notifications.js",["275"],"import {React, useRef, useEffect, useState} from 'react'\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport M from 'materialize-css';\r\nimport  '../styles/notifications.css'\r\nimport {getAllNotifications, setNotificationStatus} from '../store/actions/notificationsActions';\r\nimport { removeIncidentData, getIncidentById } from \"../store/actions/incidentsActions\";\r\nimport moment from \"moment\";\r\n\r\n function Notifications({\r\n   getNotifications,\r\n   userId,\r\n   notifications,\r\n   setNotificationStatus,\r\n   removeIncidentData,\r\n   getIncidentById\r\n }) {\r\n   const ddlNotiRef = useRef();\r\n   const history = useHistory();\r\n\r\n   const [unReadCount, setUnReadCount] = useState(\r\n     notifications.filter((notification) => !notification.IsRead).length\r\n   );\r\n\r\n   useEffect(() => {\r\n     var options = {\r\n       closeOnClick: false,\r\n     };\r\n     M.Dropdown.init(ddlNotiRef.current, options);\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n     getNotifications(userId);\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n     setUnReadCount(\r\n       notifications.filter((notification) => !notification.IsRead).length\r\n     );\r\n   }, [notifications]);\r\n\r\n   const setStatus = (id, status) => {\r\n     setNotificationStatus(id, status);\r\n   };\r\n\r\n   const openIncident = (notification) => {\r\n     setStatus(notification.Id, true);\r\n\r\n     let path = \"/Incident/\" + notification.IncidentId;\r\n     if (history.location.pathname !== path) {\r\n       // only change path if it is different      \r\n       removeIncidentData(); // So that user does not see old data that is stored in redux (and local storage)\r\n     }\r\n     else{\r\n      M.Dropdown.getInstance(ddlNotiRef.current).close();\r\n      getIncidentById(notification.IncidentId); //if already on the same incident, just get new data and update page\r\n     }\r\n     history.push(path);\r\n   };\r\n\r\n   return (\r\n     <>\r\n       <li>\r\n         <a\r\n           ref={ddlNotiRef}\r\n           href=\"#dropdown1\"\r\n           className=\"btn-floating z-depth-0 indigo darken-4 dropdown-trigger badge-a\"\r\n           data-target=\"dropdownNotifications\"\r\n         >\r\n           <i className=\"material-icons\">notifications</i>\r\n         </a>\r\n         <ul\r\n           id=\"dropdownNotifications\"\r\n           className=\"notifications dropdown-content\"\r\n         >\r\n           {notifications == null || notifications.length < 1 ? (\r\n             <li>\r\n               <div className=\"notification-box\">\r\n                 <p className=\"\">No new notificaitons.</p>\r\n               </div>\r\n             </li>\r\n           ) : (\r\n             notifications.map((notification) => {\r\n               let classes = notification.IsRead\r\n                 ? \"notification-box read\"\r\n                 : \"notification-box unread\";\r\n               return (\r\n                 <li key={notification.Id}>\r\n                   <div className={classes}>\r\n                     <span className='icon'>\r\n                       {notification.IsRead ? (\r\n                         <i\r\n                           className=\"material-icons black-text readIcon\"\r\n                           title=\"Mark Unread\"\r\n                           onClick={() => setStatus(notification.Id, false)}\r\n                         >\r\n                           radio_button_unchecked\r\n                         </i>\r\n                       ) : (\r\n                         <i\r\n                           className=\"material-icons black-text readIcon\"\r\n                           title=\"Mark Read\"\r\n                           onClick={() => setStatus(notification.Id, true)}\r\n                         >\r\n                           radio_button_checked\r\n                         </i>\r\n                       )}\r\n                     </span>\r\n\r\n                     <p className='text indigo-text darken-4' onClick={() => openIncident(notification)}>\r\n                       {\" \"}\r\n                       {notification.NotifyAbout}\r\n                     </p>\r\n\r\n                     <p className='time'>\r\n                      <span title= {moment(notification.CreateDate).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(notification.CreateDate).fromNow() } </span>                      \r\n                     </p>\r\n                         \r\n                       \r\n                   </div>\r\n                 </li>\r\n               );\r\n             })\r\n           )}\r\n         </ul>\r\n       </li>\r\n       <li>\r\n         {unReadCount > 0 ? (\r\n           <span className=\"badge notification-badge white-text new pink\">{unReadCount}</span>\r\n         ) : null}\r\n       </li>\r\n     </>\r\n   );\r\n }\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{      \r\n        notifications :state.notifications.notifications,\r\n        userId :state.userLogin.userId  // logged in User Id   \r\n    }\r\n  }  \r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      getNotifications: (userid) => dispatch(getAllNotifications(userid)),\r\n      setNotificationStatus : (id, isRead) => dispatch(setNotificationStatus(id, isRead)),\r\n      removeIncidentData : () => dispatch(removeIncidentData()),\r\n      getIncidentById: (incidentId) => dispatch(getIncidentById(incidentId)), \r\n    };\r\n};\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Notifications);\r\n  ","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\AssigneeDropdown.js",["276","277"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport {  updateIncident, deleteAttachment } from \"../../store/actions/incidentsActions\";\r\nimport M from \"materialize-css\";\r\nimport { connect } from \"react-redux\";\r\nimport { allUsers } from \"../../store/actions/usersActions\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nfunction AssigneeDropdown({getAllAssignees, allAssignees, updateIncidentByField, setAssignee ,assigneeName, setAssigneeName }) {\r\n\r\n    const [assigneeList, setAssigneeList] = useState(allAssignees);\r\n    const [assgineeSearchText, setAssgineeSearchText] = useState(\"\");\r\n    const assigneeRef = useRef();\r\n\r\n    const dropDownId = \"dropdownAssginee\" + uuidv4();\r\n\r\n    useEffect(() => {       \r\n        getAllAssignees();\r\n      }, []); // get assignee on first render only\r\n    \r\n    useEffect(() => {\r\n        setAssigneeList(allAssignees);\r\n      }, [allAssignees]);\r\n\r\n      useEffect(() => {\r\n        setMaterializeCSS();\r\n      }, [allAssignees]);\r\n\r\n      \r\n  const setMaterializeCSS = () => {\r\n    var options = {\r\n      closeOnClick: false,\r\n    };\r\n    M.Dropdown.init(assigneeRef.current, options);   \r\n  }\r\n\r\n  const assigneeSelected = (event, userId) => {\r\n    event.preventDefault();\r\n    let currentAssignee = allAssignees.find((assignee) => {\r\n      return assignee.Id === userId;\r\n    });\r\n\r\n    setAssignee(userId);\r\n    setAssigneeName(currentAssignee.FirstName + \" \" + currentAssignee.LastName);\r\n    if(updateIncidentByField)\r\n         updateIncidentByField(\"AssignedTo\" , userId); \r\n\r\n    var assigneeDropdown = M.Dropdown.getInstance(assigneeRef.current);\r\n    assigneeDropdown.close();\r\n  };\r\n\r\n  const searchAssignee = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"searching....\");\r\n    setAssgineeSearchText(event.target.value);\r\n    console.log(\"assgineeSearchText\", assgineeSearchText);\r\n    let newList = [];\r\n    if (event.target.value !== \"\")\r\n      newList = allAssignees.filter((assignee) => {\r\n        return (\r\n          assignee.FirstName.toUpperCase().startsWith(\r\n            event.target.value.toUpperCase()\r\n          ) ||\r\n          assignee.LastName.toUpperCase().startsWith(\r\n            event.target.value.toUpperCase()\r\n          )\r\n        );\r\n      });\r\n\r\n    if (newList !== undefined && newList.length !== 0) {\r\n      //check if there is atlease one assignee\r\n      newList = [].concat(newList);\r\n    } else {\r\n      //if search found nothing, show all assignees\r\n      newList = allAssignees.slice(0, allAssignees.length);\r\n    }\r\n    setAssigneeList(newList);\r\n  };\r\n\r\n\r\n  if (allAssignees && !assigneeList) {\r\n    setAssigneeList(allAssignees);\r\n  }\r\n\r\n\r\n    return (\r\n        <>\r\n             <input\r\n                            readOnly\r\n                            required\r\n                            type=\"text\"\r\n                            className=\"dropdown-trigger  align-right\"\r\n                            id=\"assignee\"\r\n                            data-target={dropDownId}\r\n                            placeholder=\"Select User\"\r\n                            ref={assigneeRef}\r\n                            value={assigneeName}\r\n                          \r\n                          />\r\n\r\n                          <ul id={dropDownId} className=\"dropdown-content\">\r\n                            <li className=\"search-assignee-box\">\r\n                              <input\r\n                              // onClick={()=> alert(\"clicker\")}\r\n                            //   onKeyDown={(e)=> console.log(e.target.value)}\r\n                               // value={assgineeSearchText}\r\n                                type=\"text\"\r\n                                placeholder=\"Search Assignee\"\r\n                                onChange={searchAssignee}\r\n                              />\r\n                            </li>\r\n                            {!assigneeList\r\n                              ? null\r\n                              : assigneeList.map((user) => {\r\n                                  return (\r\n                                    <li\r\n                                      key={user.Id}\r\n                                      onClick={(event) => assigneeSelected(event,user.Id)}\r\n                                    >\r\n                                      <a className=\"indigo-text\" href=\"#!\">\r\n                                        {user.FirstName + \" \" + user.LastName}\r\n                                      </a>\r\n                                    </li>\r\n                                  );\r\n                                })}\r\n                          </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      allAssignees: state.users.users,\r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      IncidentDetailError : state.incidents.IncidentDetailError     // if api ERROR\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      getAllAssignees: () => dispatch(allUsers()),    \r\n      updateIncident: (parameters) => dispatch(updateIncident(parameters)),   \r\n        \r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(AssigneeDropdown);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comments.js",["278","279","280"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport moment from \"moment\";\r\nimport {  useHistory  } from 'react-router-dom';\r\nimport Comment from \"./Comment\";\r\nimport { connect } from \"react-redux\";\r\nimport {  addNewComment } from \"../../../store/actions/incidentsActions\";\r\n\r\nfunction Comments({\r\n  incidentId,\r\n  comments,\r\n  userId,\r\n  getNameById,\r\n  addNewComment\r\n}) {\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [newCommentFiles, setNewCommentFiles] = useState(null);\r\n\r\n  const newCommentFilesRef = useRef();\r\n  const history = useHistory();\r\n  //console.log(history);\r\n  const onFileChange = (event) => {\r\n    setNewCommentFiles(event.target.files);\r\n  };\r\n\r\n  const saveComment = () => {\r\n    if (newComment.trim() === \"\") {\r\n      alert(\"Please add comment first.\");\r\n      return;\r\n    }\r\n    const formData = new FormData();\r\n\r\n    if (newCommentFiles) {\r\n      for (let i = 0; i < newCommentFiles.length; i++) {\r\n        formData.append(\r\n          \"Attachment\" + i + 1,\r\n          newCommentFiles[i],\r\n          newCommentFiles[i].name\r\n        );\r\n      }\r\n    }\r\n    formData.append(\"CommentText\", newComment.trim());\r\n    formData.append(\"IncidentId\", incidentId);\r\n    formData.append(\"UserId\", userId);\r\n    addNewComment(formData);\r\n\r\n    setNewComment(\"\");\r\n    setNewCommentFiles(null);\r\n    newCommentFilesRef.current.value = \"\";\r\n    //history.push(history.location.pathname);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5 className=\"heading left-align\">Comments</h5>\r\n      <p className=\"all-comments-box\">\r\n        {!comments ? (\r\n          <h1>No Comments</h1>\r\n        ) : (\r\n          comments.map((comment) => {\r\n            return (\r\n              <Comment\r\n                key={comment.Id}\r\n                comment={comment}\r\n                getNameById={getNameById}\r\n                incidentId={incidentId}\r\n                userId={userId}               \r\n              />\r\n            );\r\n          })\r\n        )}{\" \"}\r\n        {/* end of comments loop */}\r\n      </p>\r\n\r\n      <h6 className=\"heading indigo-text darken-4 left-align\">Add Comment</h6>\r\n      <div className=\"input-field\">\r\n        <textarea\r\n          id=\"comment\"\r\n          className=\"materialize-textarea\"\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n        ></textarea>\r\n        <label htmlFor=\"comment\" className=\"\">\r\n          Comment\r\n        </label>\r\n      </div>\r\n      <div className=\"file-field input-field\">\r\n        <div className=\"btn indigo darken-2\">\r\n          <i className=\"material-icons \">attachment</i>\r\n          <input type=\"file\" id=\"attachment\" multiple onChange={onFileChange} />\r\n        </div>\r\n        <div className=\"file-path-wrapper\">\r\n          <input\r\n            className=\"file-path validate\"\r\n            ref={newCommentFilesRef}\r\n            type=\"text\"\r\n            placeholder=\"Upload upto 3 files\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"input-field center \">\r\n        <button\r\n          className=\"left btn green darken-2 updateBtn\"\r\n          onClick={saveComment}\r\n        >\r\n          <span>Add</span>\r\n          <i className=\"material-icons right\">save</i>\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id       \r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {    \r\n    addNewComment: (formData) => dispatch(addNewComment(formData))    \r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comments);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OldestOpen.js",["281","282","283"],"import React ,{useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { GetOldest5UnresolvedIncidents } from '../../../store/actions/dashboardActions';\r\nimport moment from \"moment\";\r\nimport {  useHistory  } from 'react-router-dom';\r\n\r\nfunction FiveOldestOpenIncidents({Oldest5UnresolvedIncidents, getOldest5UnresolvedIncidents}) {\r\n\r\n  useEffect(() => {\r\n    getOldest5UnresolvedIncidents();\r\n}, [])\r\n\r\nif(Oldest5UnresolvedIncidents == null || Oldest5UnresolvedIncidents.length===0 )\r\n return <h3>Loading...</h3>\r\n\r\n    return (\r\n      <div className=\"col s12 m12 l6\">\r\n        <div className=\"widget\">\r\n          <h5> 5 Oldest Unresolved Incidents</h5>\r\n\r\n          {\r\n            Oldest5UnresolvedIncidents.map(incident => {\r\n              return (\r\n                <Incident key={incident.Id} incident={incident} />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst Incident = ({incident, dispatch}) => {\r\n\r\n  const statusName = (status) => {\r\n    switch(status){\r\n      case \"N\":\r\n        return \"New\";\r\n      case \"C\":\r\n        return \"Closed\";\r\n      case \"A\":\r\n        return \"Approved\";\r\n      case \"I\":\r\n        return \"In Progress\";\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  const history = useHistory();\r\n  const openIncident = (id) => {  \r\n  //  dispatch(removeIncidentData()); // So that user does not see old data that is stored in redux (and local storage)\r\n    let path = '/Incident/' + id;      \r\n      history.push(path);\r\n  }\r\n\r\n    return (\r\n      <div className=\"incident\">\r\n        <div className=\"time-status\">\r\n        <span className=\"timestamp\"\r\n          title={moment(incident.CreatedAT).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n        >\r\n          {moment(incident.CreatedAT).fromNow()}{\" \"}\r\n        </span>\r\n         \r\n          <span className=\"status\">\r\n            {statusName(incident.Status)}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"title\">\r\n          <a onClick={()=> openIncident(incident.Id)} >\r\n            {incident.Title}\r\n          </a>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      Oldest5UnresolvedIncidents: state.dashboard.Oldest5UnresolvedIncidentsData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getOldest5UnresolvedIncidents: () => dispatch(GetOldest5UnresolvedIncidents()),     \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FiveOldestOpenIncidents);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\DayByDayCount.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\OverallWidget.js",["284"],"import React ,{useEffect, useState} from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport {GetOverallWidget} from '../../../store/actions/dashboardActions';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction OverallWidget({overallWidgetData, getOverallWidgetData}) {\r\n    const [chartOptions, setChartOptions] = useState({});\r\n\r\n    useEffect(() => {\r\n        getOverallWidgetData();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n     \r\n        const options = {\r\n            chart: {\r\n                type: 'pie',\r\n                height: (70) + '%',\r\n            },\r\n            title: {\r\n                text: ''\r\n            },\r\n            credits:\r\n            {\r\n                enabled: false\r\n            },\r\n            tooltip: {\r\n                pointFormat: '{series.name}: <b>{point.y} ({point.percentage:.1f}%)</b>'\r\n            },\r\n            plotOptions: {\r\n                pie: {\r\n                    allowPointSelect: true,\r\n                    cursor: 'pointer',\r\n                    dataLabels: {\r\n                        enabled: false\r\n                    },\r\n                    showInLegend: true\r\n                }\r\n            },\r\n            series: [{\r\n                name: 'Share',\r\n                data: [\r\n                    //{ name: 'New', y: overallWidgetData.New, color: '#F57C00' },\r\n                    { name: 'New', y: overallWidgetData.New,   color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(245,124,0,1)'],\r\n                            [1, 'rgba(255,226,0,1)']\r\n                        ]\r\n                    } },\r\n                    //{ name: 'In Progress', y: overallWidgetData.InProgress, color: '#1976D2' },\r\n                    { name: 'In Progress', y: overallWidgetData.InProgress, color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(25,118,210,1)'],\r\n                            [1, 'rgba(0,237,255,1)']\r\n                        ]\r\n                    } },\r\n                    { name: 'Closed', y: overallWidgetData.Closed,  color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(67,160,71,1)'],\r\n                            [1, 'rgba(0,255,187,1)']\r\n                        ]\r\n                    } },\r\n                   // { name: 'Closed', y: overallWidgetData.Closed, color: '#43A047' },\r\n                    { name: 'Approved', y: overallWidgetData.Approved,  color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(27,94,32,1)'],\r\n                            [1, 'rgba(19,255,0,1)']\r\n                        ]\r\n                    } },\r\n                    { name: 'Late', y: overallWidgetData.Late,  color: {\r\n                        linearGradient:  [0, 0, 0, 300],\r\n                        stops: [\r\n                            [0, 'rgba(183,28,28,1)'],\r\n                            [1, 'rgba(255,140,0,1)']\r\n                        ]\r\n                    } }\r\n\r\n                    //{ name: 'Approved', y: overallWidgetData.Approved, color: '#1B5E20' },\r\n                    //{ name: 'Late', y: overallWidgetData.Late, color: '#B71C1C' }\r\n                ]\r\n            }]\r\n        }\r\n        try{\r\n            setChartOptions(options);\r\n        }catch(e){}\r\n    \r\n    }, [overallWidgetData])\r\n\r\n\r\n    return (\r\n        <div className=\"col s12 m12 l6 widget\">\r\n            <h5> Overall</h5>\r\n            <HighchartsReact highcharts={Highcharts} options={chartOptions} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n    return{   \r\n        userId :state.userLogin.userId,  // logged in User Id  \r\n        overallWidgetData: state.dashboard.OverallWidgetData\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getOverallWidgetData: () => dispatch(GetOverallWidget()),     \r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(OverallWidget);\r\n\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\LastFive.js",["285","286","287"],"import React ,{useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { GetLast5Incidents } from '../../../store/actions/dashboardActions';\r\nimport moment from \"moment\";\r\n\r\nimport {  useHistory  } from 'react-router-dom';\r\n\r\nfunction LastFive({Last5IncidentsData, getLast5IncidentsData, dispatch}) {\r\n\r\n  useEffect(() => {\r\n    getLast5IncidentsData();\r\n}, [])\r\n\r\n\r\nif(Last5IncidentsData == null || Last5IncidentsData.length===0 )\r\n return <h3>Loading...</h3>\r\n\r\n    return (\r\n      <div className=\"col s12 m12 l6\">\r\n        <div className=\"widget\">\r\n          <h5> Last 5 Incidents</h5>\r\n\r\n          {\r\n            Last5IncidentsData.map(incident => {\r\n              return (\r\n                <Incident key={incident.Id} incident={incident} />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst Incident = ({incident, dispatch}) => {\r\n\r\n  const statusName = (status) => {\r\n    switch(status){\r\n      case \"N\":\r\n        return \"New\";\r\n      case \"C\":\r\n        return \"Closed\";\r\n      case \"A\":\r\n        return \"Approved\";\r\n      case \"I\":\r\n        return \"In Progress\";\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  const history = useHistory();\r\n  const openIncident = (id) => {  \r\n  //  dispatch(removeIncidentData()); // So that user does not see old data that is stored in redux (and local storage)\r\n    let path = '/Incident/' + id;      \r\n      history.push(path);\r\n  }\r\n\r\n    return (\r\n      <div className=\"incident\">\r\n        <div className=\"time-status\">\r\n        <span className=\"timestamp\"\r\n          title={moment(incident.CreatedAT).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n        >\r\n          {moment(incident.CreatedAT).fromNow()}{\" \"}\r\n        </span>\r\n         \r\n          <span className=\"status\">\r\n            {statusName(incident.Status)}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"title\">\r\n          <a onClick={()=> openIncident(incident.Id)} >\r\n            {incident.Title}\r\n          </a>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      Last5IncidentsData: state.dashboard.Last5IncidentsData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getLast5IncidentsData: () => dispatch(GetLast5Incidents()),     \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LastFive);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\MostAssignedByUser.js",["288","289"],"import React, {useEffect} from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport {GetMostAssignedToUsers} from '../../../store/actions/dashboardActions';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction MostAssignedByUser({MostAssignedIncidentsData, getMostAssignedToUsers}) {\r\n\r\n  useEffect(() => {\r\n    getMostAssignedToUsers();\r\n  }, []);\r\n\r\n   if(MostAssignedIncidentsData.length ===0 || MostAssignedIncidentsData == null )\r\n   return (<h3>loading..</h3>);\r\n\r\n  let data = [];\r\n\r\n  try{\r\n    data =  [\r\n      // { name: MostAssignedIncidentsData[0].Name, y: parseInt(MostAssignedIncidentsData[0].Count), color:'#B71C1C' },\r\n      // { name: MostAssignedIncidentsData[1].Name, y: parseInt(MostAssignedIncidentsData[1].Count), color:'#E53935' },\r\n      // { name: MostAssignedIncidentsData[2].Name, y: parseInt(MostAssignedIncidentsData[2].Count), color:'#EF5350' },\r\n      // { name: MostAssignedIncidentsData[3].Name, y: parseInt(MostAssignedIncidentsData[3].Count), color:'#E57373' },\r\n      // { name: MostAssignedIncidentsData[4].Name, y: parseInt(MostAssignedIncidentsData[4].Count), color:'#FFCDD2' }  \r\n      \r\n      { name: MostAssignedIncidentsData[0].Name, y: parseInt(MostAssignedIncidentsData[0].Count),  color: {\r\n        linearGradient:  [0, 0, 0, 300],\r\n        stops: [\r\n            [0, 'rgba(255,114,0,1)'],\r\n            [1, 'rgba(183,28,28,1)']           \r\n        ]\r\n      } },\r\n      { name: MostAssignedIncidentsData[1].Name, y: parseInt(MostAssignedIncidentsData[1].Count),color: {\r\n        linearGradient:  [0, 0, 0, 300],\r\n        stops: [\r\n            [0, 'rgba(255,127,0,1)'],\r\n            [1, 'rgba(229,57,53,1)']           \r\n        ]\r\n      }  },\r\n      { name: MostAssignedIncidentsData[2].Name, y: parseInt(MostAssignedIncidentsData[2].Count), color: {\r\n        linearGradient:  [0, 0, 0, 300],\r\n        stops: [\r\n            [0, 'rgba(255,127,0,1)'],\r\n            [1, 'rgba(239,83,80,1)']           \r\n        ]\r\n      }  },\r\n      { name: MostAssignedIncidentsData[3].Name, y: parseInt(MostAssignedIncidentsData[3].Count), color: {\r\n        linearGradient:  [0, 0, 0, 300],\r\n        stops: [\r\n            [0, 'rgba(230,255,46,1)'],\r\n            [1, 'rgba(160,157,53,1)']           \r\n        ]\r\n      }  },\r\n      { name: MostAssignedIncidentsData[4].Name, y: parseInt(MostAssignedIncidentsData[4].Count), color: {\r\n        linearGradient:  [0, 0, 0, 300],\r\n        stops: [\r\n            [0, 'rgba(104,255,38,1)'],\r\n            [1, 'rgba(46,139,44,1)']           \r\n        ]\r\n      }  }  \r\n  ];\r\n\r\n  }\r\n  catch(err){\r\n    console.log(\"error\", err);\r\n  }\r\n\r\n    const options = {\r\n        title: {\r\n          text: 'My chart'\r\n        },\r\n        chart: {    \r\n          type: 'bar',\r\n          height: (70) + '%',\r\n          //width: (100) + '%',\r\n         },\r\n         title:{\r\n            text:''\r\n        },\r\n        credits:\r\n        {\r\n            enabled: false\r\n        },\r\n        legend: {\r\n            enabled: false\r\n        },\r\n        yAxis: {\r\n            title: {\r\n                text: ''\r\n            }\r\n        },\r\n    \r\n        xAxis: {\r\n            type: 'category',\r\n            min: 0,\r\n            labels: {\r\n                animate: true\r\n            }\r\n        },\r\n      \r\n         series: [{\r\n          name: '',\r\n          dataSorting: {\r\n            enabled: true,\r\n            sortKey: 'y'\r\n        },\r\n          data: data\r\n      }]\r\n      }\r\n\r\n    return (\r\n      <div className=\"col s12 m12 l6 widget\">\r\n        <div className=\"\">\r\n          <h5> Most Assigned To Users</h5>\r\n          <HighchartsReact highcharts={Highcharts} options={options} />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      MostAssignedIncidentsData: state.dashboard.MostAssignedIncidentsData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getMostAssignedToUsers: () => dispatch(GetMostAssignedToUsers()),     \r\n  }\r\n}\r\n\r\n// create \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MostAssignedByUser);\r\n\r\n//please invert binary tree\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\Dashboard\\KPIBar.js",["290","291"],"import React,{useEffect, useState} from 'react'\r\nimport '../../../styles/kpibar.css'\r\nimport { GetKPI } from '../../../store/actions/dashboardActions';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction KPIBar({getKPIData, userId, kpiData}) {\r\n \r\n  //console.log(\"kpiData\",kpiData);\r\n  \r\n  useEffect(() => {    \r\n    getKPIData(userId); \r\n  }, [])\r\n\r\n \r\n    return (     \r\n      <div class=\"row kpibar\">       \r\n        <KPI value={kpiData.New} text=\"NEW\" color=\"new-color\" />\r\n        <KPI value={kpiData.InProgress} text=\"IN PROGRESS\" color=\"inprogress-color\" />\r\n        <KPI value={kpiData.Closed} text=\"CLOSED\" color=\"closed-color\" />\r\n        <KPI value={kpiData.Approved} text=\"APPROVED\" color=\"approved-color\" />\r\n        <KPI value={kpiData.Late} text=\"LATE\" color=\"late-color\"/>\r\n        <KPI value={kpiData.AssignedToMe} text=\"ASSINGED TO YOU\" color=\"assignedToMe-color\"/>        \r\n      </div>\r\n    );\r\n}\r\n\r\nfunction KPI({value, text, color}) {\r\n  return (\r\n    <div className=\"col l2 m6 s6\">\r\n      <div className={\"kpi \" + color}  >\r\n        <div className=\"kpi-value\">{value}</div>\r\n        <div className=\"kpi-text\">{text}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {        \r\n  return{   \r\n      userId :state.userLogin.userId,  // logged in User Id  \r\n      kpiData: state.dashboard.KPIData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      getKPIData : (userId) => dispatch(GetKPI(userId)),     \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(KPIBar);\r\n\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentDescription.js",["292"],"import { React, useEffect, useState, useRef } from \"react\";\r\n\r\nimport { updateIncident } from \"../../../store/actions/incidentsActions\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nfunction IncidentDescription({type, incidentData, updateIncident, userId}) {\r\n\r\n    const [description, setDescription] = useState(\"\");\r\n    const [editDescription, setEditDescription] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setDescription(type === \"description\"? incidentData.Description : incidentData.AdditionalData);       \r\n       }, [incidentData, type])\r\n\r\n    const updateIncidentByField = (field , value) => {    \r\n        let parameters = {\r\n          IncidentId : incidentData.Id,\r\n          Parameter : field,\r\n          Value : value,\r\n          UserId : userId\r\n        };\r\n        updateIncident(parameters); // Calling action here\r\n      }\r\n\r\n    const descriptionEditClick = () =>{\r\n        setEditDescription(!editDescription);\r\n        setDescription(type === \"description\"? incidentData.Description : incidentData.AdditionalData);\r\n       \r\n      }\r\n      const descriptionEditCancel = () =>{\r\n        setDescription(type === \"description\"? incidentData.Description : incidentData.AdditionalData);\r\n        setEditDescription(false);\r\n      }\r\n    \r\n      const descriptionEditSave = () =>{\r\n        if(description.trim() === \"\"){\r\n          alert(\"Description cannot be empty.\");\r\n          setDescription(incidentData.Description);\r\n          return;\r\n        }\r\n        type === \"description\"\r\n        ? updateIncidentByField(\"Description\", description.trim())\r\n        : updateIncidentByField(\"AdditionalData\", description.trim());\r\n       \r\n        setEditDescription(false);\r\n      }\r\n    return (\r\n        <>\r\n                 <p className=\"heading left-align indigo-text darken-4\">\r\n                    {\" \"}\r\n                    {/* Description  */}\r\n                    {type === \"description\" ? \"Description\" : \"Additional Details\"}\r\n                    <i\r\n                      className=\"inline-icon material-icons actions-icon\"\r\n                      onClick={descriptionEditClick}\r\n                    >\r\n                      edit\r\n                    </i>\r\n                  </p>\r\n                  {!editDescription ? (\r\n                    <>\r\n                      <div className=\"input-field\">\r\n                        <p className=\"darkslategrayText bigTextScroll\">\r\n                          {description}\r\n                        </p>\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <div className=\"input-field\">\r\n                        {\" \"}\r\n                        {/* Description Edit */}\r\n                        <textarea\r\n                          id=\"description\"\r\n                          className=\"materialize-textarea\"\r\n                          value={description}\r\n                          onChange={(e) => setDescription(e.target.value)}\r\n                        ></textarea>\r\n                        <button\r\n                          title=\"Save\"\r\n                          className=\"btn green darken-2 right updateBtn\"\r\n                          onClick={descriptionEditSave}\r\n                        >\r\n                          <i className=\"actions-icon material-icons\">check</i>\r\n                        </button>\r\n                        <button\r\n                          title=\"Cancel\"\r\n                          className=\"btn yellow darken-2 right updateBtn\"\r\n                          onClick={descriptionEditCancel}\r\n                        >\r\n                          <i className=\"actions-icon material-icons\">cancel</i>\r\n                        </button>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {     \r\n      incidentData: state.incidents.IncidentSelected,\r\n      userId :state.userLogin.userId,    \r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {     \r\n      updateIncident: (parameters) => dispatch(updateIncident(parameters)),  \r\n    };\r\n  };\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(IncidentDescription);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\IncidentTitle.js",["293","294"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport { updateIncident } from \"../../../store/actions/incidentsActions\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nfunction IncidentTitle({\r\n  incidentData,\r\n  updateIncident,\r\n  userId,\r\n  getNameById,\r\n}) {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [editable, setEditable] = useState(false);\r\n\r\n  useEffect(() => {   \r\n    setTitle(incidentData.Title);  \r\n   }, [incidentData])\r\n   \r\n\r\n  const editClick = () => {\r\n    setEditable(!editable);\r\n    setTitle(incidentData.Title);\r\n  };\r\n  const editCancel = () => {\r\n    setTitle(incidentData.Title);\r\n    setEditable(false);\r\n  };\r\n\r\n  const editSave = () => {\r\n    if (title.trim() === \"\") {\r\n      alert(\"Title cannot be empty.\");\r\n      setTitle(incidentData.Title);\r\n      return;\r\n    }\r\n    updateIncidentByField(\"Title\", title.trim());\r\n    setEditable(false);\r\n  };\r\n\r\n  const updateIncidentByField = (field, value) => {\r\n    let parameters = {\r\n      IncidentId: incidentData.Id,\r\n      Parameter: field,\r\n      Value: value,\r\n      UserId: userId,\r\n    };\r\n    updateIncident(parameters); // Calling action here\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col s9\">\r\n        {!editable ? (\r\n          <h5 className=\"left indigo-text darken-4\">\r\n            {\" \"}\r\n            {/* Title  */}\r\n            {title}\r\n            <i className=\"material-icons actions-icon\" onClick={editClick}>\r\n              edit\r\n            </i>\r\n          </h5>\r\n        ) : (\r\n          <div className=\"input-field\">\r\n            {\" \"}\r\n            {/* Title Edit */}\r\n            <input\r\n              type=\"text\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n            />\r\n            <button\r\n              title=\"Save\"\r\n              className=\"btn green darken-2 right updateBtn\"\r\n              onClick={editSave}\r\n            >\r\n              <i className=\"actions-icon material-icons\">check</i>\r\n            </button>\r\n            <button\r\n              title=\"Cancel\"\r\n              className=\"btn yellow darken-2 right updateBtn\"\r\n              onClick={editCancel}\r\n            >\r\n              <i className=\"actions-icon material-icons\">cancel</i>\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"col s3\">        \r\n        <h5>         \r\n          <span\r\n            className=\"im-createTime black-text \"\r\n            title={moment(incidentData.CreatedAT).format(\r\n              \"MMMM DD YYYY, h:mm:ss a\"\r\n            )}\r\n          >\r\n            Created by{\" \"}\r\n            <a className=\"username\"> {getNameById(incidentData.CreatedBy)} </a>{\" \"}\r\n            - {moment(incidentData.CreatedAT).fromNow()}\r\n          </span>\r\n        </h5>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {     \r\n      allAssignees: state.users.users,\r\n      userId :state.userLogin.userId, \r\n      incidentData: state.incidents.IncidentSelected,   \r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {     \r\n      updateIncident: (parameters) => dispatch(updateIncident(parameters)),  \r\n    };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(IncidentTitle);","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\usersActions.js",["295"],"import axios from 'axios';\r\nimport { usersUrls } from \"../../api/apiURLs\";\r\n\r\nexport const  allUsers = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.allUsersUrl\r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const users = response.data;\r\n              dispatch({ type: 'ALL_USERS', users });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n  export const userssWithPage = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.userssWithPageUrl +\r\n                    \"PageSize=\" + parameters.PageSize +\"&PageNumber=\" + parameters.PageNumber \r\n                    + \"&SortBy=q&SortDirection=q&Search=\" + parameters.Search;\r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const data = response.data;                   \r\n              dispatch({ type: 'USERS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n\r\n  export const addNewUser = (formData) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.addNewUserUrl \r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = response.data;\r\n            //  dispatch({ type: 'INCIDENTS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\notificationsActions.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\incidentsActions.js",["296","297","298","299","300","301","302"],"import axios from 'axios';\r\nimport { incidentsUrls } from \"../../api/apiURLs\";\r\nimport { incidentUpdatedSignalR } from \"../../signalR/sender\";\r\n\r\nexport var cancel;\r\n\r\nexport const incidentsWithPage = (parameters) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.incidentsWithPageUrl +\r\n                    \"PageSize=\" + parameters.PageSize +\"&PageNumber=\" + parameters.PageNumber \r\n                    + \"&SortBy=q&SortDirection=q&Search=\" + parameters.Search;     \r\n        axios({\r\n          method: 'GET',\r\n          url: url,         \r\n          cancelToken: new axios.CancelToken(c => cancel = c)\r\n        })\r\n          .then((response)=>{ \r\n             const data = response.data;\r\n              dispatch({ type: 'INCIDENTS_WITH_PAGE', data });\r\n          })\r\n          .catch((err)=>{    \r\n                   console.log(err.message);\r\n                   if(err.message.toLowerCase()==\"request failed with status code 401\")\r\n                         dispatch({ type: 'SIGN_OUT', data:\"token invalid\" });\r\n\r\n                   const data = err.message;\r\n                   console.log(\"error:\", err)\r\n                   dispatch({ type: 'INCIDENTS_WITH_PAGE_ERROR', data });\r\n          });    \r\n    }\r\n  }\r\n\r\n  export const addNewIncident = (formData) => {\r\n    return (dispatch, getState) => {      \r\n      //console.log(\"add new incident action\");\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.addNewIncidentUrl\r\n        axios.post(url, formData)\r\n          .then((response)=>{            \r\n             const data = true;\r\n              dispatch({ type: 'NEW_INCIDENT_STATUS', data });\r\n          })\r\n          .catch((err)=>{  \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n           let data = err.message;\r\n              console.log(data);\r\n            dispatch({ type: 'NEW_INCIDENT_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const addNewComment = (formData) => {\r\n    return (dispatch, getState) => {      \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.addNewCommentUrl\r\n         axios.post(url, formData)\r\n           .then((response)=>{            \r\n             const comment = response.data;\r\n            // console.log(\"Comment\", comment);\r\n              dispatch({ type: 'ADD_NEW_COMMENT', data: comment });\r\n              incidentUpdatedSignalR(comment.IncidentId, comment.UserId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(\"err\", err);\r\n            const data = \"while adding comment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const deleteComment = (commentId, incidentId, userId) => {\r\n    return (dispatch, getState) => {      \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.deleteCommentUrl\r\n                    + \"commentId=\" + commentId\r\n                    + \"&incidentId=\" + incidentId\r\n                    + \"&userId=\" + userId\r\n        axios.get(url)\r\n          .then((response)=>{    \r\n              dispatch({ type: 'COMMENT_DELETED', data: commentId });\r\n              incidentUpdatedSignalR(incidentId, userId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n               dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while delteing comment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const updateIncident = (parameters) => {\r\n    return (dispatch, getState) => {      \r\n     // console.log(comment);\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.updateIncidentUrl\r\n        axios.post(url, parameters)\r\n          .then((response)=>{  \r\n              dispatch({ type: 'INCIDENTS_UPDATE', parameters });\r\n              incidentUpdatedSignalR(parameters.IncidentId, parameters.UserId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n               dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while updating incident: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const updateComment = (comment) => {\r\n    return (dispatch, getState) => {    \r\n       console.log(comment);\r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.updateCommentUrl\r\n        axios.post(url, comment)\r\n          .then((response)=>{  \r\n          //  dispatch(getIncidentById(comment.IncidentId)); \r\n        //  dispatch({ type: 'COMMENT_UPDATE', data:comment });\r\n          incidentUpdatedSignalR(comment.IncidentId, comment.UserId);\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while updating comment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n\r\n  export const getIncidentById = (incidentId) => {\r\n    return (dispatch, getState) => {  \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.getIncidentByIdUrl + incidentId; \r\n        axios.get(url)\r\n          .then((response)=>{            \r\n             const data = response.data;                           \r\n              dispatch({ type: 'INCIDENTS_BY_ID', data });\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while getting data for incident: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const deleteAttachment = (type, userid, incidentId , file) => {\r\n    return (dispatch, getState) => {    \r\n           axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = incidentsUrls.deleteAttachmentUrl\r\n                + \"type=\" + type\r\n                + \"&commentId=\" + file.CommentId \r\n                + \"&incidentId=\" + incidentId\r\n                + \"&userId=\" + userid\r\n                + \"&fileId=\" + file.Id\r\n                + \"&filename=\" + file.FileName\r\n                + \"&contentType=\" + file.ContentType\r\n        axios.get(url)\r\n          .then((response)=>{      \r\n                if (type === \"comment\")\r\n                  dispatch({ type: \"COMMENT_ATTACHMENT_DELETED\", data: file });\r\n                else\r\n                dispatch({ type: \"INCIDENT_ATTACHMENT_DELETED\", data: file });\r\n          })\r\n          .catch((err)=>{                 \r\n            console.log(err.message);\r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n              dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });\r\n            const data = \"while delteing attachment: \" + err.message;\r\n            dispatch({ type: 'INCIDENTS_BY_ID_ERROR', data });\r\n          });   \r\n    }\r\n  }\r\n\r\n  export const removeIncidentData = () => {       \r\n         return   { type: 'REMOVE_INCIDENT_DATA', data : null};\r\n         \r\n  }\r\n\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\userLoginActions.js",["303"],"import axios from 'axios';\r\nimport qs from 'qs';\r\nimport { usersUrls } from \"../../api/apiURLs\";\r\n\r\n// export const logIn = (credentials) => {\r\n//     return (dispatch, getState) => {     \r\n//         axios({\r\n//             method: 'post',\r\n//             //url: baseUrl + 'applications/' + appName + '/dataexport/plantypes' + plan,\r\n//             url : usersUrls.tokenUrl,\r\n//             headers: {'Content-type': 'application/x-www-form-urlencoded'}, \r\n//             data: qs.stringify({\r\n//                 grant_type: 'password',\r\n//                 username: credentials.username,\r\n//                 password: credentials.password \r\n//             }),\r\n//           })\r\n//           .then((response)=>{              \r\n//               const loginData = {\r\n//                   token : response.data.access_token,\r\n//                   Name :  response.data.Name,\r\n//                   User_Id :  response.data.User_Id\r\n//               }\r\n//               dispatch({ type: 'LOGIN_PASS', loginData });\r\n//           })\r\n//           .catch((err)=>{\r\n//                    dispatch({ type: 'LOGIN_FAIL'});\r\n//                    console.log(err);\r\n//           });    \r\n//     }\r\n//   }\r\n\r\n  export const logIn = (credentials) => {\r\n    return (dispatch, getState) => {   \r\n         axios({\r\n            method: 'post',\r\n            //url: baseUrl + 'applications/' + appName + '/dataexport/plantypes' + plan,\r\n            url : usersUrls.authenticateUrl,\r\n            headers: {'Content-type': 'application/json'}, \r\n            data: {               \r\n                Username: credentials.username,\r\n                Password: credentials.password \r\n            },\r\n          })\r\n          .then((response)=>{              \r\n              const loginData = {\r\n                  token : response.data.Token,\r\n                  Name :  response.data.user.FirstName + \" \" +  response.data.user.LastName,\r\n                  User_Id :  response.data.user.Id\r\n              }\r\n              dispatch({ type: 'LOGIN_PASS', loginData });\r\n              dispatch({ type: 'UNREAD_CONVERSATION', data:  response.data.UnreadConversationCount });            \r\n          })\r\n          .catch((err)=>{\r\n                   dispatch({ type: 'LOGIN_FAIL'});\r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n  \r\n  \r\n  export const signOut = () => {\r\n    return (dispatch, getState) => {     \r\n      dispatch({ type: 'SIGN_OUT', data:null });\r\n    }\r\n  }\r\n  \r\n  export const signUp = (newUser) => {\r\n    return (dispatch, getState) => {     \r\n    }\r\n  }\r\n\r\n  export const updateHubId = (hubId, userId) => {\r\n    return (dispatch, getState) => {  \r\n     \r\n        axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = usersUrls.updateHubIdUrl \r\n        axios.post(url, {\r\n          HubId : hubId,\r\n          UserId : userId\r\n        })\r\n          .then((response)=>{          \r\n          \r\n             dispatch({ type: 'UPDATE_HUB', hubId });\r\n          })\r\n          .catch((err)=>{                 \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\api\\apiURLs.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\messagesActions.js",["304","305","306","307","308","309","310","311","312"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\SendMessage.js",["313"],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\store\\actions\\dashboardActions.js",["314","315","316","317","318"],"import axios from 'axios';\r\nimport { dashboardUrls } from \"../../api/apiURLs\";\r\n\r\nexport const  GetKPI = (userId) => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.kpiUrl + userId;       \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n          \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'KPI', data });\r\n          })\r\n          .catch((err)=>{      \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                   dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });           \r\n                   console.log(err);\r\n          });\r\n    \r\n    }\r\n  }\r\n\r\n  export const  GetOverallWidget = () => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.overallWidgetUrl ;      \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n                \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'OVERALLWIDGET', data });\r\n          })\r\n          .catch((err)=>{     \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n             dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });            \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n\r\n  export const  GetLast5Incidents = () => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.last5IncidentsUrl ;      \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n          \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'LAST5INCIDENTS', data });\r\n          })\r\n          .catch((err)=>{     \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n               dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });            \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n \r\n\r\n  export const  GetOldest5UnresolvedIncidents = () => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.oldest5UnresolvedIncidentsUrl ;      \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n           \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'OLDEST5UNRESOLVEDINCIDENTS', data });\r\n          })\r\n          .catch((err)=>{        \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n               dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });         \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n \r\n  export const  GetMostAssignedToUsers = () => {\r\n    return (dispatch, getState) => {  \r\n             axios.defaults.headers = {'Authorization': `Bearer ${getState().userLogin.token + \"\"}`};\r\n        const url = dashboardUrls.mostAssignedToUsersIncidentsUrl ;      \r\n        axios.get(url)\r\n          .then((response)=>{      \r\n                 \r\n             const data = response.data;\r\n            // console.log(data);\r\n              dispatch({ type: 'MOSTASSIGNEDTOUSERS', data });\r\n          })\r\n          .catch((err)=>{    \r\n            if (err.message.toLowerCase() == \"request failed with status code 401\")\r\n                dispatch({ type: 'SIGN_OUT', data: \"token invalid\" });             \r\n                   console.log(err);\r\n          });    \r\n    }\r\n  }\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Incidents\\IncidentDetails\\Comment.js",["319","320","321","322","323","324"],"import { React, useEffect, useState, useRef } from \"react\";\r\nimport moment from \"moment\";\r\nimport { deleteAttachment, updateComment , deleteComment } from \"../../../store/actions/incidentsActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { incidentsUrls } from \"../../../api/apiURLs\";\r\n\r\nfunction Comment({\r\n  comment,\r\n  getNameById,\r\n  incidentId,\r\n  userId,\r\n  deleteAttachment,\r\n  updateComment,\r\n  deleteComment\r\n}) {\r\n\r\n  const [editComment, setEditComment] = useState(false);\r\n  const [commentText, setCommentText] = useState(comment.CommentText);\r\n  const [files, setFiles] = useState(null);\r\n\r\n  const commentEditClick = () => {\r\n    setEditComment(!editComment);\r\n    setCommentText(comment.CommentText);\r\n  };\r\n  const commentEditCancel = () => {\r\n    setCommentText(comment.CommentText);\r\n    setEditComment(false);\r\n  };\r\n\r\n  const commentEditSave = () => {\r\n    let changedComment = {\r\n      Id : comment.Id,\r\n      IncidentId : incidentId,\r\n      UserId : userId,\r\n      CreateDate : new Date(),\r\n      CommentText : commentText,\r\n      attachments :[]\r\n    }\r\n    updateComment(changedComment);\r\n    setEditComment(false);\r\n  };\r\n\r\n  const downloadFile = (file) => {\r\n    window.open(\r\n      incidentsUrls.downloadFileUrl + \r\n      \"type=comment\" +\r\n        \"&commentId=\" +\r\n        file.CommentId +\r\n        \"&incidentId=\" +\r\n        incidentId +\r\n        \"&filename=\" +\r\n        file.FileName +\r\n        \"&contentType=\" +\r\n        file.ContentType\r\n    );\r\n  };\r\n\r\n  const deleteFile = (file) => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this attachment.\" + file.FileName\r\n      )\r\n    ) {\r\n      deleteAttachment(\"comment\", userId, incidentId, file);  \r\n    }\r\n  };\r\n\r\n  const deleteThisComment = () => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this comment.\"\r\n      )\r\n    ) {\r\n      deleteComment(comment.Id,incidentId, userId );  \r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <p className=\"commentHeader darkslategrayText\">\r\n        <a className=\"username\">{getNameById(comment.UserId)}</a> added a\r\n        comment. -{\" \"}\r\n        <span\r\n          title={moment(comment.CreateDate).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n        >\r\n          {moment(comment.CreateDate).fromNow()}{\" \"}\r\n        </span>\r\n        <span className=\"right\">\r\n          <i\r\n            title=\"Edit Comment\"\r\n            className=\"actions-icon material-icons indigo-text darken-4 inline-icon\"\r\n            onClick={commentEditClick}\r\n          >\r\n            edit\r\n          </i>\r\n          <i\r\n            title=\"Delete Comment\"\r\n            className=\"actions-icon material-icons red-text inline-icon\"\r\n            onClick = {deleteThisComment}\r\n          >\r\n            cancel\r\n          </i>\r\n        </span>\r\n      </p>\r\n      {!editComment ? (\r\n        <p className=\"darkslategrayText\">{comment.CommentText}</p>\r\n      ) : (\r\n        <p className=\"comment-edit-box\">\r\n          <textarea className=\"materialize-textarea\" onChange={(e) => setCommentText(e.target.value)}></textarea>\r\n\r\n          <i\r\n            className=\"right green-text actions-icon material-icons\"\r\n            title=\"Save\"\r\n            onClick={commentEditSave}\r\n          >\r\n            check\r\n          </i>\r\n          <i\r\n            className=\"right yellow-text text-darken-2 actions-icon material-icons\"\r\n            title=\"Cancel\"\r\n            onClick={commentEditCancel}\r\n          >\r\n            cancel\r\n          </i>\r\n        </p>\r\n      )}{\" \"}\r\n      {/* end of edit comment - if */}\r\n      <p>\r\n        <ul className=\"commentFiles\">\r\n          {!comment.attachments\r\n            ? null\r\n            : comment.attachments.map((file) => {\r\n                return (\r\n                  <li key={file.Id}>\r\n                    <a className=\"center indigo-text darken-4\">\r\n                      {!editComment ? null : (\r\n                        <i\r\n                          title=\"Remove\"\r\n                          className=\"actions-icon material-icons red-text inline-icon\"\r\n                          onClick={() => deleteFile(file)}\r\n                        >\r\n                          cancel\r\n                        </i>\r\n                      )}\r\n                      <span\r\n                        title={file.FileName}\r\n                        onClick={() => downloadFile(file)}\r\n                      >\r\n                        {file.FileName.length > 40\r\n                          ? file.FileName.slice(0, 40) + \"...\"\r\n                          : file.FileName}\r\n                      </span>\r\n                    </a>\r\n                  </li>\r\n                );\r\n              })}\r\n        </ul>\r\n      </p>\r\n      <hr></hr>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allAssignees: state.users.users,\r\n    incidentData: state.incidents.IncidentSelected,\r\n    userId :state.userLogin.userId,  // logged in User Id       \r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {   \r\n    deleteAttachment : (type, userid, incidentId , file) => dispatch(deleteAttachment(type, userid, incidentId ,file)),\r\n    updateComment : (comment) => dispatch(updateComment(comment)),\r\n    deleteComment : (commentId, incidentId, userId) => dispatch(deleteComment(commentId, incidentId, userId))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\signalR\\sender.js",[],"D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\ComposeMessage.js",["325","326"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { sendNewMessage, conversationsByUser } from \"../../store/actions/messagesActions\";\r\nimport  AssigneeDropdown  from \"../../components/Incidents/AssigneeDropdown\";\r\nimport '../../styles/composemessage.css'\r\n\r\nfunction ComposeMessage({\r\n    userId,\r\n    allUsers,\r\n    UserMessages,\r\n    sendNewMessage,\r\n    conversationsByUser,\r\n    setComposeToggle,\r\n    newConversationAdded\r\n}) {\r\n\r\n\r\n    const [receiver, setReceiver] = useState(null);\r\n    const [receivereName, setReceiverName] = useState(\"\");  \r\n    const [messageText, setMessageText] = useState(\"\");\r\n  \r\n    const sendMessage = (event) => {\r\n        \r\n        event.preventDefault();\r\n\r\n        if(messageText.trim() == \"\" || receiver == null){\r\n            alert(\"Please select a user and type message.\");\r\n            return;\r\n        }\r\n       \r\n        const formData = new FormData(); \r\n\r\n         formData.append(\"From\", userId); \r\n         formData.append(\"To\", receiver);\r\n         formData.append(\"MessageText\", messageText);     \r\n      \r\n        sendNewMessage(formData);\r\n\r\n        setMessageText(\"\");\r\n        setReceiverName(\"\");\r\n        setReceiver(null);\r\n        conversationsByUser(userId);\r\n        setComposeToggle(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"compose-message-container\">    \r\n            <h5>Compose New Message</h5>\r\n                    <form action=\"#\">\r\n                        <div className=\"field\">\r\n                            <AssigneeDropdown\r\n                                updateIncidentByField={null}\r\n                                setAssignee={setReceiver}\r\n                                assigneeName={receivereName}\r\n                                setAssigneeName={setReceiverName}\r\n                            />\r\n                        </div>\r\n                <div className=\"input-field\">\r\n                    <textarea className=\"materialize-textarea\" cols=\"30\" value={messageText} rows=\"10\" onChange={(e) => setMessageText(e.target.value)} placeholder=\"Write message here\" required></textarea>\r\n                </div>\r\n\r\n                <div>\r\n                    <button\r\n                        className=\" btn green darken-2 updateBtn\"\r\n                        onClick={(event) => sendMessage(event)}\r\n                    >\r\n                        <span>Send</span>\r\n                        <i className=\"material-icons right\">send</i>\r\n                    </button>\r\n\r\n                    <button\r\n                        className=\" btn yellow darken-2 updateBtn\"\r\n                        onClick={() => setComposeToggle(false)}\r\n                    >\r\n                        <span>Cancel</span>\r\n                        <i className=\"material-icons right\">cancel</i>\r\n                    </button>\r\n                </div>\r\n                    </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n        allUsers: state.users.users,\r\n        UserMessages : state.messages.Messages,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendNewMessage: (formData) => dispatch(sendNewMessage(formData)),   \r\n        conversationsByUser: (userId) => dispatch(conversationsByUser(userId)),  \r\n    }\r\n  }\r\n\r\n  export default connect(mapStateToProps, mapDispatchToProps)(ComposeMessage); \r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Reply.js",["327","328"],"import { React, useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { replyMessage } from \"../../store/actions/messagesActions\";\r\n\r\nconst Reply = ({\r\n    userId,      \r\n    replyMessage,\r\n    UserMessages\r\n    \r\n}) => {\r\n\r\n    const [messageText, setMessageText] = useState(\"\");\r\n  \r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n\r\n        let To = UserMessages[0].From == userId? UserMessages[0].To : UserMessages[0].From;\r\n        let conversationId = UserMessages[0].ConversationId;\r\n        const formData = new FormData(); \r\n\r\n         formData.append(\"From\", userId); \r\n         formData.append(\"To\", To);\r\n         formData.append(\"MessageText\", messageText);     \r\n        \r\n         replyMessage(formData, conversationId);\r\n        setMessageText(\"\");\r\n     \r\n    }\r\n\r\n    return (\r\n        <div className=\"new-message-window\">\r\n            <div className=\"input-field\">\r\n                <textarea\r\n                    id=\"comment\"\r\n                    className=\"materialize-textarea\"\r\n                    placeholder='Write new message'\r\n                     value={messageText}\r\n                     onChange={(e) => setMessageText(e.target.value)}\r\n                ></textarea>\r\n            </div>\r\n            <div>\r\n                <button\r\n                    className=\"left btn green darken-2 updateBtn\"\r\n                    onClick={(event) => sendMessage(event)}\r\n                >\r\n                    <span>Send</span>\r\n                    <i className=\"material-icons right\">send</i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        userId :state.userLogin.userId, \r\n        allUsers: state.users.users,\r\n        UserMessages : state.messages.Messages,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        replyMessage: (formData, conversationId) => dispatch(replyMessage(formData, conversationId)),    \r\n    }\r\n  }\r\n\r\n  export default connect(mapStateToProps, mapDispatchToProps)(Reply); \r\n\r\n","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Message.js",["329"],"import moment from \"moment\";\r\n\r\nconst Message = ({ message, userId }) => {\r\n\r\n    const isSender = message.From == userId ? true: false;\r\n\r\n    return (\r\n        <li className='message-li'>\r\n            <div className='message-time'><span title= {moment(message.Date).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(message.Date).fromNow() } </span></div>\r\n            <div className={isSender ? \"message left\" : \"message right\"}>\r\n                <div className='message-text'>\r\n                   {message.MessageText}\r\n                </div>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Message;","D:\\GitHub\\__Mine\\IM\\incidentmanager_React\\src\\components\\Messages\\Conversation.js",["330","331","332","333","334","335"],"import { React, useState, useEffect, useRef} from 'react'\r\nimport moment from \"moment\";\r\n\r\nconst Conversation = ({ conversation, allUsers, userId, getUserNameById, conversationClicked, selectedConversation})=> {\r\n    const user = conversation.User1 == userId? conversation.User2 : conversation.User1;\r\n\r\n    \r\n    const conversationSelected = (id) => {\r\n        conversationClicked(id);\r\n    }\r\n    \r\n    const cssClass = selectedConversation == conversation.Id ? \"user-info selected\" : \"user-info\";\r\n\r\n    return (\r\n        <li >\r\n            <div className={cssClass} onClick={() => conversationSelected(conversation.Id)}>\r\n                <div className='photo'>\r\n                    <button type=\"button\" title={\"Umar Shareef\"} className=\"btn-floating  pink darken-2 userWelcome\" >\r\n                        {getUserNameById(user).toUpperCase().split(/\\s/).reduce((response, word) => response += word.slice(0, 1), '')}\r\n                    </button>\r\n                </div>\r\n                <div className='name-message'>\r\n                    <div className='name-unread' >\r\n                        <span className='name indigo-text darken-4'>{getUserNameById(user)} </span>\r\n                        {conversation.UnReadCount == 0 ?\r\n                            null :\r\n                            (<span className='unread-count'>{conversation.UnReadCount} new</span>)\r\n                        }\r\n                    </div>\r\n                    <div className='last-message'>\r\n                        <span className='last-message-text'>{conversation.LastMessage.slice(0,20)}</span>\r\n                        <span className='date-time'><span title= {moment(conversation.LastMessageTime).format(\"MMMM DD YYYY, h:mm:ss a\")}>{moment(conversation.LastMessageTime).fromNow() } </span></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <hr></hr>\r\n\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Conversation;",{"ruleId":"336","replacedBy":"337"},{"ruleId":"338","replacedBy":"339"},{"ruleId":"340","severity":1,"message":"341","line":18,"column":42,"nodeType":"342","messageId":"343","endLine":18,"endColumn":44},{"ruleId":"344","severity":1,"message":"345","line":32,"column":15,"nodeType":"346","endLine":32,"endColumn":33},{"ruleId":"347","severity":1,"message":"348","line":35,"column":11,"nodeType":"346","endLine":35,"endColumn":77},{"ruleId":"347","severity":1,"message":"349","line":73,"column":14,"nodeType":"346","endLine":73,"endColumn":17},{"ruleId":"347","severity":1,"message":"349","line":95,"column":15,"nodeType":"346","endLine":95,"endColumn":18},{"ruleId":"347","severity":1,"message":"348","line":99,"column":15,"nodeType":"346","endLine":99,"endColumn":50},{"ruleId":"350","severity":1,"message":"351","line":27,"column":8,"nodeType":"352","endLine":27,"endColumn":38,"suggestions":"353"},{"ruleId":"344","severity":1,"message":"345","line":32,"column":16,"nodeType":"346","endLine":32,"endColumn":33},{"ruleId":"344","severity":1,"message":"345","line":40,"column":15,"nodeType":"346","endLine":40,"endColumn":68},{"ruleId":"354","severity":1,"message":"355","line":1,"column":17,"nodeType":"356","messageId":"357","endLine":1,"endColumn":23},{"ruleId":"354","severity":1,"message":"358","line":3,"column":8,"nodeType":"356","messageId":"357","endLine":3,"endColumn":9},{"ruleId":"350","severity":1,"message":"351","line":21,"column":8,"nodeType":"352","endLine":21,"endColumn":10,"suggestions":"359"},{"ruleId":"350","severity":1,"message":"351","line":37,"column":8,"nodeType":"352","endLine":37,"endColumn":38,"suggestions":"360"},{"ruleId":"350","severity":1,"message":"361","line":45,"column":8,"nodeType":"352","endLine":45,"endColumn":10,"suggestions":"362"},{"ruleId":"340","severity":1,"message":"341","line":41,"column":43,"nodeType":"342","messageId":"343","endLine":41,"endColumn":45},{"ruleId":"350","severity":1,"message":"363","line":51,"column":8,"nodeType":"352","endLine":51,"endColumn":10,"suggestions":"364"},{"ruleId":"354","severity":1,"message":"365","line":28,"column":10,"nodeType":"356","messageId":"357","endLine":28,"endColumn":18},{"ruleId":"354","severity":1,"message":"366","line":36,"column":10,"nodeType":"356","messageId":"357","endLine":36,"endColumn":31},{"ruleId":"354","severity":1,"message":"367","line":36,"column":33,"nodeType":"356","messageId":"357","endLine":36,"endColumn":57},{"ruleId":"350","severity":1,"message":"368","line":52,"column":6,"nodeType":"352","endLine":52,"endColumn":23,"suggestions":"369"},{"ruleId":"350","severity":1,"message":"370","line":64,"column":6,"nodeType":"352","endLine":64,"endColumn":20,"suggestions":"371"},{"ruleId":"372","severity":1,"message":"373","line":89,"column":28,"nodeType":"342","messageId":"374","endLine":89,"endColumn":29},{"ruleId":"354","severity":1,"message":"375","line":8,"column":8,"nodeType":"356","messageId":"357","endLine":8,"endColumn":21},{"ruleId":"354","severity":1,"message":"376","line":25,"column":12,"nodeType":"356","messageId":"357","endLine":25,"endColumn":21},{"ruleId":"354","severity":1,"message":"377","line":25,"column":23,"nodeType":"356","messageId":"357","endLine":25,"endColumn":35},{"ruleId":"350","severity":1,"message":"378","line":32,"column":8,"nodeType":"352","endLine":32,"endColumn":10,"suggestions":"379"},{"ruleId":"340","severity":1,"message":"341","line":35,"column":33,"nodeType":"342","messageId":"343","endLine":35,"endColumn":35},{"ruleId":"350","severity":1,"message":"380","line":40,"column":8,"nodeType":"352","endLine":40,"endColumn":23,"suggestions":"381"},{"ruleId":"340","severity":1,"message":"341","line":46,"column":45,"nodeType":"342","messageId":"343","endLine":46,"endColumn":47},{"ruleId":"350","severity":1,"message":"382","line":53,"column":8,"nodeType":"352","endLine":53,"endColumn":22,"suggestions":"383"},{"ruleId":"340","severity":1,"message":"384","line":22,"column":23,"nodeType":"342","messageId":"343","endLine":22,"endColumn":25},{"ruleId":"340","severity":1,"message":"384","line":26,"column":43,"nodeType":"342","messageId":"343","endLine":26,"endColumn":45},{"ruleId":"350","severity":1,"message":"385","line":52,"column":8,"nodeType":"352","endLine":52,"endColumn":16,"suggestions":"386"},{"ruleId":"350","severity":1,"message":"387","line":56,"column":8,"nodeType":"352","endLine":56,"endColumn":48,"suggestions":"388"},{"ruleId":"347","severity":1,"message":"349","line":73,"column":15,"nodeType":"346","endLine":73,"endColumn":19},{"ruleId":"347","severity":1,"message":"349","line":109,"column":37,"nodeType":"346","endLine":109,"endColumn":40},{"ruleId":"347","severity":1,"message":"349","line":111,"column":33,"nodeType":"346","endLine":111,"endColumn":36},{"ruleId":"347","severity":1,"message":"349","line":18,"column":19,"nodeType":"346","endLine":18,"endColumn":53},{"ruleId":"347","severity":1,"message":"349","line":23,"column":19,"nodeType":"346","endLine":23,"endColumn":51},{"ruleId":"347","severity":1,"message":"349","line":28,"column":19,"nodeType":"346","endLine":28,"endColumn":52},{"ruleId":"354","severity":1,"message":"389","line":33,"column":9,"nodeType":"356","messageId":"357","endLine":33,"endColumn":23},{"ruleId":"340","severity":1,"message":"341","line":43,"column":86,"nodeType":"342","messageId":"343","endLine":43,"endColumn":88},{"ruleId":"340","severity":1,"message":"341","line":43,"column":112,"nodeType":"342","messageId":"343","endLine":43,"endColumn":114},{"ruleId":"350","severity":1,"message":"390","line":34,"column":7,"nodeType":"352","endLine":34,"endColumn":9,"suggestions":"391"},{"ruleId":"354","severity":1,"message":"392","line":2,"column":27,"nodeType":"356","messageId":"357","endLine":2,"endColumn":43},{"ruleId":"350","severity":1,"message":"361","line":18,"column":10,"nodeType":"352","endLine":18,"endColumn":12,"suggestions":"393"},{"ruleId":"354","severity":1,"message":"394","line":1,"column":17,"nodeType":"356","messageId":"357","endLine":1,"endColumn":26},{"ruleId":"354","severity":1,"message":"395","line":2,"column":8,"nodeType":"356","messageId":"357","endLine":2,"endColumn":14},{"ruleId":"354","severity":1,"message":"396","line":19,"column":9,"nodeType":"356","messageId":"357","endLine":19,"endColumn":16},{"ruleId":"354","severity":1,"message":"397","line":1,"column":27,"nodeType":"356","messageId":"357","endLine":1,"endColumn":35},{"ruleId":"350","severity":1,"message":"398","line":11,"column":4,"nodeType":"352","endLine":11,"endColumn":6,"suggestions":"399"},{"ruleId":"347","severity":1,"message":"349","line":72,"column":11,"nodeType":"346","endLine":72,"endColumn":56},{"ruleId":"350","severity":1,"message":"400","line":12,"column":8,"nodeType":"352","endLine":12,"endColumn":10,"suggestions":"401"},{"ruleId":"354","severity":1,"message":"397","line":1,"column":27,"nodeType":"356","messageId":"357","endLine":1,"endColumn":35},{"ruleId":"350","severity":1,"message":"402","line":12,"column":4,"nodeType":"352","endLine":12,"endColumn":6,"suggestions":"403"},{"ruleId":"347","severity":1,"message":"349","line":74,"column":11,"nodeType":"346","endLine":74,"endColumn":56},{"ruleId":"350","severity":1,"message":"404","line":11,"column":6,"nodeType":"352","endLine":11,"endColumn":8,"suggestions":"405"},{"ruleId":"406","severity":1,"message":"407","line":77,"column":10,"nodeType":"408","messageId":"343","endLine":77,"endColumn":15},{"ruleId":"354","severity":1,"message":"397","line":1,"column":26,"nodeType":"356","messageId":"357","endLine":1,"endColumn":34},{"ruleId":"350","severity":1,"message":"409","line":12,"column":6,"nodeType":"352","endLine":12,"endColumn":8,"suggestions":"410"},{"ruleId":"354","severity":1,"message":"355","line":1,"column":38,"nodeType":"356","messageId":"357","endLine":1,"endColumn":44},{"ruleId":"354","severity":1,"message":"355","line":1,"column":38,"nodeType":"356","messageId":"357","endLine":1,"endColumn":44},{"ruleId":"347","severity":1,"message":"349","line":96,"column":13,"nodeType":"346","endLine":96,"endColumn":37},{"ruleId":"354","severity":1,"message":"411","line":46,"column":20,"nodeType":"356","messageId":"357","endLine":46,"endColumn":24},{"ruleId":"340","severity":1,"message":"341","line":25,"column":48,"nodeType":"342","messageId":"343","endLine":25,"endColumn":50},{"ruleId":"340","severity":1,"message":"341","line":46,"column":43,"nodeType":"342","messageId":"343","endLine":46,"endColumn":45},{"ruleId":"340","severity":1,"message":"341","line":88,"column":43,"nodeType":"342","messageId":"343","endLine":88,"endColumn":45},{"ruleId":"340","severity":1,"message":"341","line":108,"column":43,"nodeType":"342","messageId":"343","endLine":108,"endColumn":45},{"ruleId":"340","severity":1,"message":"341","line":129,"column":43,"nodeType":"342","messageId":"343","endLine":129,"endColumn":45},{"ruleId":"340","severity":1,"message":"341","line":149,"column":43,"nodeType":"342","messageId":"343","endLine":149,"endColumn":45},{"ruleId":"340","severity":1,"message":"341","line":177,"column":43,"nodeType":"342","messageId":"343","endLine":177,"endColumn":45},{"ruleId":"354","severity":1,"message":"412","line":2,"column":8,"nodeType":"356","messageId":"357","endLine":2,"endColumn":10},{"ruleId":"340","severity":1,"message":"341","line":23,"column":50,"nodeType":"342","messageId":"343","endLine":23,"endColumn":52},{"ruleId":"354","severity":1,"message":"411","line":25,"column":26,"nodeType":"356","messageId":"357","endLine":25,"endColumn":30},{"ruleId":"340","severity":1,"message":"341","line":47,"column":50,"nodeType":"342","messageId":"343","endLine":47,"endColumn":52},{"ruleId":"354","severity":1,"message":"411","line":49,"column":26,"nodeType":"356","messageId":"357","endLine":49,"endColumn":30},{"ruleId":"340","severity":1,"message":"341","line":72,"column":43,"nodeType":"342","messageId":"343","endLine":72,"endColumn":45},{"ruleId":"354","severity":1,"message":"411","line":75,"column":26,"nodeType":"356","messageId":"357","endLine":75,"endColumn":30},{"ruleId":"354","severity":1,"message":"411","line":88,"column":20,"nodeType":"356","messageId":"357","endLine":88,"endColumn":24},{"ruleId":"340","severity":1,"message":"341","line":96,"column":43,"nodeType":"342","messageId":"343","endLine":96,"endColumn":45},{"ruleId":"340","severity":1,"message":"341","line":125,"column":43,"nodeType":"342","messageId":"343","endLine":125,"endColumn":45},{"ruleId":"354","severity":1,"message":"394","line":1,"column":27,"nodeType":"356","messageId":"357","endLine":1,"endColumn":36},{"ruleId":"340","severity":1,"message":"341","line":16,"column":43,"nodeType":"342","messageId":"343","endLine":16,"endColumn":45},{"ruleId":"340","severity":1,"message":"341","line":36,"column":43,"nodeType":"342","messageId":"343","endLine":36,"endColumn":45},{"ruleId":"340","severity":1,"message":"341","line":55,"column":43,"nodeType":"342","messageId":"343","endLine":55,"endColumn":45},{"ruleId":"340","severity":1,"message":"341","line":75,"column":43,"nodeType":"342","messageId":"343","endLine":75,"endColumn":45},{"ruleId":"340","severity":1,"message":"341","line":94,"column":43,"nodeType":"342","messageId":"343","endLine":94,"endColumn":45},{"ruleId":"354","severity":1,"message":"394","line":1,"column":17,"nodeType":"356","messageId":"357","endLine":1,"endColumn":26},{"ruleId":"354","severity":1,"message":"355","line":1,"column":38,"nodeType":"356","messageId":"357","endLine":1,"endColumn":44},{"ruleId":"354","severity":1,"message":"413","line":19,"column":10,"nodeType":"356","messageId":"357","endLine":19,"endColumn":15},{"ruleId":"354","severity":1,"message":"414","line":19,"column":17,"nodeType":"356","messageId":"357","endLine":19,"endColumn":25},{"ruleId":"347","severity":1,"message":"349","line":81,"column":9,"nodeType":"346","endLine":81,"endColumn":33},{"ruleId":"347","severity":1,"message":"349","line":135,"column":21,"nodeType":"346","endLine":135,"endColumn":64},{"ruleId":"354","severity":1,"message":"394","line":1,"column":27,"nodeType":"356","messageId":"357","endLine":1,"endColumn":36},{"ruleId":"340","severity":1,"message":"341","line":26,"column":31,"nodeType":"342","messageId":"343","endLine":26,"endColumn":33},{"ruleId":"354","severity":1,"message":"394","line":1,"column":27,"nodeType":"356","messageId":"357","endLine":1,"endColumn":36},{"ruleId":"340","severity":1,"message":"341","line":17,"column":39,"nodeType":"342","messageId":"343","endLine":17,"endColumn":41},{"ruleId":"340","severity":1,"message":"341","line":5,"column":35,"nodeType":"342","messageId":"343","endLine":5,"endColumn":37},{"ruleId":"354","severity":1,"message":"397","line":1,"column":17,"nodeType":"356","messageId":"357","endLine":1,"endColumn":25},{"ruleId":"354","severity":1,"message":"394","line":1,"column":27,"nodeType":"356","messageId":"357","endLine":1,"endColumn":36},{"ruleId":"354","severity":1,"message":"355","line":1,"column":38,"nodeType":"356","messageId":"357","endLine":1,"endColumn":44},{"ruleId":"340","severity":1,"message":"341","line":5,"column":37,"nodeType":"342","messageId":"343","endLine":5,"endColumn":39},{"ruleId":"340","severity":1,"message":"341","line":12,"column":43,"nodeType":"342","messageId":"343","endLine":12,"endColumn":45},{"ruleId":"340","severity":1,"message":"341","line":25,"column":51,"nodeType":"342","messageId":"343","endLine":25,"endColumn":53},"no-native-reassign",["415"],"no-negated-in-lhs",["416"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["417"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'M' is defined but never used.",["418"],["419"],"React Hook useEffect has a missing dependency: 'getAllAssignees'. Either include it or remove the dependency array. If 'getAllAssignees' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["420"],"React Hook useEffect has missing dependencies: 'Messages', 'commentRecieved', 'conversationsByUser', 'receiveMessage', 'refreshNotifications', 'updateHubId', and 'userId'. Either include them or remove the dependency array. If 'updateHubId' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["421"],"'assignee' is assigned a value but never used.","'editAdditionalDetails' is assigned a value but never used.","'setEditAdditionalDetails' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getIncidentById'. Either include it or remove the dependency array. If 'getIncidentById' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["422"],"React Hook useEffect has a missing dependency: 'allAssignees'. Either include it or remove the dependency array.",["423"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'DayByDayCount' is defined but never used.","'usersInfo' is assigned a value but never used.","'setUsersInfo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'conversationsByUser' and 'userId'. Either include them or remove the dependency array. If 'conversationsByUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["424"],"React Hook useEffect has a missing dependency: 'selectedConversation'. Either include it or remove the dependency array.",["425"],"React Hook useEffect has missing dependencies: 'getUserNameById' and 'userId'. Either include them or remove the dependency array.",["426"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'pageInformation' and 'setPageNumber'. Either include them or remove the dependency array. If 'setPageNumber' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["427"],"React Hook useEffect has a missing dependency: 'pageInformation'. Either include it or remove the dependency array.",["428"],"'dateDifference' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getNotifications' and 'userId'. Either include them or remove the dependency array. If 'getNotifications' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["429"],"'deleteAttachment' is defined but never used.",["430"],"'useEffect' is defined but never used.","'moment' is defined but never used.","'history' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getOldest5UnresolvedIncidents'. Either include it or remove the dependency array. If 'getOldest5UnresolvedIncidents' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["431"],"React Hook useEffect has a missing dependency: 'getOverallWidgetData'. Either include it or remove the dependency array. If 'getOverallWidgetData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["432"],"React Hook useEffect has a missing dependency: 'getLast5IncidentsData'. Either include it or remove the dependency array. If 'getLast5IncidentsData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["433"],"React Hook useEffect has a missing dependency: 'getMostAssignedToUsers'. Either include it or remove the dependency array. If 'getMostAssignedToUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["434"],"no-dupe-keys","Duplicate key 'title'.","ObjectExpression","React Hook useEffect has missing dependencies: 'getKPIData' and 'userId'. Either include them or remove the dependency array. If 'getKPIData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["435"],"'data' is assigned a value but never used.","'qs' is defined but never used.","'files' is assigned a value but never used.","'setFiles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"436","fix":"437"},{"desc":"438","fix":"439"},{"desc":"436","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"449","fix":"450"},{"desc":"451","fix":"452"},{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"441","fix":"461"},{"desc":"462","fix":"463"},{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},{"desc":"468","fix":"469"},{"desc":"470","fix":"471"},"Update the dependencies array to be: [PageNumber, PageSize, Search, props]",{"range":"472","text":"473"},"Update the dependencies array to be: [props]",{"range":"474","text":"475"},{"range":"476","text":"473"},"Update the dependencies array to be: [getAllAssignees]",{"range":"477","text":"478"},"Update the dependencies array to be: [Messages, commentRecieved, conversationsByUser, receiveMessage, refreshNotifications, updateHubId, userId]",{"range":"479","text":"480"},"Update the dependencies array to be: [getIncidentById, match.params.id]",{"range":"481","text":"482"},"Update the dependencies array to be: [allAssignees, incidentData]",{"range":"483","text":"484"},"Update the dependencies array to be: [conversationsByUser, userId]",{"range":"485","text":"486"},"Update the dependencies array to be: [Conversations, selectedConversation]",{"range":"487","text":"488"},"Update the dependencies array to be: [UserMessages, getUserNameById, userId]",{"range":"489","text":"490"},"Update the dependencies array to be: [pageInformation, search, setPageNumber]",{"range":"491","text":"492"},"Update the dependencies array to be: [currentPage, currentSize, TotalRecords, pageInformation]",{"range":"493","text":"494"},"Update the dependencies array to be: [getNotifications, userId]",{"range":"495","text":"496"},{"range":"497","text":"478"},"Update the dependencies array to be: [getOldest5UnresolvedIncidents]",{"range":"498","text":"499"},"Update the dependencies array to be: [getOverallWidgetData]",{"range":"500","text":"501"},"Update the dependencies array to be: [getLast5IncidentsData]",{"range":"502","text":"503"},"Update the dependencies array to be: [getMostAssignedToUsers]",{"range":"504","text":"505"},"Update the dependencies array to be: [getKPIData, userId]",{"range":"506","text":"507"},[807,837],"[PageNumber, PageSize, Search, props]",[758,760],"[props]",[1147,1177],[1738,1740],"[getAllAssignees]",[2077,2079],"[Messages, commentRecieved, conversationsByUser, receiveMessage, refreshNotifications, updateHubId, userId]",[1671,1688],"[getIncidentById, match.params.id]",[2148,2162],"[allAssignees, incidentData]",[1060,1062],"[conversationsByUser, userId]",[1344,1359],"[Conversations, selectedConversation]",[1797,1811],"[UserMessages, getUserNameById, userId]",[1498,1506],"[pageInformation, search, setPageNumber]",[1573,1613],"[currentPage, currentSize, TotalRecords, pageInformation]",[1012,1014],"[getNotifications, userId]",[761,763],[423,425],"[getOldest5UnresolvedIncidents]",[454,456],"[getOverallWidgetData]",[384,386],"[getLast5IncidentsData]",[400,402],"[getMostAssignedToUsers]",[345,347],"[getKPIData, userId]"]